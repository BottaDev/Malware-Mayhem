using System.Collections;
using UnityEngine;
using MM.Events;
using MM.Inputs;

namespace MM.Cam
{
    /// <summary>
    /// Move the camera between the player and the mouse position.
    /// </summary>
    public class PlayerCameraTarget : MonoBehaviour
    {
        #region Private Variables
        [Tooltip("How far the camera can move from the player")]
        [SerializeField] private float tresHold = 3;
        
        private Transform _player;
        private bool _playerSpawn;
        #endregion
    
        #region MonoBehaviour Functions
        
        private void Awake()
        {
            StartCoroutine(WaitToPlayer());
        }
    
        private void Start()
        {
            EventManager.Instance.Subscribe(NameEvent.OnPlayerSpawned, OnPlayerSpawned);
        }
    
        private void Update()
        {
            if (_player == null)
            {
                return;
            }
    
            var mousePos = InputManager.Instance.mousePosition;
            var playerPos = _player.position;
            var targetPos = (playerPos + mousePos) / 2f; // Get the middle point between the player and the mouse position.
    
            // Clamp the target position to the tresHold.
            targetPos.x = Mathf.Clamp(targetPos.x, -tresHold + playerPos.x, tresHold + playerPos.x);
            targetPos.z = Mathf.Clamp(targetPos.z, -tresHold + playerPos.z, tresHold + playerPos.z);
            targetPos.y = 0;
            
            transform.position = targetPos;
        }
        
        #endregion
        
        #region Event Functions
        
        private void OnPlayerSpawned(params object[] parameters)
        {
            _playerSpawn = (bool)parameters[0];
        }
        
        #endregion
    
        #region Private Functions
        
        /// <summary>
        /// Wait until player is spawned to get his transform.
        /// </summary>
        private IEnumerator WaitToPlayer()
        {
            yield return new WaitUntil(() => _playerSpawn);
            EventManager.Instance.Unsubscribe(NameEvent.OnPlayerSpawned, OnPlayerSpawned);
            
            _player = GameObject.FindWithTag("Player").GetComponent<Transform>();
            
            if(_player == null)
            {
                StartCoroutine(nameof(WaitAgainToFindPlayer));
            }
        }

        private IEnumerator WaitAgainToFindPlayer()
        {
            yield return new WaitForSeconds(1);
            
            _player = GameObject.FindWithTag("Player").GetComponent<Transform>();
            
            if(_player == null)
            {
                StartCoroutine(nameof(WaitAgainToFindPlayer));
            }
        }
        
        #endregion
    }
}