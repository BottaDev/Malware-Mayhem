using System;
using UnityEngine;
using UnityEditor;

namespace MM_Editor.MM_EditorWindow
{
    public class ChangeMeshWindow : EditorWindow
    {
        #region Private Variables
        
        [SerializeField] private GameObject[] objectCount;
        private TypeOfMesh _selectMesh;
        private TypeOfCollider _selectCollider;
        private string _errorMessage = "";
        
        #endregion

        #region MonoBehaviour Functions

        [MenuItem("Malware Mayhem/Change Mesh and Collider")]
        public static void OpenWindow()
        {
            GetWindow<ChangeMeshWindow>("Change Mesh and Collider");
        }

        private void OnGUI()
        {
            minSize = new Vector2(400, 250);
            maxSize = new Vector2(400, 450);

            EditorGUILayout.BeginVertical();

            _selectMesh = (TypeOfMesh)EditorGUILayout.EnumPopup("Select the mesh", _selectMesh);

            GUILayout.Space(5);

            _selectCollider = (TypeOfCollider)EditorGUILayout.EnumPopup("Select the collider", _selectCollider);

            GUILayout.Space(10);

            SelectObjects();

            GUILayout.Space(15);

            if (GUILayout.Button("Delete Mesh"))
            {
                DeleteMesh();
            }

            EditorGUILayout.Space();

            if (GUILayout.Button("Delete Collider"))
            {
                DeleteCollider();
            }

            EditorGUILayout.Space();

            if (GUILayout.Button("Add Mesh"))
            {
                _errorMessage = "";
                SelectMesh();
            }

            EditorGUILayout.Space();

            if (GUILayout.Button("Add Collider"))
            {
                _errorMessage = "";
                SelectCollider();
            }
            
            ErrorText();

            EditorGUILayout.EndVertical();
        }

        #endregion

        #region Private Functions

        private void SelectObjects()
        {
            ScriptableObject target = this;
            var so = new SerializedObject(target);
            var objectProperty = so.FindProperty("objectCount");

            EditorGUILayout.PropertyField(objectProperty, true);
            so.ApplyModifiedProperties();
        }
        
        private void SelectMesh()
        {
            AddMesh(_selectMesh switch
            {
                TypeOfMesh.Cube => PrimitiveType.Cube,
                TypeOfMesh.Cylinder => PrimitiveType.Cylinder,
                TypeOfMesh.Plane => PrimitiveType.Plane,
                TypeOfMesh.Quad => PrimitiveType.Quad,
                TypeOfMesh.Sphere => PrimitiveType.Sphere,
                TypeOfMesh.Capsule => PrimitiveType.Capsule,
                _ => throw new ArgumentOutOfRangeException()
            });
        }
        
        private void AddMesh(PrimitiveType type)
        {
            foreach (var t in objectCount)
            {
                if (t.GetComponent<MeshFilter>() == null)
                {
                    var meshFilter = t.AddComponent<MeshFilter>();
                    var go = GameObject.CreatePrimitive(type);
                    
                    meshFilter.sharedMesh = go.GetComponent<MeshFilter>().sharedMesh;
                    
                    if (t.GetComponent<MeshRenderer>() == null)
                    {
                        meshFilter.gameObject.AddComponent<MeshRenderer>();
                    }
                    
                    DestroyImmediate(go);
                }
                else
                {
                    _errorMessage += $"{t.gameObject.name} already have a mesh \n";
                }
            }
        }
        
        private void DeleteMesh()
        {
            foreach (var t in objectCount)
            {
                var mesh = t.gameObject.GetComponent<MeshFilter>();
                DestroyImmediate(mesh);
            }
        }

        private void SelectCollider()
        {
            switch (_selectCollider)
            {
                case TypeOfCollider.Box:
                    foreach (var t in objectCount)
                    {
                        if (t.GetComponent<Collider>() == null)
                        {
                            t.gameObject.AddComponent<BoxCollider>();
                        }
                        else
                        {
                            _errorMessage += $"{t.gameObject.name} already have a collider \n";
                        }
                    }
                    break;

                case TypeOfCollider.Capsule:
                    foreach (var t in objectCount)
                    {
                        if (t.GetComponent<Collider>() == null)
                        {
                            t.gameObject.AddComponent<CapsuleCollider>();
                        }
                        else
                        {
                            _errorMessage += $"{t.gameObject.name} already have a collider \n";
                        }
                    }
                    break;

                case TypeOfCollider.Mesh:
                    foreach (var t in objectCount)
                    {
                        if (t.GetComponent<Collider>() == null)
                        {
                            t.gameObject.AddComponent<MeshCollider>();
                        }
                        else
                        {
                            _errorMessage += $"{t.gameObject.name} already have a collider \n";
                        }
                    }
                    break;

                case TypeOfCollider.Sphere:
                    foreach (var t in objectCount)
                    {
                        if (t.GetComponent<Collider>() == null)
                        {
                            t.gameObject.AddComponent<SphereCollider>();
                        }
                        else
                        {
                            _errorMessage += $"{t.gameObject.name} already have a collider \n";
                        }
                    }
                    break;

                default:
                    throw new ArgumentOutOfRangeException();
            }
        }
        
        private void DeleteCollider()
        {
            foreach (var t in objectCount)
            {
                var collider = t.gameObject.GetComponent<Collider>();
                DestroyImmediate(collider);
            }
        }
        
        private void ErrorText()
        {
            EditorGUILayout.BeginVertical();
    
            if (!string.IsNullOrEmpty(_errorMessage))
            {
                EditorGUILayout.HelpBox(_errorMessage, MessageType.Error);
            }
    
            EditorGUILayout.EndVertical();
        }
        
        #endregion
    }
}

public enum TypeOfMesh
{
    Cube,
    Capsule,
    Cylinder,
    Plane,
    Sphere,
    Quad
}

public enum TypeOfCollider
{
    Box,
    Capsule,
    Mesh,
    Sphere
}