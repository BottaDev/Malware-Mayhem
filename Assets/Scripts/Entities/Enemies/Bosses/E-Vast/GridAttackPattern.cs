using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GridAttackPattern : MonoBehaviour
{
    [Tooltip("Initial delay to start the attack")]
    [SerializeField] private float initialDelay = 3f;
    [SerializeField] private Transform spawnPos;
    //[SerializeField] private float timeBetweenBarrage = 3f;
    [SerializeField, Range(1, 20)] private int rows = 1;
    [SerializeField, Range(1, 20)] private int columns = 1;
    [SerializeField, Range(0.1f, 10f)] private float columnsDistance = 1f;
    [SerializeField] private float timeBetweenRows = 0.3f;
    [SerializeField] private GenericAttackPhase.BossBulletType projectile = GenericAttackPhase.BossBulletType.Medium;

    private void Start()
    {
        StartCoroutine(Attack());
    }

    private IEnumerator Attack()
    {
        yield return new WaitForSeconds(initialDelay);
        
        for (var r = 0; r < rows; r++)
        {
            for (var c = 0; c < columns; c++)
            {
                var position = spawnPos.position;
                position.x += c * columnsDistance;
                
                switch (projectile)
                {
                    case GenericAttackPhase.BossBulletType.Rapid:
                        var rapidBullet = EnemyPoolManager.Instance.rapidBossBulletPool.Get();
                        rapidBullet.pool = EnemyPoolManager.Instance.rapidBossBulletPool;
                        rapidBullet.transform.position = position;
                        rapidBullet.transform.eulerAngles = spawnPos.eulerAngles;
                        break;
                    case GenericAttackPhase.BossBulletType.Medium:
                        var mediumBullet = EnemyPoolManager.Instance.mediumBossBulletPool.Get();
                        mediumBullet.pool = EnemyPoolManager.Instance.mediumBossBulletPool;
                        mediumBullet.transform.position = position;
                        mediumBullet.transform.eulerAngles = spawnPos.eulerAngles;
                        break;
                    case GenericAttackPhase.BossBulletType.Slow:
                        var slowBullet = EnemyPoolManager.Instance.slowBossBulletPool.Get();
                        slowBullet.pool = EnemyPoolManager.Instance.slowBossBulletPool;
                        slowBullet.transform.position = position;
                        slowBullet.transform.eulerAngles = spawnPos.eulerAngles;
                        break;
                }
            }
            
            yield return new WaitForSeconds(timeBetweenRows);
        }
    }
}
