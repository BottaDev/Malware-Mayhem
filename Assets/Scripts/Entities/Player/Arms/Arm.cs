using UnityEngine;

public abstract class Arm : MonoBehaviour, IUpdatable
{
    [Header("General Parameters")]
    public float minAngle = -30;
    public float maxAngle = 180;
    public bool isLeft;

    [Header("Attached Auto-Aim Parameters")]
    public float autoAimArea = 1;
    public float autoAimRange = 10;
    public LayerMask enemyLayerMask;

    protected virtual void OnEnable()
    {
        UpdateManager.Instance.updates.Add(this);
    }

    private void OnDisable()
    {
        UpdateManager.Instance.updates.Remove(this);
    }

    public virtual void FalseUpdate()
    {
        Rotate();
    }

    protected virtual void Rotate() { /* Do nothing */ }

    private static float GetDistanceToLine(Vector3 aSourcePoint, Vector3 aStart, Vector3 aEnd)
    {
        var ba = aEnd - aStart;
        var va = aSourcePoint - aStart;
        var w2 = va - ((ba * Vector3.Dot(va, ba)) / ba.sqrMagnitude);
        var pointOnLine = aSourcePoint - w2;

        return (aSourcePoint - pointOnLine).magnitude;
    }
    
    protected Vector3 GetAutoAimTarget(Vector3 nextForward)
    {
        var possibleTargets = Physics.BoxCastAll(transform.position, Vector3.one * autoAimArea / 2, nextForward, Quaternion.identity, autoAimRange, enemyLayerMask);

        if (possibleTargets.Length <= 0) 
            return Vector3.zero;
        
        float closestDist = 100;
        var closest = Vector3.zero;
        foreach (var item in possibleTargets)
        {
            var position = transform.position;
            var dist = GetDistanceToLine(item.collider.transform.position, position, position + nextForward * autoAimRange);
            if (!(dist < closestDist)) 
                continue;
            
            closestDist = dist;
            closest = item.collider.transform.position;
        }
            
        return closest;
    }
    
    public virtual void MakeAction() { /* Do nothing */ }
}
