using System;
using UnityEngine;
using UnityEditor;

public class ChangeMeshWindow : EditorWindow
{
    public GameObject[] objectCount;
    private TypeOfMesh _selectMesh;
    private TypeOfCollider _selectCollider;

    [MenuItem("Malware Mayhem/Change Mesh and Collider")]
    public static void OpenWindow()
    {
        GetWindow<ChangeMeshWindow>("Change Mesh and Collider");
    }

    private void OnGUI()
    {
        minSize = new Vector2(400, 250);
        maxSize = new Vector2(400, 450);
        
        EditorGUILayout.BeginVertical();

        _selectMesh = (TypeOfMesh)EditorGUILayout.EnumPopup("Select the mesh", _selectMesh);

        GUILayout.Space(5);

        _selectCollider = (TypeOfCollider)EditorGUILayout.EnumPopup("Select the collider", _selectCollider);

        GUILayout.Space(10);

        SelectObjects();

        GUILayout.Space(15);

        if (GUILayout.Button("Delete Mesh"))
            DeleteMesh();
        
        EditorGUILayout.Space();

        if (GUILayout.Button("Delete Collider"))
            DeleteCollider();

        EditorGUILayout.Space();
        
        if (GUILayout.Button("Add Mesh"))
            SelectMesh();

        EditorGUILayout.Space();
        
        if (GUILayout.Button("Add Collider"))
            SelectCollider();
        
        EditorGUILayout.EndVertical();
    }

    private void SelectObjects()
    {
        ScriptableObject target = this;
        var so = new SerializedObject(target);
        var objectProperty = so.FindProperty("objectCount");

        EditorGUILayout.PropertyField(objectProperty, true);
        so.ApplyModifiedProperties();
    }

    private void SelectMesh()
    {
        switch (_selectMesh)
        {
            case TypeOfMesh.Cube:
                AddMesh(PrimitiveType.Cube);
                break;

            case TypeOfMesh.Cylinder:
                AddMesh(PrimitiveType.Cylinder);
                break;

            case TypeOfMesh.Plane:
                AddMesh(PrimitiveType.Plane);
                break;

            case TypeOfMesh.Quad:
                AddMesh(PrimitiveType.Quad);
                break;

            case TypeOfMesh.Sphere:
                AddMesh(PrimitiveType.Sphere);
                break;
            case TypeOfMesh.Capsule:
                break;
            
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    private void AddMesh( PrimitiveType type)
    {
        foreach (var t in objectCount)
        {
            if (t.GetComponent<MeshFilter>() == null)
            {
                var meshFilter = t.AddComponent<MeshFilter>();
                var go = GameObject.CreatePrimitive(type);
                meshFilter.sharedMesh = go.GetComponent<MeshFilter>().sharedMesh;
                if(t.GetComponent<MeshRenderer>() == null)
                    meshFilter.gameObject.AddComponent<MeshRenderer>();
                DestroyImmediate(go);
            }
            else
                Debug.LogError("Some object already have a mesh");
        }
    }

    private void DeleteMesh()
    {
        foreach (var t in objectCount)
        {
            var mesh = t.gameObject.GetComponent<MeshFilter>();
            DestroyImmediate(mesh);
        }
    }

    private void SelectCollider()
    {
        switch (_selectCollider)
        {
            case TypeOfCollider.Box:
                foreach (var t in objectCount)
                {
                    if (t.GetComponent<Collider>() == null)
                        t.gameObject.AddComponent<BoxCollider>();
                    else
                        Debug.LogError("Some Object already have a Collider");
                }
                break;

            case TypeOfCollider.Capsule:
                foreach (var t in objectCount)
                {
                    if (t.GetComponent<Collider>() == null)
                        t.gameObject.AddComponent<CapsuleCollider>();
                    else
                        Debug.LogError("Some Object already have a Collider");
                }
                break;

            case TypeOfCollider.Mesh:
                foreach (var t in objectCount)
                {
                    if (t.GetComponent<Collider>() == null)
                        t.gameObject.AddComponent<MeshCollider>();
                    else
                        Debug.LogError("Some Object already have a Collider");
                }
                break;

            case TypeOfCollider.Sphere:
                foreach (var t in objectCount)
                {
                    if (t.GetComponent<Collider>() == null)
                        t.gameObject.AddComponent<SphereCollider>();
                    else
                        Debug.LogError("Some Object already have a Collider");
                }
                break;
            
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    private void DeleteCollider()
    {
        foreach (var t in objectCount)
        {
            var collider = t.gameObject.GetComponent<Collider>();
            DestroyImmediate(collider);
        }
    }
}

public enum TypeOfMesh
{
    Cube,
    Capsule,
    Cylinder,
    Plane,
    Sphere,
    Quad
}

public enum TypeOfCollider
{
    Box,
    Capsule,
    Mesh,
    Sphere
}