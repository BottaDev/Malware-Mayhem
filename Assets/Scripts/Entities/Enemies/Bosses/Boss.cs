using System.Linq;
using UnityEngine;

public class Boss : Entity
{
    [Header("Boss Parameters")] 
    [SerializeField] private GameObject model;

    private GenericAttackPhase _pattern;
    private SubmoduleAttackRandomizer _randomizer;
    private PlayerModel _player;
    private Rigidbody _rb;
    
    protected override void Awake()
    {
        _currentHp = hp;
        
        allRenderers = new Renderer[1];
        baseMats = new Material[1];
        
        if(model != null)
        {
            allRenderers[0] = model.GetComponent<Renderer>();
            baseMats[0] = new Material(allRenderers[0].material);   
        }

        damagedMat = new Material(Shader.Find("Unlit/Color"))
        {
            color = Color.white
        };
        
        _pattern = GetComponent<GenericAttackPhase>();
        _randomizer = GetComponent<SubmoduleAttackRandomizer>();
        _rb = GetComponent<Rigidbody>();
    }

    protected virtual void Start()
    {
        UIManager.Instance.SetBossHealthVisibility(true);
        UIManager.Instance.SetMaxHealth(hp, false);
    }

    /// <summary>
    /// Check if the player exists in the level
    /// </summary>
    /// <returns></returns>
    private bool CheckPlayer()
    {
        if (_player == null)
            _player = LevelManager.Instance.GetPlayer();

        return _player == null;
    }
    
    public void LateUpdate()
    {
        if (CheckPlayer() || model == null) 
            return;
        
        var newRotation = Quaternion.LookRotation(_player.transform.position - transform.position);
        var currentRotation = model.transform.rotation;
        
        currentRotation = Quaternion.Slerp(currentRotation, newRotation, Time.deltaTime * rotationSpeed);
        currentRotation = new Quaternion(0, currentRotation.y, 0, currentRotation.w);
        model.transform.rotation = currentRotation;
    }

    public override void TakeDamage(float damage, PlayerArm.ArmType aType = PlayerArm.ArmType.None, bool showDamage = true)
    {
        _currentHp -= damage;
        
        if (showDamage)
            StartCoroutine(ShowDamage());
        
        UIManager.Instance.SetHealthBarValue(_currentHp, true, false);
        
        if (_currentHp <= 0)
        {
            KillEntity();
            LevelManager.Instance.WinLevel();
        }

        // Make damage in evey module
        var subModules = _randomizer.GetSubModules();
        subModules.Where(subModule => subModule != null).ToList().ForEach(subModule => subModule.TakeDamage(damage, aType, showDamage));
        
        _randomizer.CheckPhaseHp(_currentHp);
    }

    /// <summary>
    /// Change the current phase when a module is destroyed
    /// </summary>
    public void ChangePatternPhase()
    {
        _pattern.ChangePhase();
    }
    
    private void OnCollisionExit(Collision other)
    {
        // Enemy, Player
        if (_rb != null && other.gameObject.layer is 8 or 9)
            _rb.velocity = Vector3.zero;
    }
}