using System;
using MM.Bullets;
using MM.Common;
using MM.Entities.Player;
using MM.Events;
using UnityEngine;
using Random = UnityEngine.Random;

namespace MM.Entities.Enemies.Bosses.Iset.SubModuleBosses
{
    public class Hooks : MonoBehaviour
    {
        #region Private Variables

        [SerializeField] private GameObject model;
        [SerializeField] private Transform spawnPoint;
        [SerializeField] private BossBulletType bulletType;
        [SerializeField] private float minSpawnRate = 1f;
        [SerializeField] private float maxSpawnRate = 2f;

        private Transform _playerTransform;
        private float _spawnRate;

        #endregion

        #region Monobehaviour Functions

        private void Awake()
        {
            ChooseSpawnRate();

            EventManager.Instance.Subscribe(NameEvent.OnPlayerSpawned, OnPlayerSpawned);
        }

        private void Update()
        {
            if (_playerTransform == null) { return; }

            if (_spawnRate > 0)
            {
                _spawnRate -= Time.deltaTime;
            }
            else
            {
                Shoot();
            }
        }

        #endregion

        #region Private Functions

        private void Shoot()
        {
            var rotation = Quaternion.LookRotation(_playerTransform.position - model.transform.position);
            rotation = new Quaternion(rotation.x, rotation.y, 0, rotation.w);
            model.transform.rotation = rotation;
            
            Bullet bullet;

            switch (bulletType)
            {
                case BossBulletType.RapidGreen:
                    bullet = EnemyPoolManager.Instance.rapidGreenBossBulletPool.Get();
                    bullet.pool = EnemyPoolManager.Instance.rapidGreenBossBulletPool;
                    break;
                case BossBulletType.MediumGreen:
                    bullet = EnemyPoolManager.Instance.mediumGreenBossBulletPool.Get();
                    bullet.pool = EnemyPoolManager.Instance.mediumGreenBossBulletPool;
                    break;
                case BossBulletType.SlowGreen:
                    bullet = EnemyPoolManager.Instance.slowGreenBossBulletPool.Get();
                    bullet.pool = EnemyPoolManager.Instance.slowGreenBossBulletPool;
                    break;

                case BossBulletType.RapidRed:
                    bullet = EnemyPoolManager.Instance.rapidRedBossBulletPool.Get();
                    bullet.pool = EnemyPoolManager.Instance.rapidRedBossBulletPool;
                    break;
                case BossBulletType.MediumRed:
                    bullet = EnemyPoolManager.Instance.mediumRedBossBulletPool.Get();
                    bullet.pool = EnemyPoolManager.Instance.mediumRedBossBulletPool;
                    break;
                case BossBulletType.SlowRed:
                    bullet = EnemyPoolManager.Instance.slowRedBossBulletPool.Get();
                    bullet.pool = EnemyPoolManager.Instance.slowRedBossBulletPool;
                    break;

                case BossBulletType.RapidBlue:
                    bullet = EnemyPoolManager.Instance.rapidBlueBossBulletPool.Get();
                    bullet.pool = EnemyPoolManager.Instance.rapidBlueBossBulletPool;
                    break;
                case BossBulletType.MediumBlue:
                    bullet = EnemyPoolManager.Instance.mediumBlueBossBulletPool.Get();
                    bullet.pool = EnemyPoolManager.Instance.mediumBlueBossBulletPool;
                    break;
                case BossBulletType.SlowBlue:
                    bullet = EnemyPoolManager.Instance.slowBlueBossBulletPool.Get();
                    bullet.pool = EnemyPoolManager.Instance.slowBlueBossBulletPool;
                    break;

                case BossBulletType.RapidOrange:
                    bullet = EnemyPoolManager.Instance.rapidOrangeBossBulletPool.Get();
                    bullet.pool = EnemyPoolManager.Instance.rapidOrangeBossBulletPool;
                    break;
                case BossBulletType.MediumOrange:
                    bullet = EnemyPoolManager.Instance.mediumOrangeBossBulletPool.Get();
                    bullet.pool = EnemyPoolManager.Instance.mediumOrangeBossBulletPool;
                    break;
                case BossBulletType.SlowOrange:
                    bullet = EnemyPoolManager.Instance.slowOrangeBossBulletPool.Get();
                    bullet.pool = EnemyPoolManager.Instance.slowOrangeBossBulletPool;
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }

            var bulletTransform = bullet.transform;
            bulletTransform.position = spawnPoint.position;
            bulletTransform.rotation = rotation;

            ChooseSpawnRate();
        }

        private void ChooseSpawnRate()
        {
            _spawnRate = Random.Range(minSpawnRate, maxSpawnRate);
        }

        #endregion

        #region Event Functions

        private void OnPlayerSpawned(params object[] parameters)
        {
            var player = (PlayerModel)parameters[1];
            _playerTransform = player.transform;
        }

        #endregion
    }
}