using System;
using System.Collections;
using MM.Bullets;
using MM.Common;
using UnityEngine;
using UnityEngine.AI;

namespace MM.Entities.Enemies.Bosses.Iset.SubModuleBosses
{
    public class GunSubBoss : SubBoss
    {
        #region Private Variables
        
        [SerializeField] private float attackDistance;
        [SerializeField] private Transform shotSpawn;
        [SerializeField] private float idealDistance;
        
        [Header("Tri-Shot Parameters")]
        [SerializeField] private int triTotalBullets;
        [SerializeField] private float timeBetweenShot = 5;
        [SerializeField] private float triAttackPush;
        [SerializeField] private float timeBeforeTriShot;
        [SerializeField] private BossBulletType triShotBulletType;
        
        [Header("Forward Shot Parameters")]
        [SerializeField] private float forwardAttackPush;
        [SerializeField] private float timeBeforeForwardShot;
        [SerializeField] private BossBulletType forwardShotBulletType;

        private bool _canAttack;
        private bool _isAttacking;
        private bool _isTriShot;
        private float _distanceToPlayer;
        private float _currentFireRate;
        private FOV _fov;
        private NavMeshAgent _agent;
        private Rigidbody _rigidbody;
        private Vector3 _moveDirection;

        #endregion

        #region MonoBehaviour Functions

        protected override void Awake()
        {
            base.Awake();
            
            _rigidbody = GetComponent<Rigidbody>();
        }

        private void Update()
        {
            Move();
            
            switch (_canAttack)
            {
                case true:
                    ChooseAttack();
                    break;
                case false when !_isAttacking:
                {
                    _currentFireRate -= Time.deltaTime;
                    if (_currentFireRate <= 0)
                    {
                        _canAttack = true;
                    }

                    break;
                }
            }
        }

        #endregion

        #region Private Functions

        /// <summary>
        /// Choose between tri-shot or forward shot and set the current fire rate.
        /// </summary>
        private void ChooseAttack()
        {
            if (_isTriShot)
            {
                StartCoroutine(nameof(MakeTriShot));
                _currentFireRate = timeBeforeForwardShot;
            }
            else
            {
                MakeForwardShot();
                _currentFireRate = timeBeforeTriShot;
            }
        }
        
        private IEnumerator MakeTriShot()
        {
            _canAttack = false;
            _isAttacking = true;

            for (var i = 0; i < triTotalBullets; i++)
            {
                var position = shotSpawn.position;
                
                var bullet = EnemyPoolManager.Instance.GetBossBullet(triShotBulletType);
                
                
                var bulletTransform = bullet.transform;
                
                bulletTransform.position = position;
                bulletTransform.eulerAngles = _player.transform.position;
                
                _rigidbody.AddForce(-transform.forward * triAttackPush, ForceMode.Impulse);

                yield return new WaitForSeconds(timeBetweenShot);
            }
            
            _moveDirection = CalculateNextDirection();
            _isAttacking = false;
        }

        private void MakeForwardShot()
        {
            _canAttack = false;
            _isAttacking = true;
            
            var position = shotSpawn.position;
            
            var bullet = EnemyPoolManager.Instance.GetBossBullet(forwardShotBulletType);
            
            var bulletTransform = bullet.transform;
            bulletTransform.position = position;
            bulletTransform.eulerAngles = _player.transform.position;
            
            _rigidbody.AddForce(-transform.forward * forwardAttackPush, ForceMode.Impulse);

            _isAttacking = false;
        }
        
        private void Move()
        {
            if (_distanceToPlayer >= attackDistance || _fov.CheckMiddleObstacle(_player.transform.position))
            {
                MoveToPosition(_player.transform.position);
            }
            else
            {
                MoveToPosition(transform.position + _moveDirection);
            }

            RotateTowards(transform.position + _moveDirection);
        }

        private void MoveToPosition(Vector3 position)
        {
            if (_agent.destination == Vector3.positiveInfinity) { return; }

            _agent.destination = position;
        }
        
        private void RotateTowards (Vector3 target) 
        {
            var direction = (target - transform.position).normalized;
            var lookRotation = Quaternion.LookRotation(new Vector3(direction.x, 0, direction.z));
            transform.rotation = Quaternion.Slerp(transform.rotation, lookRotation, Time.deltaTime * rotationSpeed);
        }
        
        private Vector3 CalculateNextDirection()
        {
            var newPos = transform.position;
        
            if (_player != null)
            {
                newPos = _player.transform.position;
            }
        
            if (_agent.enabled)
            {
                _agent.isStopped = false;
            }
        
            var nextDir = (_distanceToPlayer >= idealDistance ? newPos - transform.position : 
                                                                       transform.position - newPos).normalized;

            return nextDir;
        }

        #endregion
    }
}