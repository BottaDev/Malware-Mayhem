using System.Collections;
using MM.Entities.Player.Arms;
using MM.Bullets;
using MM.Others;
using MM.Sound;
using UnityEngine;

namespace MM.Entities.Enemies.Bosses.Notron.SubmoduleBosses
{
    public class LaserGenerator : SubBoss
    {
        #region Private Variables
        [SerializeField] private float laserInitialDelay;
        [SerializeField] private float delayBetweenLasers;
        [SerializeField] private GameObject[] lasers;
        [SerializeField] private GameObject shield;
        private bool _laserActives;
        private ObjectRotator _objectRotator;
        private NotronManager _notronManager;
        #endregion

        #region MonoBehaviour Functions
        protected override void Start()
        {
            _objectRotator = GetComponent<ObjectRotator>();
            _notronManager = GetComponentInParent<NotronManager>();
        }

        private void Update()
        {
            if(!_laserActives)
            {
                if (laserInitialDelay >= 0)
                    laserInitialDelay -= Time.deltaTime;
                else
                    StartCoroutine(SpawnLasers());
            }
        }

        protected override void LateUpdate() { /* Cancel Rotation */ }
        #endregion

        #region Private Variables
        private IEnumerator SpawnLasers()
        {
            foreach (var t in lasers)
            {
                t.SetActive(true);
                var laser = t.GetComponent<PersistentLaserBeam>();
                laser.SetParams(float.MaxValue, submoduleIndex);
                yield return new WaitForSeconds(delayBetweenLasers);
            }
        
            _laserActives = true;
            _objectRotator.enabled = true;
        }
        #endregion
        
        #region Public Functions
        public void SetShield(bool value)
        {
            shield.SetActive(value);
        }

        public override void TakeDamage(float damage, PlayerArm.ArmType aType = PlayerArm.ArmType.None, bool showDamage = true)
        {
            _currentHp -= damage;
        
            if (showDamage)
                StartCoroutine(ShowDamage());
        
            AudioManager.Instance.PlayAudioClip(Sounds.SoundType.EnemyDamaged, transform.position);
        
            if (_currentHp <= 0)
            {
                _notronManager.LaserDestroyed(submoduleIndex);
                Destroy(gameObject);
            }
        }
        #endregion
    }
}