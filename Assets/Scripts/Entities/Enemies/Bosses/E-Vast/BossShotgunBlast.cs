using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BossShotgunBlast : SubmoduleAttack
{
    [Header("Pattern Parameters")]
    [SerializeField] private string patternName;
    [SerializeField] private float initialDelay;
    [Header("Projectile Parameters")]
    [SerializeField] private float fireRate = 1f;
    [SerializeField] private BulletRound[] bulletRounds;

    private BossArm _arm;

    [Serializable]
    private class BulletRound
    {
        public GenericAttackPhase.BossBulletType projectile = GenericAttackPhase.BossBulletType.MediumOrange;
        public float angle = 20f;
    }
    
    protected override void Start()
    {
        base.Start();
        _arm = GetComponent<BossArm>();
    }
    
    public override void MakeAction()
    {
        base.MakeAction();
        _arm.SetLookAtPlayer(true);
        Invoke(nameof(StartShooting), initialDelay);
    }

    private void StartShooting()
    {
        if (this == null || 
            !gameObject.activeInHierarchy) 
            return;
        
        StartCoroutine(Shoot());
    }
    
    private IEnumerator Shoot()
    {
        const int numberOfProjectiles = 3;
        var shotSpawn = _arm.GetShotSpawn();
        
        foreach (var round in bulletRounds)
        {
            for (var i = 0; i < numberOfProjectiles; i++)
            {
                if (_submodule.GetIsStunned())
                {
                    _arm.SetLookAtPlayer(false);
                    yield return null;
                }
                
                var rotation = Quaternion.AngleAxis((i - 1) * round.angle, Vector3.up);

                var transform1 = transform;
                var direction = rotation * transform1.forward;
                var position = shotSpawn.position + direction;

                // Fix the Y of the spawn
                const float yAxis = 1f;
            
                position = new Vector3(position.x, yAxis, position.z);
                var rot = rotation * transform1.rotation;
                
                var bullet = EnemyPoolManager.Instance.GetBossBullet(round.projectile);
                bullet.transform.position = position;
                bullet.transform.rotation = rot;
                
                AudioManager.Instance.PlayAudioClip(Sounds.SoundType.BossShot, position);
            }
            
            yield return new WaitForSeconds(fireRate);
        }
        
        _arm.SetLookAtPlayer(false);
    }
}
