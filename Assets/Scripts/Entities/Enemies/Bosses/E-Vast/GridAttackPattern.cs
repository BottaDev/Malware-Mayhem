using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GridAttackPattern : MonoBehaviour
{
    [Tooltip("Initial delay to start the attack")]
    [SerializeField] private float initialDelay = 3f;
    [SerializeField] private GridPattern[] bossPatterns;
    
    private int _currentPattern = 0;
    
    [Serializable]
    public class GridPattern
    {
        public string name;
        public Transform spawnPos;
        [Range(1, 20)] public int rows = 1;
        [Range(1, 20)] public int columns = 1;
        [Range(0.1f, 3f)] public float columnsDistance = 1f;
        public float timeBetweenRows = 0.3f;
        public GenericAttackPhase.BossBulletType projectile = GenericAttackPhase.BossBulletType.MediumOrange;
        [Tooltip("The time that must pass to execute the following pattern")]
        public float waitTime = 1f; 
    }
    
    private void Start()
    {
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnReturnedBoss, OnReturnedBoss);
        
        Invoke(nameof(StartAttack), initialDelay);
    }

    private void StartAttack()
    {
        StartCoroutine(Attack());
    }
    
    private IEnumerator Attack()
    {
        do
        {
            for (var r = 0; r < bossPatterns[_currentPattern].rows; r++)
            {
                for (var c = 0; c < bossPatterns[_currentPattern].columns; c++)
                {
                    // Spawn projectiles at position taking in consideration the distance between columns and the number of columns.
                    // If the number of columns is odd, the first projectile will be spawned at the center of the grid.
                    var position = bossPatterns[_currentPattern].spawnPos.position;
                    position.x += (c - (bossPatterns[_currentPattern].columns - 1) / 2f) * bossPatterns[_currentPattern].columnsDistance;
    
                    var bullet = EnemyPoolManager.Instance.GetBossBullet(bossPatterns[_currentPattern].projectile);
                    bullet.transform.position = position;
                    bullet.transform.eulerAngles = bossPatterns[_currentPattern].spawnPos.eulerAngles;
                }
            
                yield return new WaitForSeconds(bossPatterns[_currentPattern].timeBetweenRows);
            }
            
            yield return new WaitForSeconds(bossPatterns[_currentPattern].waitTime);
            
            CheckPattern();
            
        } while (true);
    }

    private void CheckPattern()
    {
        _currentPattern++;
        if (_currentPattern >= bossPatterns.Length)
            _currentPattern = 0;
    }
    
    private void OnReturnedBoss(params object[] parameters)
    {
        if (this != null)
            StopCoroutine(Attack());
    }
}
