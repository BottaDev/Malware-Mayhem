using MM.Events;
using UnityEngine;
using Random = UnityEngine.Random;

namespace MM.Entities.Enemies.Bosses.Iset.SubModuleBosses
{
    public class HookSubBoss : SubBoss
    {
        #region Private Variables

        [SerializeField] private float timeBetweenAttacks = 1f;
        [SerializeField] private HookAttack[] hookAttacks;
        
        private float _currentTimer;
        private bool _isAttacking;
        private bool _isPlayerSpawned;

        #endregion

        #region Monbehaviour Functions

        protected override void Awake()
        {
            base.Awake();
            
            EventManager.Instance.Subscribe(NameEvent.OnPlayerSpawned, OnPlayerSpawned);
        }

        protected override void Start()
        {
            _currentTimer = timeBetweenAttacks;
        }

        private void Update()
        {
            if(_isAttacking ||
               !_isPlayerSpawned) { return; }
            
            if (_currentTimer > 0)
            {
                _currentTimer -= Time.deltaTime;
            }
            else
            {
                ChooseAttack();
            }
        }

        #endregion

        #region Public Functions

        public void ResetTimer()
        {
            _currentTimer = timeBetweenAttacks;
            _isAttacking = false;
        }

        #endregion

        #region Private Functions

        private void ChooseAttack()
        {
            _isAttacking = true;
            var attackValue = Random.Range(0, hookAttacks.Length);
            hookAttacks[attackValue].Shot();
        }

        #endregion

        #region Event Functions

        private void OnPlayerSpawned(params object[] parameters)
        {
            _isPlayerSpawned = true;
        }

        #endregion
    }
}