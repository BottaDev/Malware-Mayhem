using System;
using UnityEngine;

public class PersistentLaserBeam : LaserBeam
{
    [SerializeField] private float duration = 5f;
    [Tooltip("Time between each damage")]
    [SerializeField] private float damageTime = 0.3f;

    private float _currentDamageTime = 0f;
    private bool _canDamage;
    private int _submoduleIndex;
    
    protected override void Start()
    {
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnStunnedSubmodule, OnSubmoduleStunned);
        
        Destroy(gameObject, duration);
    }

    public override void Update()
    {
        if (_currentDamageTime <= 0)
        {
            _canDamage = true;   
        }
        else
        {
            _canDamage = false;
            _currentDamageTime -= Time.deltaTime;   
        }

        var dist = range; 
        var hits = RaycastEntities();

        if (hits.Length > 0 && hits[^1].collider.gameObject.layer is 7 or 15 or 16 or 19)
            dist = (hits[^1].point - transform.position).magnitude;

        Resize(dist);
        Rotate();
    }

    protected virtual RaycastHit[] RaycastEntities()
    {
        var transform1 = transform;
        var hits = Physics.RaycastAll(transform1.position, transform1.forward, range);

        System.Array.Sort(hits, (x, y) => x.distance.CompareTo(y.distance));

        for (var i = 0; i < hits.Length; i++)
        {
            if (bulletData.destroyMask == (bulletData.destroyMask | (1 << hits[i].collider.gameObject.layer))) 
            {
                Instantiate(bulletData.deathParticles, hits[i].point, Quaternion.LookRotation(-transform.forward, Vector3.up));

                switch (hits[i].collider.gameObject.layer)
                {
                    // Wall, Enemy Shield, Player Shield, Player Shield No Wall
                    case 7 or 15 or 16 or 19:
                        System.Array.Resize(ref hits, i + 1);
                        return hits;
                    
                    // Enemy, Player
                    case 8 or 9:
                        var entity = hits[i].collider.GetComponent<Entity>();

                        if (entity != null && _canDamage)
                        {
                            MakeDamage(entity);
                            _currentDamageTime = damageTime;
                        }
                        break;
                    
                    // Submodule
                    case 6:
                        if (_canDamage)
                        {
                            MakeDamage(hits[i].collider.GetComponent<BossSubmodule>());
                            _currentDamageTime = damageTime;
                        }
                        break;
                }
            }
        }

        return hits;
    }

    private void Resize(float dist)
    {
        transform.localScale = new Vector3(transform.localScale.x, transform.localScale.y, dist);
    }
    
    private void Rotate()
    {
        const float rotationSpeed = 100f;
        transform.Rotate(0, 0, rotationSpeed * Time.deltaTime);
    }

    public void SetParams(float dur, int submoduleIndex)
    {
        duration = dur;
        _submoduleIndex = submoduleIndex;
    }

    private void OnDestroy()
    {
        // It's necessary to unsubscribe from the event when destroying the object
        EventManager.Instance.Unsubscribe(EventManager.NameEvent.OnStunnedSubmodule, OnSubmoduleStunned);
    }

    /// <summary>
    /// Destroy the laser beam when the submodule is stunned
    /// </summary>
    /// <param name="parameters"></param>
    private void OnSubmoduleStunned(params object[] parameters)
    {
        if (parameters[0] is int index && index == _submoduleIndex)
            Destroy(gameObject);
    }
}
