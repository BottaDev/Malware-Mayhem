using System;
using EZCameraShake;
using UnityEngine;

public class PlayerArm : Arm
{
    [Header("PlayerArm Parameters")]
    public float fireRate;
    public Transform shotSpawn;
    [Tooltip("The percentage that the arm will lose")]
    [Range(min: 0, max: 100)] public float percentageLoss = 10f;
    public ArmType armType = ArmType.BasicArm;

    [Space,Header("Camera Shake")] 
    [Tooltip("The intensity of the shake.")]
    [SerializeField, Range(1f,10f)] protected float magnitude;
    [Tooltip("How rough the shake is. Lower values are slow and smooth, higher values are fast and jarring")]
    [SerializeField, Range(1f,20f)] protected float roughness;
    [Tooltip("The time, in seconds, for the shake to fade in")]
    [SerializeField, Range(0f,10f)] protected float fadeIn;
    [Tooltip("The time, in seconds, for the shake to fade out")]
    [SerializeField, Range(0f,10f)] protected float fadeOut;
    [SerializeField] private PlayerModel _model;
    [SerializeField] protected PlayerController _controller;
    
    protected CameraShaker _cameraShaker;
    private const float _totalEnergy = 100f;
    private float _currentEnergy;
    protected float _currentFireRate;

    private void Awake()
    {
        _currentEnergy = _totalEnergy;
    }

    private void Start()
    {
        _cameraShaker = Camera.main.GetComponent<CameraShaker>();
    }

    public override void MakeAction()
    {
        if (_currentFireRate <= 0)
            Shoot();
    }
    
    public override void Update()
    {
        base.Update();
        _currentFireRate -= Time.deltaTime;
    }

    protected void SubtractEnergy()
    {
        _currentEnergy -= percentageLoss;
        
        UIManager.Instance.SetArmEnergy(isLeft, _currentEnergy);
    }
    
    protected override void Rotate()
    {
        var point = InputManager.Instance.mousePosition;
        
        var angle = Vector3.SignedAngle(point - transform.position, _model.torso.transform.forward, Vector3.up); 
        angle *= isLeft ? 1 : -1;

        if (!(angle >= minAngle) || !(angle <= maxAngle)) 
            return;
        
        var pivotTransform = _model.torso.transform.position;

        var p = transform.position;
        var nextForward = new Vector3(point.x, p.y, point.z) - 
                          new Vector3(p.x, p.y, p.z);
        
        var aimTarget = GetAutoAimTarget(nextForward);
        if (aimTarget != Vector3.zero)
        {
            pivotTransform = transform.position;
            point = aimTarget;
        }

        var transform1 = transform;
        var position1 = transform1.position;
        transform.forward = new Vector3(point.x, position1.y, point.z) - 
                             new Vector3(pivotTransform.x, position1.y, pivotTransform.z);
    }
    
    /// <summary>
    /// Sets the energy of the arm to the total energy
    /// </summary>
    public void ResetEnergy()
    {
        _currentEnergy = _totalEnergy;
    }
    
    public float GetDuration()
    {
        return _currentEnergy;
    }
    
    private void Shoot()
    {
        if (this == null &&
            !gameObject.activeInHierarchy && 
            _controller == null)
            return;

        var bullet = _controller.bulletPool.Get();
        
        if (bullet == null)
            return;
        
        bullet.pool = _controller.bulletPool;
        bullet.transform.position = shotSpawn.position;
        bullet.transform.eulerAngles = transform.eulerAngles;

        SubtractEnergy();
        
        _cameraShaker.ShakeOnce(magnitude, roughness, fadeIn, fadeOut);
        
        AudioManager.Instance.Play("BasicShot");

        _currentFireRate = fireRate;
    }

    /// <summary>
    /// Set the current energy value of the arm when the player
    /// return to the main boss fight
    /// </summary>
    public void ForceUIBarValue()
    {
        UIManager.Instance.SetArmEnergy(isLeft, _currentEnergy);
    }
    
    private void OnDrawGizmos()
    {
        var transform1 = transform;
        var position = transform1.position;
        var forward = transform1.forward;
        
        Gizmos.color = Color.green;
        
        Gizmos.DrawRay(position + transform1.right * autoAimArea/2,  forward * autoAimRange);
        Gizmos.DrawRay(position + transform.right * -autoAimArea/2, forward * autoAimRange);
    }
    
    public enum ArmType
    {
        None,
        BasicArm,
        LaserArm,
        BurstArm,
        ShieldArm,
        BladeArm
    }
}
