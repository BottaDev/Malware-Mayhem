using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using UnityEngine;

public class TEnemy : MonoBehaviour
{
    public float movementSpeed;
    public float rotateSpeed;
    public Transform[] wayPoints;
    public float stopDistance = 1;
    
    [Header("Shooting Parameters")]
    public bool canShoot;
    public float fireRate = 0.8f;
    public GameObject shotPrefab;
    public Transform spawnPos;

    private float _currentFireRate;
    private GameObject _player;
    private int _currentWayPoint;
    private MeshRenderer _meshRenderer;
    private Material _defaultMaterial;
    private Material _damagedMaterial;

    private void Awake()
    {
        _meshRenderer = transform.GetComponent<MeshRenderer>();
        _damagedMaterial = new Material(Shader.Find("Unlit/Color"));
        _damagedMaterial.color = Color.white;
        _defaultMaterial = _meshRenderer.material;
        
        _currentFireRate = fireRate;
    }

    private void Start()
    {
        _player = GameObject.Find("Player");
    }

    private void Update()
    {
        Move();
        Rotate();
        
        if (canShoot &&_currentFireRate <= 0)
            Shoot();
        else
            _currentFireRate -= Time.deltaTime;
    }

    private void Shoot()
    {
        Instantiate(shotPrefab, spawnPos.position, spawnPos.rotation);

        _currentFireRate = fireRate;
    }
    
    private void Rotate()
    {
        Vector3 targetDelta = new Vector3(_player.transform.position.x, transform.position.y, _player.transform.position.z) - transform.position;
        float angleToTarget = Vector3.Angle(transform.forward, targetDelta);
        Vector3 turnAxis = Vector3.Cross(transform.forward, targetDelta);
 
        transform.RotateAround(transform.position, turnAxis, Time.deltaTime * rotateSpeed * angleToTarget);
    }
    
    private void Move()
    {
        if (wayPoints.Length <= 0)
            return;

        if (Vector3.Distance(wayPoints[_currentWayPoint].position, transform.position) < stopDistance)
        {
            _currentWayPoint++;
            if (_currentWayPoint > wayPoints.Length - 1)
                _currentWayPoint = 0;
        }

        transform.position = Vector3.MoveTowards(transform.position, wayPoints[_currentWayPoint].position, movementSpeed * Time.deltaTime);
    }

    private void OnTriggerEnter(Collider other)
    {
        if (other.gameObject.layer == 10)
            StartCoroutine(Blink());
    }

    // Change the color to RED when damaged
    private IEnumerator Blink()
    {
        _meshRenderer.material = _damagedMaterial;
        yield return new WaitForSeconds(0.1f);
        _meshRenderer.material = _defaultMaterial;

        yield return null;
    }
}
