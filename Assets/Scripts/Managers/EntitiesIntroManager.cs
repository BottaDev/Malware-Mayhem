using MM.Common;
using MM.Events;
using MM.Entities.Player;
using UnityEngine;

namespace MM.Gameplay
{
    public class EntitiesIntroManager : MonoBehaviourSingleton<EntitiesIntroManager>
    {
        #region Private Variables

        [SerializeField] private PlayerModel player;
        [SerializeField] private Transform playerSpawn;
        [SerializeField] private Transform bossSpawn;
        [SerializeField] private bool isTutorial;
        
        private Animator _animator;
        
        private static readonly int CanPlay = Animator.StringToHash("CanPlay");
        
        #endregion

        #region Properties
        
        public Transform PlayerSpawn => playerSpawn;
        public Transform BossSpawn => bossSpawn;
        public PlayerModel Player => player;
        public bool IsTutorial => isTutorial;

        #endregion
        
        #region Monobehaviour Functions

        protected override void Awake()
        {
            base.Awake();
            
            _animator = GetComponent<Animator>();
            
            PlayAnimation();
        }

        #endregion

        #region Private Functions

        private void PlayAnimation()
        {
            _animator.SetBool(CanPlay, true);
        }

        #endregion

        #region Public Functions
        
        /// <summary>
        /// Called from the animation event when it finishes to instantiate the player and
        /// delete the static models
        /// </summary>
        public void AnimationFinished()
        {
            _animator.SetBool(CanPlay, false);
            
            EventManager.Instance.Trigger(NameEvent.OnInitAnimationFinished);
        }
        
        /// <summary>
        /// Destroy the static models that are used for the intro
        /// </summary>
        public void DestroyStaticModels()
        {
            Destroy(playerSpawn.gameObject);
            
            if(!isTutorial)
            {
                Destroy(bossSpawn.gameObject);
            }
        }

        #endregion
    }
}