using System.Collections;
using MM.Sound;
using UnityEngine;

namespace MM.Entities.Enemies
{
    public class Blader : Enemy
    {
        #region Private Variables
        [Header("Blader Parameters")]
        [SerializeField] private float attackDistance;

        [SerializeField] private float attackDuration;
        [SerializeField] private float fireRate;
        [SerializeField] private GameObject coneObject;

        private float _currentFireRate;
        private bool _isAttacking = false;
        private Vector3 _moveDirection;
        private Animator _animator;
        private static readonly int IsAttacking = Animator.StringToHash("IsAttacking");

        #endregion
        
        #region MonoBehaviour Functions
        
        protected override void Awake()
        {
            base.Awake();
            coneObject.SetActive(false);
            _animator = GetComponent<Animator>();
        }
        
        private void OnDrawGizmosSelected()
        {
            Gizmos.color = Color.red;
            Gizmos.DrawWireSphere(transform.position, attackDistance);
        }
        
        #endregion

        #region Private Functions

        protected override void MakeActions()
        {
            if (_distanceToPlayer <= attackDistance)
            {
                _agent.enabled = false;
                _isAttacking = true;
            }
            else if(_distanceToPlayer > attackDistance && !_isAttacking)
            {
                _agent.enabled = true;
            }
        
            if (_isAttacking)
            {
                if (_currentFireRate > fireRate)
                    Attack();
                else
                    _currentFireRate += Time.deltaTime;
            }
        
            RotateTowards(_player.transform.position);
        
            if(isStunned)
                coneObject.SetActive(false);
        }

        protected override void Move()
        {
            if (_isAttacking) return;

            if (_distanceToPlayer >= attackDistance || _fov.CheckMiddleObstacle(_player.transform.position))
            {
                if(_agent.enabled)
                    MoveToPosition(_player.transform.position);
            }
            else
            {
                if(_agent.enabled)
                    MoveToPosition(_moveDirection);
            }

            RotateTowards(_moveDirection);
        }

        protected override void RecoverFromStun()
        {
            base.RecoverFromStun();
            StopCoroutine("MakeAttack");
            _isAttacking = false;
        }

        private void Attack()
        {
            AudioManager.Instance.PlayAudioClip(Sounds.SoundType.BladerAttack, transform.position);
            StartCoroutine(MakeAttack());
        }

        private IEnumerator MakeAttack()
        {
            _animator.SetBool(IsAttacking, true);
            coneObject.SetActive(true);
        
            yield return new WaitForSeconds(attackDuration);
        
            _animator.SetBool(IsAttacking, false);
            coneObject.SetActive(false);
            _isAttacking = false;
            _currentFireRate = 0;
        }
        
        #endregion
    }
}