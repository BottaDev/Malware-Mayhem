
using System;
using System.Collections;
using UnityEngine;
using MM.Common;

public class SubBossShotgunAttack : MonoBehaviour
{
    [Header("Pattern Parameters")]
    [SerializeField] private float initialDelay;
    [Header("Projectile Parameters")]
    [SerializeField] private float fireRate = 1f;
    [SerializeField] private BulletRound[] bulletRounds;

    private IndividualShotgunArm _arm;

    [Serializable]
    private class BulletRound
    {
        public BossBulletType projectile = BossBulletType.MediumOrange;
        public float angle = 20f;
    }
    
    private void Start()
    {
        _arm = GetComponent<IndividualShotgunArm>();
        
        Invoke(nameof(StartShooting), initialDelay);
    }

    private void StartShooting()
    {
        if (this == null || 
            !gameObject.activeInHierarchy) 
            return;
        
        StartCoroutine(Shoot());
    }
    
    private IEnumerator Shoot()
    {
        const int numberOfProjectiles = 3;
        var shotSpawn = _arm.GetShotSpawn();

        while (true)
        {
            foreach (var round in bulletRounds)
            {
                for (var i = 0; i < numberOfProjectiles; i++)
                {
                    var rotation = Quaternion.AngleAxis((i - 1) * round.angle, Vector3.up);

                    var transform1 = transform;
                    var direction = rotation * transform1.forward;
                    var position = shotSpawn.position + direction;

                    // Fix the Y of the spawn
                    const float yAxis = 1f;
            
                    position = new Vector3(position.x, yAxis, position.z);
                    var rot = rotation * transform1.rotation;
                
                    var bullet = EnemyPoolManager.Instance.GetBossBullet(round.projectile);
                    bullet.transform.position = position;
                    bullet.transform.rotation = rot;
                }
            
                yield return new WaitForSeconds(fireRate);
            }   
        }
    }
}
