using System;
using System.Collections;
using System.Linq;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;
using Random = UnityEngine.Random;

public class BossSubmodule : Entity
{
    [Header("Submodule Parameters")]
    public int submoduleIndex;
    [SerializeField] private List<SubModulePhase> attackPhases;
    [Tooltip("The type of bullet it must be to take damage")]
    [SerializeField] private PlayerArm.ArmType armType;
    [Header("Stun Parameters")]
    [SerializeField] private float stunTime = 5f;
    [Tooltip("The percentage that the module recovers when leaving the stun state")]
    [SerializeField, Range(1, 100)] private float recoveryPercentage = 50f;
    [Header("Objects")]
    [SerializeField] protected GameObject absorbEffect;
    [SerializeField] protected List<GameObject> lockedEffects;
	
    
    [HideInInspector]public bool wasAbsorbed;
    private Boss _boss;
    private bool _isStunned;
    private bool _isInvulnerable;
    private bool _isEnraged;
    private float _currentAttackTime;
    private int _currentPhase;
    private Outline _outline;
    private PlayerController _player;

    [Serializable]
    public class SubModulePhase
    {
        public string name = "Phase";
        public List<SubmoduleAttack> attacks;
    }

    protected override void Awake()
    {
        base.Awake();
        _outline = GetComponent<Outline>();
    }

    private void Start()
    {
        _boss = GetComponentInParent<Boss>();
        _player = LevelManager.Instance.GetPlayer().gameObject.GetComponent<PlayerController>();
        
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnReturnedBoss, OnReturnedBoss);
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnArmChanged, OnArmChanged);
    }
    
    private int _lastAttackIndex = -1;
    public void MakeAction()
    {
        if (_isStunned)
            return;

        if (attackPhases.Count > 2)
        {
            var availableAttacks = attackPhases[_currentPhase].attacks.Where((_, index) => index != _lastAttackIndex)
                .ToList();
            var randomAttackIndex = Random.Range(0, availableAttacks.Count);

            var randomAttack = availableAttacks[randomAttackIndex];
            _lastAttackIndex = attackPhases[_currentPhase].attacks.IndexOf(randomAttack);
        }
        else
        {
            _lastAttackIndex = Random.Range(0, attackPhases[_currentPhase].attacks.Count);
        }
        
        var attack = attackPhases[_currentPhase].attacks[_lastAttackIndex];
        attack.MakeAction();
        _currentAttackTime = attack.GetTimeAfterExecuting();
    }

    public void ChangePhase()
    {
        _lastAttackIndex = -1;
        _currentPhase++;

        // If the current phase is greater than the amount of phases, don't attack
        _isStunned = _currentPhase >= attackPhases.Count;
    }
    
    protected virtual IEnumerator StunModule()
    {
        Stun();
        
        yield return new WaitForSeconds(stunTime);

        RecoverFromStun();
    }

    private void Stun()
    {
        _isInvulnerable = true;
        _isStunned = true;

        absorbEffect.SetActive(true);
    }
    
    private void RecoverFromStun()
    {
        if (absorbEffect != null)
            absorbEffect.SetActive(false);

        _isStunned = false;
        
        var newHp = (recoveryPercentage * hp) / 100;
        _currentHp = newHp;
        
        _isInvulnerable = false;
    }
    
    public override void TakeDamage(float damage, PlayerArm.ArmType aType = PlayerArm.ArmType.None, bool showDamage = true)
    {
        if (_isInvulnerable ||
            _isEnraged ||
            aType != armType)
        {
            return;   
        }

        _currentHp -= damage;
        
        if(showDamage)
            StartCoroutine(ShowDamage());
        
        if (_currentHp <= 0)
            StartCoroutine(StunModule());
    }

    public void TransmitDamage(float damage, PlayerArm.ArmType aType = PlayerArm.ArmType.None, bool showDamage = true)
    {
        _boss.TakeDamage(damage, aType, showDamage);
    }
    
    public float GetTimeAfterExecuting()
    {
        return _currentAttackTime;
    }

    private void OnReturnedBoss(params object[] parameters)
    {
        if((int)parameters[1] != submoduleIndex) 
            return;
        
        var won = (bool) parameters[0];
        if (won)
        {
            DestroyModule();
        }
        else
        {
            RecoverFromStun();
            StartEnragedState();
        }
    }

    /// <summary>
    /// Makes the boss enter the enraged state. Cannot be damaged
    /// </summary>
    private void StartEnragedState()
    {
        _isInvulnerable = true;
        _isEnraged = true;
        
        // Disable outline
        _outline.enabled = false;
        
        // Show the locked effects
        lockedEffects.ForEach(effect => effect.SetActive(true));
    }
    
    private void DestroyModule()
    {
        Destroy(gameObject);
    }

    public bool GetIsStunned()
    {
        return _isStunned;
    }

    private void OnArmChanged(params object[] parameters)
    {
        if (_isEnraged)
            return;
        
        OutlineModule();
    }
    
    private void OutlineModule()
    {
        if (this == null || 
            !gameObject.activeInHierarchy || 
            _outline == null)
            return;
        
        var arms = _player.GetCurrentArmsType();

        _outline.enabled = arms.Item1.armType == armType || arms.Item2.armType == armType;
    }
}
