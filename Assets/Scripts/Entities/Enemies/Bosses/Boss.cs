using System.Linq;
using MM.Data;
using MM.Entities.Player.Arms;
using MM.Entities.Player;
using MM.Events;
using MM.Gameplay;
using MM.Sound;
using MM.UI;
using UnityEngine;

namespace MM.Entities.Enemies.Bosses
{
    public class Boss : Entity
    {
        #region Private Variables

        [SerializeField] private string bossName;
        [SerializeField] private bool isTutorial;
        [Header("Boss Parameters")] 
        [SerializeField] private GameObject model;
        [SerializeField] private Sprite bossImage;

        private GenericAttackPhase _pattern;
        private SubmoduleAttackRandomizer _randomizer;
        private Rigidbody _rb;
        protected PlayerModel _player;
        #endregion
    
        #region MonoBehaviour Functions
        protected override void Awake()
        {
            _currentHp = hp;
        
            baseMats = new Material[allRenderers.Length];
            for (var i = 0; i < allRenderers.Length; i++)
            {
                baseMats[i] = new Material(allRenderers[i].material);
            }
        
            if(model != null)
            {
                allRenderers[0] = model.GetComponentInChildren<Renderer>();
                baseMats[0] = new Material(allRenderers[0].material);   
            }

            damagedMat = new Material(Shader.Find("Unlit/Color"))
            {
                color = Color.white
            };
        
            _pattern = GetComponent<GenericAttackPhase>();
            _randomizer = GetComponent<SubmoduleAttackRandomizer>();
            _rb = GetComponent<Rigidbody>();
        }

        protected virtual void Start()
        {
            if(!isTutorial)
            {
                UIManager.Instance.SetBossImage(bossImage);
                UIManager.Instance.SetBossHealthVisibility(true);
                UIManager.Instance.SetMaxHealth(hp, false);
            }
        }
        #endregion

        #region Private Functions
        /// <summary>
        /// Check if the player exists in the level
        /// </summary>
        /// <returns></returns>
        private bool CheckPlayer()
        {
            if (_player == null)
                _player = LevelManager.Instance.Player;

            return _player == null;
        }
    
        protected virtual void LateUpdate()
        {
            RotateModel();
        }
    
        private void RotateModel()
        {
            if (CheckPlayer() || model == null) 
                return;
        
            var newRotation = Quaternion.LookRotation(_player.transform.position - transform.position);
            var currentRotation = model.transform.rotation;
        
            // Calculate the angle of rotation needed to achieve the new rotation
            var angleToRotate = Quaternion.Angle(currentRotation, newRotation);
    
            // Limit the rate of rotation
            var maxRotationAngle =  rotationSpeed * Time.deltaTime;
            var clampedAngle = Mathf.Clamp(angleToRotate, 0f, maxRotationAngle);
        
            currentRotation = Quaternion.RotateTowards(currentRotation, newRotation, clampedAngle);
            currentRotation = new Quaternion(0, currentRotation.y, 0, currentRotation.w);
            model.transform.rotation = currentRotation;
        }
        #endregion
        
        #region Public Functions
        public override void TakeDamage(float damage, PlayerArm.ArmType aType = PlayerArm.ArmType.None, bool showDamage = true)
        {
            // Make damage in evey module
            var subModules = _randomizer.GetSubModules();
            subModules.Where(subModule => subModule != null).ToList()
                .ForEach(subModule => subModule.TakeDamage(damage, aType, showDamage));
            
            if (isTutorial) { return; }
            
            _currentHp -= damage;
        
            if (showDamage)
                StartCoroutine(ShowDamage());
        
            UIManager.Instance.SetHealthBarValue(_currentHp, true, false);
            AudioManager.Instance.PlayAudioClip(Sounds.SoundType.EnemyDamaged, transform.position);
        
            if (_currentHp <= 0)
            {
                KillEntity();
                EventManager.Instance.Trigger(NameEvent.OnBossDeath);

                switch (bossName)
                {
                    case "Notron":
                        SaveFile.Instance.Notron.Completed = true;
                        SaveFile.Instance.Iset.Unlocked = true;
                        break;
                    
                    case "Iset":
                        SaveFile.Instance.Iset.Completed = true;
                        SaveFile.Instance.EVast.Unlocked = true;
                        break;
                    
                    case "E-Vast":
                        SaveFile.Instance.EVast.Completed = true;
                        break;
                }
                
                SaveFile.Save();
                
                LevelManager.Instance.WinLevel();
            }
            
            _randomizer.CheckPhaseHp(_currentHp);
        }

        /// <summary>
        /// Change the current phase when a module is destroyed
        /// </summary>
        public void ChangePatternPhase()
        {
            _pattern.ChangePhase();
        }
        #endregion
    
        #region Events
        private void OnCollisionExit(Collision other)
        {
            // Enemy, Player
            if (_rb != null && other.gameObject.layer is 8 or 9)
                _rb.velocity = Vector3.zero;
        }
        #endregion
    }
}