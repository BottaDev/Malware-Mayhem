using System.Collections;
using MM.Sound;
using UnityEngine;
using Random = UnityEngine.Random;

namespace MM.Entities.Enemies.Bosses.E_Vast
{
    public class RandomMissilesAttack : SubmoduleAttack
    {
        #region Private Variables
        [Header("Attack Parameters")]
        [SerializeField] private float missileCount = 6f;
        [SerializeField] private float timeBetweenMissiles = 0.5f;
        [SerializeField] private GameObject missile;
        [SerializeField] private GameObject missileModel;
        [SerializeField] private Transform[] missileModelPosition;

        [Header("Area Parameters")]
        [SerializeField, Range(1f, 30f)] private float attackRange = 12f;
        [SerializeField]private LayerMask obstacleMask;
        #endregion

        #region Public Funtions
        public override void MakeAction()
        {
            base.MakeAction();
            StartCoroutine(SpawnMissiles());
        }
        #endregion

        #region Private Functions
        private IEnumerator SpawnMissiles()
        {
            for (var i = 0; i < missileCount; i++)
            {
                if (_submodule.GetIsStunned())
                    yield return null;

                var randomPosition = Random.insideUnitSphere * attackRange + transform.position;
                randomPosition.y = 0.1f;
            
                var colliders = Physics.OverlapSphere(randomPosition, 0.1f, obstacleMask);

                if (colliders.Length > 0)
                    continue;
            
                Instantiate(missileModel, 
                    i < 6 ? missileModelPosition[i].position : missileModelPosition[i - 6].position,
                    Quaternion.identity);

                AudioManager.Instance.PlayAudioClip(Sounds.SoundType.MissileLaunch, missileModelPosition[i].position);
            
                // Fix the Y of the spawn
                const float yAxis = 1f;
                var pos = new Vector3 (randomPosition.x, yAxis, randomPosition.z);

                Instantiate(missile, pos, Quaternion.identity);

                yield return new WaitForSeconds(timeBetweenMissiles);
            }
        }
        #endregion
        
        #region Events
        private void OnDrawGizmosSelected()
        {
            Gizmos.color = Color.red;
            Gizmos.DrawWireSphere(transform.position, attackRange);
        }
        #endregion
    }
}
