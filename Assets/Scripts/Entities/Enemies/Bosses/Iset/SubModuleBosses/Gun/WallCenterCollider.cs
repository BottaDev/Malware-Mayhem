using System.Collections;
using MM.Common;
using UnityEngine;

namespace MM.Entities.Enemies.Bosses.Iset.SubModuleBosses
{
    public class WallCenterCollider : MonoBehaviour
    {
        #region Private Variables

        [SerializeField] private BossBulletType bulletType;
        [SerializeField] private int totalBullets;
        [SerializeField] private float maxAngle = 270;
        [SerializeField] private float minAngle = 90;
        [SerializeField] private float rotationPerSecond = .1f;
        
        private float _accumulatedRotation;
        private bool _firstCall = true;
        private WallsMovement _wallsMovement;
        
        #endregion

        #region MonoBehaviour Functions

        private void Awake()
        {
            _wallsMovement = transform.parent.parent.GetComponent<WallsMovement>();
        }

        private void Update()
        {
            AccumulateRotation();
        }

        private void OnTriggerEnter(Collider other)
        {
            if (_firstCall)
            {
                _firstCall = false;
                return;
            }
            
            if (other.gameObject.layer == 7)
            {
                StartCoroutine(nameof(WaitToShot));
            }
        }

        #endregion

        #region Private Functions

        private IEnumerator WaitToShot()
        {
            yield return new WaitUntil(() => _wallsMovement.IsStopped);
            
            Shot();
        }

        
        private void Shot()
        {
            var angleRange = maxAngle - minAngle;
            var angleStep = angleRange / totalBullets;

            for (var i = 0; i < totalBullets; i++)
            {
                var currentAngle = minAngle + i * angleStep + _accumulatedRotation;
                var rotation = Quaternion.AngleAxis(currentAngle, Vector3.up);

                var direction = rotation * Vector3.forward;
                var position = transform.position + direction;

                // Fix the Y of the spawn
                const float yAxis = 1f;
            
                position = new Vector3(position.x, yAxis, position.z);

                var bullet = EnemyPoolManager.Instance.GetBossBullet(bulletType);

                var bulletTransform = bullet.transform;
                bulletTransform.position = position;
                bulletTransform.rotation = rotation;
            }
        }
        
        private void AccumulateRotation()
        {
            _accumulatedRotation += Time.deltaTime * rotationPerSecond;
            if (_accumulatedRotation >= maxAngle)
            {
                _accumulatedRotation = 0;
            }
        }

        #endregion
    }
}