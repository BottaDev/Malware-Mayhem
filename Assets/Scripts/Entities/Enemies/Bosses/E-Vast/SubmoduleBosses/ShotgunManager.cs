using System.Collections.Generic;
using MM.Events;
using UnityEngine;
using Random = UnityEngine.Random;

namespace MM.Entities.Enemies.Bosses.E_Vast.SubmoduleBosses
{
    /// <summary>
    /// Manage the shotgun bosses of the E-Vast fight
    /// </summary>
    public class ShotgunManager : MonoBehaviour
    {
        #region Private Variables
        [SerializeField] private List<GameObject> teleportPositions;

        private List<ShotgunBoss> _shotgunBosses;
        private int _submoduleIndex;
        #endregion
    
        #region MonoBehaviour Functions
        private void Start()
        {
            _shotgunBosses = new List<ShotgunBoss>(GetComponentsInChildren<ShotgunBoss>());
        }
        #endregion
        
        #region Public Functions
        /// <summary>
        /// Get a random teleport position that is not being used by a shotgun boss
        /// </summary>
        /// <returns></returns>
        public GameObject GetRandomPosition()
        {
            var newPosition = teleportPositions[Random.Range(0, teleportPositions.Count)];
        
            // Check if the position is already occupied
            if (newPosition.transform.childCount > 0)
            {
                // If it is, get a new position
                newPosition = GetRandomPosition();
            }

            return newPosition;
        }

        /// <summary>
        /// Set the index of the fight to the proper submodule of the boss in the main fight
        /// </summary>
        /// <param name="index"></param>
        public void SetSubBossIndex(int index)
        {
            _submoduleIndex = index;
            Invoke(nameof(CheckShotgun), .1f);
        }
        #endregion

        #region Private Functions
        /// <summary>
        /// Check if all the shotguns are defeated. If they are, return the player to the main fight.
        /// </summary>
        private void CheckShotgun()
        {
            for (var i = 0; i < _shotgunBosses.Count; i++)
            {
                if (_shotgunBosses[i] == null)
                {
                    _shotgunBosses.Remove(_shotgunBosses[i]);
                }
            }

            if (_shotgunBosses.Count == 0)
                EventManager.Instance.Trigger(NameEvent.OnReturnedBoss, true, _submoduleIndex);
        }
        #endregion
    }
}
