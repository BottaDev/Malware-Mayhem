using UnityEngine;
using UnityEngine.SceneManagement;

public class LevelManager : MonoBehaviour
{
    public static LevelManager Instance = null;

    public GameObject spawnPosition;
    public GameObject playerSpawn;

    private bool _isLoadingScene;
    private PlayerModel _player;
    
    private void Awake()
    {
        if (Instance == null)
            Instance = this;
        else
            Destroy(gameObject);

        if (playerSpawn != null && spawnPosition != null)
            Instantiate(playerSpawn, spawnPosition.transform.position, Quaternion.identity);
    }

    private void Start()
    {
        EventManager.Instance.Subscribe("OnPlayerSpawned", OnPlayerSpawned);
        
        AudioManager.Instance.Stop("MainMenu");
        AudioManager.Instance.Play("Level 1-1");
    }

    public void PauseLevel()
    {
        if (_isLoadingScene)
            return;
        
        AudioManager.Instance.Stop("Level 1-1");
        SetLevelSpeed(0);
        UIManager.Instance.PauseLevel();
    }

    public void ResumeLevel()
    {
        AudioManager.Instance.Play("Level 1-1");
        PauseManager.Instance.ChangePause(false);
        SetLevelSpeed(1);
        UIManager.Instance.ResumeLevel();
    }

    public void RestartLevelSpeed()
    {
        SetLevelSpeed(1);
    }

    private void SetLevelSpeed(float scale)
    {
        Time.timeScale = scale;
        Time.fixedDeltaTime = Time.fixedUnscaledDeltaTime * scale; 
    }
    
    public void EndLevel()
    {
        _isLoadingScene = true;
        UIManager.Instance.StartFadeIn();
        
        AudioManager.Instance.Stop("Level 1-1");
        AudioManager.Instance.Stop("TresholdLife");
        AudioManager.Instance.Play("LoseLevel");
        Invoke(nameof(ShowLoseScene), 2f);
    }

    public PlayerModel GetPlayer()
    {
        return _player;
    }
    
    private void ShowLoseScene()
    {
        SceneManager.LoadScene("LoseScene");
    }
    
    private void OnPlayerSpawned(params object[] parameters)
    {
        _player = (PlayerModel) parameters[1];
    }
}
