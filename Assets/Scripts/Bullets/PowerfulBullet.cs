using MM.Common;
using UnityEngine;

namespace MM.Bullets
{
    public class PowerfulBullet : Bullet
    {
        #region Private Variables
        
        [SerializeField] private BossBulletType typeOfBulletToDivide;
        [SerializeField] private int numberOfBulletsToDivide;
        [SerializeField] private float maxAngle = 360;
        [SerializeField] private float minAngle = 0;
        
        private float _accumulatedRotation;

        #endregion

        #region MonoBehaviour Functions 

        public override void Update()
        {
            base.Update();
            
            AccumulateRotation();
        }

        protected override void OnTriggerEnter(Collider other)
        {
            if (other.gameObject.layer is 7)
            {
                DivideBullet();
            }
            
            base.OnTriggerEnter(other);
        }

        #endregion

        #region Private Functions
        
        private void DivideBullet()
        {
            var angleRange = maxAngle - minAngle;
            var angleStep = angleRange / numberOfBulletsToDivide;

            for (var i = 0; i < numberOfBulletsToDivide; i++)
            {
                var currentAngle = minAngle + i * angleStep + _accumulatedRotation;
                var rotation = Quaternion.AngleAxis(currentAngle, Vector3.up);

                var direction = rotation * Vector3.forward;
                var position = transform.position + direction;

                // Fix the Y of the spawn
                const float yAxis = 1f;
            
                position = new Vector3(position.x, yAxis, position.z);

                var bullet = EnemyPoolManager.Instance.GetBossBullet(typeOfBulletToDivide);

                var bulletTransform = bullet.transform;
                bulletTransform.position = position;
                bulletTransform.rotation = rotation;
            }
        }
        
        private void AccumulateRotation()
        {
            _accumulatedRotation += Time.deltaTime * .1f;
            if (_accumulatedRotation >= maxAngle)
            {
                _accumulatedRotation = 0;
            }
        }

        #endregion
        
    }
}