using System.Collections.Generic;
using System.Linq;
using MM.Entities.Player;
using MM.Entities.Player.Arms;
using MM.Common;
using MM.Events;
using UnityEngine;

namespace MM.Gameplay
{
    /// <summary>
    /// Manage the range indicators for the player to absorb submodules and enemies.
    /// </summary>
    public class RangeManager : MonoBehaviourSingleton<RangeManager>
    {
        #region Private Variables

        private List<RangeIndicator> _enemyIndicators = new();
        private List<RangeIndicator> _submoduleIndicators = new();
        private PlayerModel _player;
        private RangeIndicator _closestIndicator;

        #endregion

        #region MonoBehaviour Functions

        private void Start()
        {
            EventManager.Instance.Subscribe(NameEvent.OnPlayerSpawned, OnPlayerSpawned);
            EventManager.Instance.Subscribe(NameEvent.OnReturnedBoss, OnReturnedBoss);
        }

        private void Update()
        {
            CheckRangeDistance();
        }

        #endregion

        #region Private Functions

        private void CheckRangeDistance()
        {
            if (CheckPlayer())
            {
                return;
            }

            RangeIndicator closest = null;
            var closestDistance = float.MaxValue;

            // First check for submodule indicators...
            GetClosestIndicator(ref closest, ref closestDistance, true);

            // Then check for enemy indicators if there are no submodule indicators...
            if (closest == null)
            {
                GetClosestIndicator(ref closest, ref closestDistance, false);
            }
            
            // Verify if the closest changed or not
            // If it doesn't changed, is not required to reset all the indicators
            if (closest == _closestIndicator)
            {
                return;
            }

            _closestIndicator = closest;

            // Reset all submodules indicators except the closest one
            _submoduleIndicators?.Where(entity => entity != null && entity.isActiveAndEnabled).ToList()
                .ForEach(entity => entity.SetColor(entity == closest && closestDistance <= _player.GetAbsorbDistance()));

            // Reset all enemy indicators except the closest one
            _enemyIndicators?.Where(entity => entity != null && entity.isActiveAndEnabled).ToList()
                .ForEach(entity => entity.SetColor(entity == closest && closestDistance <= _player.GetAbsorbDistance()));
        }

        private void GetClosestIndicator(ref RangeIndicator closest, ref float closestDistance, bool isSubModule)
        {
            var indicators = isSubModule ? _submoduleIndicators : _enemyIndicators;
            
            var closestIndicator = indicators
                .Where(indicator => indicator != null && indicator.isActiveAndEnabled)
                .OrderBy(indicator => Vector3.Distance(_player.transform.position, indicator.transform.position))
                .FirstOrDefault();

            if (closestIndicator != null)
            {
                var distanceToClosest = Vector3.Distance(_player.transform.position, closestIndicator.transform.position);

                // Check if the closest indicator is within the player's absorb distance
                if (distanceToClosest <= _player.GetAbsorbDistance())
                {
                    closest = closestIndicator;
                    closestDistance = distanceToClosest;
                }
            }
        }

        /// <summary>
        /// Check if the player exists in the level
        /// </summary>
        /// <returns></returns>
        private bool CheckPlayer()
        {
            if (_player == null)
            {
                _player = LevelManager.Instance.Player;
            }

            return _player == null;
        }

        #endregion

        #region Public Functions

        /// <summary>
        /// Add a new indicator to the list of submodules or enemies
        /// </summary>
        /// <param name="indicator"></param>
        /// <param name="isSubModule"></param>
        public void AddIndicator(RangeIndicator indicator, bool isSubModule)
        {
            if (isSubModule)
            {
                _submoduleIndicators.Add(indicator);
            }
            else
            {
                _enemyIndicators.Add(indicator);
            }
        }

        #endregion

        #region Event Functions

        private void OnPlayerSpawned(params object[] parameters)
        {
            _player = (PlayerModel)parameters[1];
        }

        private void OnReturnedBoss(params object[] parameters)
        {
            _player = LevelManager.Instance.Player;
        }

        #endregion
    }
}