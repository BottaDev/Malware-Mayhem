using System.Collections;
using MM.Common;
using MM.Events;
using UnityEngine;

namespace MM.Gameplay
{
    /// <summary>
    /// Manages transitions and state changes within the game.
    /// It handles sub-level transitions and provides a mechanism to check if the player is currently in a transition state.
    /// </summary>
    public class TransitionManager : MonoBehaviourSingleton<TransitionManager>
    {
        #region Private Variables

        [Tooltip("The time it takes for the transition to end.")] [SerializeField]
        private float timeToEndTransition = 1.25f;

        // Indicates if the game is in a sub-level transition.
        private bool _inSubLevelTransition;
        private bool _isInSubBoss;

        #endregion

        #region Properties

        public bool IsInSubLevelTransition => _inSubLevelTransition;
        public bool IsInSubBoss => _isInSubBoss;

        #endregion

        #region Monobehaviour Functions

        private void Start()
        {
            EventManager.Instance.Subscribe(NameEvent.OnAbsorbedSubmodule, OnAbsorbedSubmodule);
            EventManager.Instance.Subscribe(NameEvent.OnReturnedBoss, OnReturnedBoss);
        }

        #endregion

        #region Private Functions

        /// <summary>
        /// Coroutine to enable the transition and wait for the end of the transition.
        /// </summary>
        private IEnumerator ProcessTransition()
        {
            _inSubLevelTransition = true;

            yield return new WaitForSeconds(timeToEndTransition);

            _inSubLevelTransition = false;
        }

        #endregion

        #region Events

        private void OnAbsorbedSubmodule(params object[] parameters)
        {
            StartCoroutine(ProcessTransition());
            _isInSubBoss = true;
        }

        private void OnReturnedBoss(params object[] parameters)
        {
            StartCoroutine(ProcessTransition());
            _isInSubBoss = false;
        }

        #endregion
    }
}