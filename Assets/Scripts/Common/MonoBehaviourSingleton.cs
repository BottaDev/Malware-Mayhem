using UnityEngine;

namespace Common
{
    /// <summary>
    /// This class is a generic MonoBehaviourSingleton that ensures there is only one instance of a MonoBehaviour-derived class.
    /// It can be used as a base class for creating singletons in Unity for specific MonoBehaviour types.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public class MonoBehaviourSingleton<T> : MonoBehaviour where T : MonoBehaviour
    {
        #region Private Variables
        protected static T m_Instance;
        protected static bool m_AttemptedSlowAccessOnceBool;
        #endregion

        #region Public Variables
        // Property for accessing the singleton instance. It performs a slow search if the instance is null.
        public static T SlowAccessInstance
        {
            get
            {
                if (m_Instance == null)
                {
                    m_Instance = FindObjectOfType<T>();
                }

                return Instance;
            }
        }

        public static T Instance
        {
            get
            {
                // Check if slow access has been attempted once and return the instance.
                CheckForOneTimeSlowInstance();

                return m_Instance;
            }
        }
        #endregion
    
        #region Private Functions
        protected static void CheckForOneTimeSlowInstance()
        {
            // One time, will try to access it slowly
            if (!m_AttemptedSlowAccessOnceBool)
            {
                m_AttemptedSlowAccessOnceBool = true;

                if (m_Instance == null)
                {
                    m_Instance = SlowAccessInstance;
                }
            }
        }
        #endregion

        #region Monobehaviour Functions
        protected virtual void Awake()
        {
            if (this is T)
            {
                if (m_Instance == null || m_Instance == this)
                {
                    m_Instance = this as T;
                }
                else
                {
                    Debug.LogWarning(
                        "An instance of type [" + typeof(T) +
                        "] already exists, and you are trying to create another one on Object [" + name + "].", m_Instance);
                }
            }
            else
            {
                Debug.LogError("MonoBehaviourSingleton has been initialised for type [" + this.GetType() +
                               "], but the instance is for type [" + typeof(T) + "].");
            }
        }
        #endregion
    }
}