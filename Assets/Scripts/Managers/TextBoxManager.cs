using System.Collections;
using Common;
using TMPro;
using UnityEngine;

public class TextBoxManager : MonoBehaviourSingleton<TextBoxManager>
{
    [SerializeField] private TextMeshProUGUI textBox;
    [SerializeField] private AllTexts[] textLines;
    [SerializeField] private float lineSpeed;
    [SerializeField] private KeyCode input;
    private int _currentLine;
    private float _currentSpeed;
    private bool _cantStart = true;

    private void Start()
    {
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnPlayerSpawned, OnPlayerSpawned);
        
        textBox = UIManager.Instance.GetTextBox();
        textBox.text = string.Empty;
        
        _currentSpeed = lineSpeed;
    }

    private void Update()
    {
        if(textLines.Length <= 0 || _currentLine >= textLines.Length || _cantStart) return;
        
        if(Input.GetKeyDown(input))
        {
            if(textBox.text == textLines[_currentLine].texts)
            {
                NextLine();
            }
        }

        if (Input.GetKey(input))
        {
            if(_currentSpeed == lineSpeed)
            {
                _currentSpeed /= 2;
            }
        }

        if (Input.GetKeyUp(input))
        {
            _currentSpeed = lineSpeed;
        }
    }
    
    public void SetText(AllTexts[] text)
    {
        textLines = text;
    }

    public void StartText()
    {
        StartCoroutine(StarTexts());
    }

    private IEnumerator StarTexts()
    {
        yield return new WaitWhile(() => _cantStart);
        
        EventManager.Instance.Trigger(EventManager.NameEvent.OnTextStarted);
        _currentLine = 0;
        StartCoroutine(TypeLine());
    }

    public void ContinueText()
    {
        EventManager.Instance.Trigger(EventManager.NameEvent.OnTextStarted);
        StartCoroutine(TypeLine());
    }

    private IEnumerator TypeLine()
    {
        foreach (var t in textLines[_currentLine].texts)
        {
            textBox.text += t;

            yield return new WaitForSecondsRealtime(_currentSpeed);
        }
    }

    private void NextLine()
    {
        _currentLine++;
        textBox.text = string.Empty;
        
        if (_currentLine >= textLines.Length || textLines[_currentLine - 1].stop)
        {
            EventManager.Instance.Trigger(EventManager.NameEvent.OnTextFinished);
        }
        else if(_currentLine < textLines.Length - 1 )
        {
            StartCoroutine(TypeLine());
        }
    }
    
    private void OnPlayerSpawned(params object[] parameters)
    {
        _cantStart = false;
    }
}