using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class EnemyCorpse : MonoBehaviour
{
    public float burrowTime;
    public float shiftTime;
    public float force;
    public GameObject[] parts;
    
    private readonly int _steps = 15;
    private bool _burrowing;
    private static readonly int BlendFactor = Shader.PropertyToID("_BlendFactor");

    private void Start()
    {
        StartCoroutine(ColorShift());
        Invoke(nameof(StartBurrow), burrowTime);
        
    }
    
    private void Update()
    {
        if (!_burrowing) 
            return;
        
        var allDown = true;
        foreach (var item in parts)
        {
            if (item.transform.position.y > -3)
                allDown = false;
        }
        
        if (allDown)
            Destroy(gameObject);
    }

    private IEnumerator ColorShift()
    {
        var stepTime = shiftTime / (float)_steps;
        var stepValue = 1 / (float)_steps;
        var acumValue = 0f;
        var mats = new Material[parts.Length];

        for (var i = 0; i < parts.Length; i++)
        {
            mats[i] = parts[i].GetComponent<MeshRenderer>().material;
            parts[i].GetComponent<Rigidbody>().AddExplosionForce(force, transform.position + transform.forward * 1f + transform.up * .5f, 5);
        }

        for (var i = 0; i < _steps; i++)
        {
            acumValue += stepValue;
            foreach (var item in mats)
            {
                item.SetFloat(BlendFactor, acumValue);
            }
            yield return new WaitForSeconds(stepTime);
        }
    }

    private void StartBurrow()
    {
        foreach (var item in parts)
        {
            item.GetComponent<Collider>().enabled = false;
        }

        _burrowing = true;
    }
    
    private void OnAbsorbedSubmodule(params object[] parameters)
    {
        
    }

    private void OnReturnedBoss(params object[] parameters)
    {
        
    }

    private void OnPostProcessFinished(params object[] parameters)
    {
        
    }
}
