using System;
using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;

public class TutorialController : MonoBehaviour
{
    [Header("Tutorial Parameters")]
    [SerializeField, Range(0f, 20f)] private float initialWait = 1f;
    [SerializeField, Range(0f, 20f)] private float imageDuration = 5f;
    [Header("Images")]
    [SerializeField] private GameObject movementKeys;
    [SerializeField] private List<GameObject> mouseKeys;
    [SerializeField] private List<GameObject> leftMouseImages;
    [SerializeField] private List<GameObject> rightMouseImages;

    private void Start()
    {
        StartCoroutine(nameof(ShowMovementKeys));
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnTutorialSkip, SkipInitialWait);
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnAbsorbedSubmodule, OnAbsorbedSubmodule);
    }

    private IEnumerator ShowMovementKeys()
    {
        yield return new WaitForSeconds(initialWait);

        movementKeys.SetActive(true);
        
        yield return new WaitForSeconds(imageDuration);
        
        movementKeys.SetActive(false);
        
        StartCoroutine(nameof(ShowMouseKeys));
    }
    
    private IEnumerator ShowMouseKeys()
    {
        yield return new WaitForSeconds(initialWait);
        
        mouseKeys.ForEach(x => x.SetActive(true));

        StartCoroutine(AnimateLeftMouseImage());
        StartCoroutine(AnimateRightMouseImage());
        
        yield return new WaitForSeconds(imageDuration);
        
        StopCoroutine(AnimateLeftMouseImage());
        StopCoroutine(AnimateRightMouseImage());
        
        mouseKeys.ForEach(x => x.SetActive(false));
    }
    
    private const float _animationDuration = 0.5f;
    private IEnumerator AnimateLeftMouseImage()
    {
        while (true)
        {
            yield return new WaitForSeconds(_animationDuration);
            leftMouseImages[0].SetActive(false);
            leftMouseImages[1].SetActive(true);
            yield return new WaitForSeconds(_animationDuration);
            leftMouseImages[0].SetActive(true);
            leftMouseImages[1].SetActive(false);
        }
    }
    
    private IEnumerator AnimateRightMouseImage()
    {
        while (true)
        {
            yield return new WaitForSeconds(_animationDuration);
            rightMouseImages[0].SetActive(false);
            rightMouseImages[1].SetActive(true);
            yield return new WaitForSeconds(_animationDuration);
            rightMouseImages[0].SetActive(true);
            rightMouseImages[1].SetActive(false);
        }
    }
    
    private void SkipInitialWait(params object[] parameters)
    {
        StopCoroutine(nameof(ShowMovementKeys));
        StopCoroutine(nameof(ShowMouseKeys));
        StopCoroutine(AnimateLeftMouseImage());
        StopCoroutine(AnimateRightMouseImage());
        
        movementKeys.SetActive(false);
        mouseKeys.ForEach(x => x.SetActive(false));
    }
    
    private void OnAbsorbedSubmodule(params object[] parameters)
    {
        StopCoroutine(nameof(ShowMovementKeys));
        StopCoroutine(nameof(ShowMouseKeys));
        StopCoroutine(AnimateLeftMouseImage());
        StopCoroutine(AnimateRightMouseImage());
        
        movementKeys.SetActive(false);
        mouseKeys.ForEach(x => x.SetActive(false));
    }
}
