using System;
<<<<<<< HEAD
using System.Collections;
using System.Linq;
=======
>>>>>>> main
using UnityEngine;

public class SimpleAttackPattern : SubmoduleAttack
{
    [Header("Pattern Parameters")]
    [SerializeField] private string patternName;
    [SerializeField] private GenericAttackPhase.BossBulletType projectile = GenericAttackPhase.BossBulletType.MediumGreen;
    [SerializeField, Range(0, 100)] private int numberOfProjectiles;
    [SerializeField, Range(0.1f, 1f)] private float fireRate = 0.1f;
    [SerializeField, Range(0f, 10f)] private float radius;
    [SerializeField, Range(0f, 360f)] private float rotationPerSecond = 90;
    [SerializeField] private float patternDuration = 2f;
    [SerializeField] private bool changeDirection;

    private const float _maxAngle = 360f;
    private float _currentFireRate = 0;
    private float _accumulatedRotation;
    private bool _isActive;
    
    private void Update()
    {
        if (_boss.hp <= 0 || !_isActive || !_canAttack)
            return;

        if (_currentFireRate <= 0)
            SpawnBullets();
        else
            _currentFireRate -= Time.deltaTime;
        
        AccumulateRotation();
    }
    
    private void AccumulateRotation()
    {
        _accumulatedRotation += Time.deltaTime * rotationPerSecond;
        if (_accumulatedRotation >= _maxAngle)
            _accumulatedRotation  = 0;
    }
    
    public override void MakeAction()
    {
        base.MakeAction();
        if (_boss.hp <= 0)
            return;

        _isActive = true;
        _currentFireRate = 0;
        
        Invoke(nameof(StopPattern), patternDuration);
    }

    private void SpawnBullets()
    {
        var angle = _maxAngle / numberOfProjectiles;

        for (var i = 0; i < numberOfProjectiles; i++)
        {
            if (_submodule.GetIsStunned())
            {
                _currentFireRate = fireRate;
                return;
            }
            
            var rotation = !changeDirection ? 
                Quaternion.AngleAxis(i * angle + _accumulatedRotation, Vector3.up) : 
                Quaternion.AngleAxis(i * angle - _accumulatedRotation, Vector3.up);

            var direction = rotation * Vector3.forward;
            var position = transform.position + (direction * radius);

            // Fix the Y of the spawn
            const float yAxis = 1f;
            
            position = new Vector3(position.x, yAxis, position.z);
            
            var bullet = EnemyPoolManager.Instance.GetBossBullet(projectile);
            bullet.transform.position = position;
            bullet.transform.rotation = rotation;
        }
        
        _currentFireRate = fireRate;
    }
    
    private void StopPattern()
    {
        _isActive = false;
    }
}