using System;
using System.Collections;
using MM.Common;
using MM.Data;
using MM.Others;
using MM.ScriptableObjects;
using UnityEngine;
using UnityEngine.Serialization;

namespace MM.UI
{
    /// <summary>
    /// Manage the menu with the world map.
    /// </summary>
    public class MainMenuManager : MonoBehaviourSingleton<MainMenuManager>
    {
        #region Private Variables

        [SerializeField] private GameObject worldMap;
        [SerializeField] private MainMenuPlanetController planetController;
        [SerializeField] private GameObject[] levelPoints;

        private Vector3 _worldMapStartPosition;
        private bool _canSelectLevels;

        #endregion

        #region MonoBehaviour Functions

        protected override void Awake()
        {
            base.Awake();

            _worldMapStartPosition = worldMap.transform.position;

            if (!SaveFile.Instance.Tutorial.Unlocked)
            {
                SaveFile.Instance.Tutorial.Unlocked = true;
            }
        }

        //TODO: Remove this after Final
        private void Update()
        {
            if (Input.GetKeyDown(KeyCode.Space))
            {
                foreach (var point in levelPoints)
                {
                    point.SetActive(true);
                }
            }

            if (Input.GetKeyDown(KeyCode.Alpha1))
            {
                SaveFile.Instance.Tutorial.Completed = !SaveFile.Instance.Tutorial.Completed;
            }
        }

        #endregion

        #region Public Functions

        public void SetPlayView()
        {
            var cam = Camera.main;
            var tutorialCompleted = SaveFile.Instance.Tutorial.Completed;

            StartCoroutine(nameof(SpawnLevel));

            if (cam != null)
            {
                var wM = worldMap.transform.position;
                worldMap.transform.position = new Vector3(cam.transform.position.x, wM.y, wM.z);
                
                if (!tutorialCompleted)
                {
                    planetController.RotateToPosition(levelPoints[0].transform.position);
                }
            }

            worldMap.GetComponent<ObjectRotator>().enabled = false;
            planetController.SetCanRotate(true);

            _canSelectLevels = true;
        }

        public void SetMenuView()
        {
            worldMap.transform.position = _worldMapStartPosition;

            worldMap.GetComponent<ObjectRotator>().enabled = true;
            planetController.SetCanRotate(false);

            _canSelectLevels = false;
            
            WorldMapLevelPoint.ResetCurrentSelected();
            
            foreach (var point in levelPoints)
            {
                point.SetActive(false);
            }
        }

        public bool CanSelectLevels()
        {
            return _canSelectLevels;
        }

        #endregion

        #region Private Functions

        /// <summary>
        /// Spawns the level points in the world map with a delay.
        /// </summary>
        private IEnumerator SpawnLevel()
        {
            foreach (var point in levelPoints)
            {
                var worldMapPoint = point.GetComponent<WorldMapLevelPoint>().LevelCardData;

                switch (worldMapPoint.CardType)
                {
                    case LevelCardData.LevelType.Tutorial:
                        point.SetActive(true);
                        break;
                    
                    case LevelCardData.LevelType.Notron:
                        if (SaveFile.Instance.Notron.Unlocked)
                        {
                            point.SetActive(true);
                        }
                        break;
                    
                    case LevelCardData.LevelType.Iset:
                        if (SaveFile.Instance.Iset.Unlocked)
                        {
                            point.SetActive(true);
                        }
                        break;
                    
                    case LevelCardData.LevelType.EVast:
                        if (SaveFile.Instance.EVast.Unlocked)
                        {
                            point.SetActive(true);
                        }
                        break;
                }
                
                yield return new WaitForSeconds(.5f);
            }
        }

        #endregion
    }
}