using System.Collections;
using Sound;
using UnityEngine;

public class CannonSubModules : SubBoss
{
    [SerializeField] private float detectionArea;
    [SerializeField] private Transform shotSpawn;
    [SerializeField] private LayerMask playerMask;
    private bool _isHidden;
    private Transform _t;
    private SubBossMultiAttack _bossMultiAttack;
    private NotronManager _notronManager;
    private const int _ticksToMove = 15;

    protected override void Start()
    {
        _t = GetComponent<Transform>();
        _bossMultiAttack = GetComponent<SubBossMultiAttack>();
        _notronManager = GetComponentInParent<NotronManager>();
    }

    private void Update()
    {
        var player = Physics.OverlapSphere(_t.position, detectionArea, playerMask);

        if (player.Length == 0 && _isHidden)
            StartCoroutine(Show());
        else if (player.Length > 0 && !_isHidden)
            StartCoroutine(Hide());
    }

    private IEnumerator Hide()
    {
        _isHidden = true;
        _bossMultiAttack.enabled = false;

        for (var i = 0; i < _ticksToMove; i++)
        {
            _t.position -= _t.up * +.2f;
            yield return new WaitForSeconds(.1f);
        }
    }

    private IEnumerator Show()
    {
        _isHidden = false;
        _bossMultiAttack.enabled = true;

        for (var i = 0; i < _ticksToMove; i++)
        {
            _t.position += _t.up * +.2f;
            yield return new WaitForSeconds(.1f);
        }
    }

    public override void TakeDamage(float damage, PlayerArm.ArmType aType = PlayerArm.ArmType.None,
        bool showDamage = true)
    {
        _currentHp -= damage;

        if (showDamage)
            StartCoroutine(ShowDamage());

        AudioManager.Instance.PlayAudioClip(Sounds.SoundType.EnemyDamaged, transform.position);

        if (_currentHp <= 0)
        {
            _notronManager.CannonDestroyed();
            Destroy(gameObject);
        }
    }
    
    public Transform GetShotSpawn()
    {
        return shotSpawn;
    }
    
    public bool GetIsHidden()
    {
        return _isHidden;
    }

    private void OnDrawGizmosSelected()
    {
        Gizmos.color = Color.yellow;
        Gizmos.DrawWireSphere(transform.position, detectionArea);
    }
}