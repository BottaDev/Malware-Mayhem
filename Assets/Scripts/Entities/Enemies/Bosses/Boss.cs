using System.Linq;
using UnityEngine;

public class Boss : Entity, ILateUpdatable
{
    [Header("Boss Parameters")] 
    [SerializeField] private GameObject model;

    private GenericAttackPhase _pattern;
    private SubmoduleAttackRandomizer _randomizer;
    private PlayerModel _player;

    protected virtual void OnEnable()
    {
        UpdateManager.Instance.lateUpdates.Add(this);
    }

    protected virtual void OnDisable()
    {
        UpdateManager.Instance.lateUpdates.Remove(this);
    }

    protected override void Awake()
    {
        _currentHp = hp;
        
        allRenderers = new Renderer[1];
        allRenderers[0] = model.GetComponent<Renderer>();
        
        baseMats = new Material[1];
        baseMats[0] = new Material(allRenderers[0].material);

        damagedMat = new Material(Shader.Find("Unlit/Color"))
        {
            color = Color.white
        };
        
        _pattern = GetComponent<GenericAttackPhase>();
        _randomizer = GetComponent<SubmoduleAttackRandomizer>();
    }

    /// <summary>
    /// Check if the player exists in the level
    /// </summary>
    /// <returns></returns>
    private bool CheckPlayer()
    {
        if (_player == null)
            _player = LevelManager.Instance.GetPlayer();

        return _player == null;
    }
    
    public void FalseLateUpdate()
    {
        if (CheckPlayer() || model == null) 
            return;
        
        var newRotation = Quaternion.LookRotation(_player.transform.position - transform.position);
        var currentRotation = model.transform.rotation;
        
        currentRotation = Quaternion.Slerp(currentRotation, newRotation, Time.deltaTime * rotationSpeed);
        currentRotation = new Quaternion(0, currentRotation.y, 0, currentRotation.w);
        model.transform.rotation = currentRotation;
    }

    public override void TakeDamage(float damage, PlayerArm.ArmType aType = PlayerArm.ArmType.None, bool showDamage = true)
    {
        _currentHp -= damage;
        
        if (showDamage)
            StartCoroutine(ShowDamage());
        
        if (_currentHp <= 0)
        {
            KillEntity();
            LevelManager.Instance.WinLevel();
        }

        var subModules = _randomizer.GetSubModules();
        subModules.Where(subModule => subModule != null).ToList().ForEach(subModule => subModule.TakeDamage(damage, aType, showDamage));

        _randomizer.CheckPhaseHp(_currentHp);
        _pattern.CheckPhaseHp(_currentHp);
    }
}