using System.Collections;
using MM.Entities.Player;
using MM.Entities.Enemies;
using MM.Events;
using MM.Sound;
using UnityEngine;

namespace MM.Entities
{
    public class EnemySpawn : MonoBehaviour
    {
        #region Private Functions
        [SerializeField] private float shadowDuration;
        [SerializeField] private float fallDelay;
        [SerializeField] private ParticleSystem impactParticles;
        [SerializeField] private GameObject enemyMeteor;
        [SerializeField] private Enemy enemyToSpawn;

        private readonly Vector3 _enemyStartPosition = new Vector3(10,15,10);
        private float _fallDuration;
        #endregion

        #region MonoBehaviour Functions
        private void Awake()
        {
            // For testing purposes, should check if the instance exist...
            if (EventManager.Instance != null)
                EventManager.Instance.Trigger(NameEvent.OnEnemySpawn, enemyToSpawn.GetType());
        }

        private void Start()
        {
            transform.eulerAngles = new Vector3(0,180,0);
            _fallDuration = shadowDuration - fallDelay;
            StartCoroutine(Fall());
            StartCoroutine(DrawShadowEffect());
        }
        #endregion
    
        #region Private Functions
        /// <summary>
        /// Handles the falling behavior of an enemy meteor
        /// </summary>
        private IEnumerator Fall()
        {
            const int steps = 15;
            var meteor = Instantiate(enemyMeteor, transform.position + _enemyStartPosition, Quaternion.identity);
        
            yield return new WaitForSeconds(fallDelay);
        
            for (var i = 0; i < steps; i++)
            {
                meteor.transform.position = Vector3.Lerp(transform.position + _enemyStartPosition, transform.position, (float)i / (float)steps);
                yield return new WaitForSeconds(_fallDuration / (float)steps);
            }

            var position = transform.position;
            meteor.transform.position = position;
            Instantiate(impactParticles, position, Quaternion.identity);
        
            AudioManager.Instance.PlayAudioClip(Sounds.SoundType.EnemyFallImpact, position);
        
            var collision = Physics.OverlapSphere(position, 1f);
            foreach (var t in collision)
            {
                var a = t.gameObject;
                if (a.gameObject.layer != 9) 
                    continue;
            
                var b = a.GetComponent<PlayerModel>();
                b.TakeDamage(6);
            }

            yield return new WaitForSeconds(.15f);
        
            Instantiate(enemyToSpawn.gameObject, transform.position, Quaternion.identity);

            Destroy(meteor);
            Destroy(gameObject);
        }

        private IEnumerator DrawShadowEffect()
        {
            var startScale = Vector3.one * .3f;
            const int steps = 60;

            for (var i = 0; i < steps; i++)
            {
                transform.localScale = Vector3.Lerp(Vector3.zero, startScale, (float)i / (float)steps);
                yield return new WaitForSeconds(shadowDuration / (float)steps);
            }
        }
        #endregion

        #region Public Functions
        public Enemy GetEnemyToSpawn()
        {
            return enemyToSpawn;
        }
        #endregion
    }
}
