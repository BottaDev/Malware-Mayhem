using System.Collections;
using UnityEngine;
using UnityEngine.Rendering.PostProcessing;
using Sound;

namespace MM_Camera
{
    /// <summary>
    /// Manage the VFX for absorbing a submodule.
    /// </summary>
    public class CameraDistortionController : MonoBehaviour
    {
        #region Private Variables
        private float _progress;
        private Vignette _vignette;
        private LensDistortion _lensDistortion;
        private ChromaticAberration _chromaticAberration;
        private CameraDistortionPPSSettings _cameraDistortion;
        private PostProcessVolume _volume;
        #endregion

        #region MonoBehaviour Functions
        private void Awake()
        {
            _volume = gameObject.GetComponent<PostProcessVolume>();
            _volume.profile.TryGetSettings(out _vignette);
            _volume.profile.TryGetSettings(out _lensDistortion);
            _volume.profile.TryGetSettings(out _chromaticAberration);
            _volume.profile.TryGetSettings(out _cameraDistortion);
            _volume.weight = 0;
        }

        private void OnEnable()
        {
            EventManager.Instance.Subscribe(EventManager.NameEvent.OnAbsorbedSubmodule, OnAbsorbedSubmodule);
            EventManager.Instance.Subscribe(EventManager.NameEvent.OnReturnedBoss, OnReturnedBoss);
        }

        private void OnDisable()
        {
            EventManager.Instance.Unsubscribe(EventManager.NameEvent.OnAbsorbedSubmodule, OnAbsorbedSubmodule);
            EventManager.Instance.Unsubscribe(EventManager.NameEvent.OnReturnedBoss, OnReturnedBoss);
        }
        #endregion

        #region Event Functions
        private void OnAbsorbedSubmodule(params object[] parameter)
        {
            AudioManager.Instance.PlayAudioClip(Sounds.SoundType.Hacking, transform.position);
            UIManager.Instance.ChangeStatus(false);

            _volume.weight = 1;

            StartCoroutine(EntryAbsorb());
            StartCoroutine(LensDistortion());
        }

        private void OnReturnedBoss(params object[] parameter)
        {
            UIManager.Instance.ChangeStatus(false);

            _volume.weight = 1;

            StartCoroutine(ExitAbsorb());
        }
        #endregion

        #region Private Functions
        private IEnumerator EntryAbsorb()
        {
            SetStatus(false);
            const float duration = 1.5f;
            const int steps = 60;

            for (var i = 0; i <= steps; i++)
            {
                _progress = Mathf.Lerp(0, 1, i / (float)steps);

                _cameraDistortion._NoiseScale.value = Mathf.Lerp(0, 15, _progress);
                _vignette.intensity.value = Mathf.Lerp(0, 1, _progress);
                _chromaticAberration.intensity.value = Mathf.Lerp(0, 1, _progress);

                yield return new WaitForSecondsRealtime(duration / steps);
            }

            SetStatus(true);
        }

        private IEnumerator LensDistortion()
        {
            SetStatus(false);
            var duration = .5f;
            var steps = 20;

            for (var i = 0; i <= steps; i++)
            {
                _lensDistortion.intensity.value = Mathf.Lerp(0, -70, i / (float)steps);
                yield return new WaitForSecondsRealtime(duration / steps);
            }

            duration = 1;
            steps = 40;
            for (var i = 0; i <= steps; i++)
            {
                _lensDistortion.intensity.value = Mathf.Lerp(0, 70, i / (float)steps);
                yield return new WaitForSecondsRealtime(duration / steps);
            }

            StartCoroutine(ExitAbsorb());
        }

        private IEnumerator ExitAbsorb()
        {
            const float duration = .5f;
            const int steps = 20;

            for (var i = 0; i <= steps; i++)
            {
                _progress = Mathf.Lerp(0, 1, i / (float)steps);

                _cameraDistortion._NoiseScale.value = Mathf.Lerp(15, 0, _progress);
                _vignette.intensity.value = Mathf.Lerp(1, 0, _progress);
                _lensDistortion.intensity.value = Mathf.Lerp(70, 0, _progress);
                _chromaticAberration.intensity.value = Mathf.Lerp(1, 0, _progress);

                yield return new WaitForSecondsRealtime(duration / steps);
            }

            _volume.weight = 0;
            EventManager.Instance.Trigger(EventManager.NameEvent.OnPostProcessFinished, true);
            SetStatus(true);
        }

        private static void SetStatus(bool status)
        {
            BossManager.Instance.ChangeStatus(status);
            UIManager.Instance.ChangeStatus(status);
            LevelManager.Instance.ChangeStatus(status);
        }
        #endregion
    }
}