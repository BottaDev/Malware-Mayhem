using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using MM.Events;
using MM.Gameplay;
using MM.Particles;

public class PlayerModel : Entity
{
    public float startingMovementSpeed;
    public float acceleration = 0.9f;
    [Header("Torso Parameters")] 
    [Range(1, 15)] public float torsoSpeed = 2f;
    public GameObject torso;
    [Header("Legs Parameters")]
    public GameObject legs;
    [Header("Arms Parameters")]
    public List<PlayerArm> leftArms = new List<PlayerArm>();
    public List<PlayerArm> rightArms = new List<PlayerArm>();
    public float armResetTime = 1f;
    [Header("Hack Parameters")]
    public LayerMask enemyAbsorbMask;
    public LayerMask moduleAbsorbMask;
    [Tooltip("The min distance the player could appear when return from a submodule fight")]
    [Range(0f, 10f)] public float minReturnDistance = 5f;
    [Tooltip("The max distance the player could appear when return from a submodule fight")]
    [Range(0f, 10f)] public float maxReturnDistance = 10f;
    [Range(0.1f, 5f)] public float absorbDistance = 3f;
    [Header("Camera Shake")]
    public float camZoomSpeed = .5f;
    public float minCamFOV = 45;
    public float maxCamFOV = 100;
    public float timeScaleSlow = .5f;
    public float timeScaleSpeed = 1;
    [Header("Buff Parameters")]
    public float healAmount = 25f;
    [Header("VFX")]
    public AbsorptionParticles mergeEffect;
    [Tooltip("The particle force field that is spawned when the player returns from a submodule fight")]
    public ParticleSystemForceField particleForceField;
    public GameObject corpsePrefab;
    public GameObject deathParticles;
    [Header("Submodule Parameters")] 
    public PlayerArm.ArmType startingArm = PlayerArm.ArmType.BasicArm;

    [Space(10)]
    public bool cantDie;

    private PlayerController _controller;
    
    protected override void Awake()
    {
        base.Awake();

        EventManager.Instance.Trigger(NameEvent.OnPlayerSpawned, true, this);
        _controller = GetComponent<PlayerController>();
        
        if (startingMovementSpeed <= movementSpeed)
            Debug.Log("Player's starting movement speed is lower than the base movement speed. This will cause the player to move slower than intended.");
    }

    private void Start()
    {
        EventManager.Instance.Subscribe(NameEvent.OnAbsorbedSubmodule, OnAbsorbedSubmodule);
        EventManager.Instance.Subscribe(NameEvent.OnReturnedBoss, OnReturnedBoss);
    }

    private void OnDrawGizmosSelected()
    {
        Gizmos.color = Color.green;
        Gizmos.DrawWireSphere(transform.position, absorbDistance);
    }

    public float GetCurrentHealth()
    {
        return _currentHp;
    }

    public bool IsFullHP()
    {
        return _currentHp == hp;
    }

    public int GetCurrentArm(bool isLeft)
    {
        return _controller.GetCurrentArm(isLeft);
    }

    public float GetArmEnergy(bool isLeft)
    {
        return _controller.GetArmEnergy(isLeft);
    }
    
    public void SetCurrentHealth(float heath)
    {
        _currentHp = heath;
    }
    
    public override void TakeDamage(float damage, PlayerArm.ArmType aType = PlayerArm.ArmType.None, bool showDamage = true)
    {
        if (showDamage)
            StartCoroutine(ShowDamage());
        
        _controller.TakeDamage(damage);
    }

    public bool GetLowLife()
    {
        return _controller.GetIfLowLife();
    }

    public override void KillEntity()
    {
        LevelManager.Instance.LoseLevel();
        base.KillEntity();
    }

    protected override IEnumerator ShowDamage()
    {
        EventManager.Instance.Trigger(NameEvent.OnPlayerDamaged);
        return base.ShowDamage();
    }

    private void OnAbsorbedSubmodule(params object[] parameters)
    {
        BackToBaseMaterial();
    }

    private void OnReturnedBoss(params object[] parameters)
    {
        BackToBaseMaterial();
    }

    private void OnDrawGizmos()
    {
        Gizmos.color = Color.magenta;
        Gizmos.DrawWireSphere(transform.position, absorbDistance);
    }
}
