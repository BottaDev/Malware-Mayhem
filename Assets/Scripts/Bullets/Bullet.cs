using Common;
using MM_ScriptableObjects;
using UnityEngine;
using UnityEngine.Serialization;

namespace Bullets
{
    public class Bullet : MonoBehaviour
    {
        #region Public Variables
        public Pool<Bullet> pool;
        [FormerlySerializedAs("bulletData")] public BulletData bulletDataData;
        #endregion
    
        #region Private Variables
        private TrailRenderer _trail;
        private float _spawnTime;
        #endregion

        #region MonoBehaviour Functions
        private void Awake()
        {
            _trail = GetComponent<TrailRenderer>();
        }
    
        public virtual void OnEnable()
        {
            _spawnTime = Time.time;
        }

        public virtual void Update()
        {
            if (_spawnTime + bulletDataData.timeToDestroy <= Time.time)
                ReturnToPool();
        }

        public virtual void FixedUpdate()
        {
            transform.Translate(Vector3.forward * (Time.deltaTime * bulletDataData.speed));
        }
        #endregion
    
        #region Events
        protected virtual void OnTriggerEnter(Collider other)
        {
            DestroyBullet(other.gameObject);
        }
        #endregion
    
        #region Private Functions
        protected virtual void DestroyBullet(GameObject other)
        {
            // Check if object is not in destroyMask
            if (bulletDataData.destroyMask != (bulletDataData.destroyMask | (1 << other.layer))) 
                return;
        
            var particles = Instantiate(bulletDataData.deathParticles, transform.position, Quaternion.identity);
            particles.transform.forward = -transform.forward;

            switch (other.layer)
            {
                // Enemy, Player
                case 8 or 9:
                    MakeDamage(other.GetComponent<Entity>());
                    break;
            
                // Submodule
                case 6:
                    MakeDamage(other.GetComponent<BossSubmodule>());
                    break;
            }
            
            ReturnToPool();
        }
    
        protected void MakeDamage(BossSubmodule module)
        {
            module.TransmitDamage(bulletDataData.damage, bulletDataData.bulletType);
        }
    
        protected void MakeDamage(Entity entity)
        {
            entity.TakeDamage(bulletDataData.damage, bulletDataData.bulletType);
        }

        protected void ReturnToPool()
        {
            if (!gameObject.activeInHierarchy) 
                return;
        
            if (pool != null)
                pool.ReturnToPool(this);
            else
                Destroy(gameObject);
        }
    
        private TrailRenderer GetTrail()
        {
            return _trail;
        }
        #endregion
    
        #region Public Functions
        /// <summary>
        /// Force to return to pool if needed
        /// </summary>
        public void ForceReturnToPool()
        {
            ReturnToPool();
        }

        public static void TurnOn(Bullet bullet)
        {
            var trail = bullet.GetTrail();
            if (trail != null)
                trail.enabled = true;
        
            if (bullet != null && bullet.gameObject != null)
                bullet.gameObject.SetActive(true);
        }
    
        public static void TurnOff(Bullet bullet)
        {
            var trail = bullet.GetTrail();
            if (trail != null)
            {
                trail.Clear();
                trail.enabled = false;
            }

            if (bullet != null && bullet.gameObject != null)
                bullet.gameObject.SetActive(false);
        }
        #endregion
    }
}
