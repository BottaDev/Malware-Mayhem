using System.Collections;
using Common;
using UnityEngine;

public class LevelManager : MonoBehaviourSingleton<LevelManager>
{
    [Header("Boss Parameters")]
    public GameObject bossSpawn;
    public Transform bossSpawnPosition;
    [Tooltip("The time that the boss will spawn after the player spawning")]
    public float initialSpawnTime = 8f;
    [Tooltip("The time that the boss will attack after spawning")] 
    public float initialAttackTime = 3.5f;

    [Header("Player Parameters")] 
    public Transform playerSpawnPosition;
    public PlayerSpawn playerSpawn;

    private bool _canRefresh = true;
    private PlayerModel _player;

    protected override void Awake()
    {
        base.Awake();

        if (playerSpawn != null && playerSpawnPosition != null)
            Instantiate(playerSpawn, playerSpawnPosition.transform.position, Quaternion.identity, transform);
#if UNITY_EDITOR
        // For testing purposes
        else
            _player = GameObject.FindWithTag("Player")?.GetComponent<PlayerModel>();
#endif
    }

    private void OnEnable()
    {
        m_Instance = this;
    }

    private void Start()
    {
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnPlayerSpawned, OnPlayerSpawned);
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnPostProcessFinished, OnPostProcessFinished);
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnTutorialSkip, SkipInitialWait);
        
        AudioManager.Instance.PlayMusic("Level 1-1");
        
        SetLevelData();
    }

    public void LoseLevel()
    {
        UIManager.Instance.StartFadeIn();
        
        //AudioManager.Instance.PlayMusic("LoseLevel");

        Invoke(nameof(ShowLoseScene), 2f);
    }

    public void WinLevel()
    {
        UIManager.Instance.StartFadeIn();

        //AudioManager.Instance.PlayMusic("WinLevel");
        
        Invoke(nameof(ShowWinScene), 2f);
    }

    public PlayerModel GetPlayer()
    {
        return _player;
    }

    private void ShowLoseScene()
    {
        ResetTimeScale();
        
        SceneLoader.ChangeLevel("LoseScene");
    }

    private void ShowWinScene()
    {
        ResetTimeScale();
        
        SceneLoader.ChangeLevel("WinScene");
    }

    private static void ResetTimeScale()
    {
        Time.timeScale = 1;        
    }
    
    private bool _mainBossSpawned;      // Prevent to spawn the boss again when the player returns to the main fight
    private void OnPlayerSpawned(params object[] parameters)
    {
        _player = (PlayerModel) parameters[1];
        
        Invoke(nameof(SpawnBoss), initialSpawnTime);
    }

    private void OnPostProcessFinished(params object[] parameters)
    {
        if(gameObject.activeInHierarchy)
            StartCoroutine(SetPlayer());
    }

    private void SkipInitialWait(params object[] parameters)
    {
        initialSpawnTime = 0;
        initialAttackTime = 0;
        
        SpawnBoss();
    }
    
    private void SpawnBoss()
    {
        if (_mainBossSpawned)
            return;
        
        if (bossSpawn != null && bossSpawnPosition != null)
            Instantiate(bossSpawn, bossSpawnPosition.transform.position, Quaternion.identity, transform);

        _mainBossSpawned = true;
        
        Invoke(nameof(TriggerBossAttack), initialAttackTime);
    }

    private void TriggerBossAttack()
    {
        EventManager.Instance.Trigger(EventManager.NameEvent.OnInitialAttackWait);
    }

    private IEnumerator SetPlayer()
    {
        yield return new WaitUntil(() => _canRefresh);
        
        _player = GameObject.FindWithTag("Player")?.GetComponent<PlayerModel>();
    }

    public void ChangeStatus(bool status)
    {
        _canRefresh = status;
    }
    
    /// <summary>
    /// Sets the current level in the DataManager
    /// </summary>
    private static void SetLevelData()
    {
        var currentLevel = UnityEngine.SceneManagement.SceneManager.GetActiveScene().name;
        DataManager.CurrentLevel = currentLevel;
    }
}
