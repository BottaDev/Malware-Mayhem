using System.Collections.Generic;
using System.Linq;
using UnityEngine;

public class RangeManager : MonoBehaviour
{
    public static RangeManager Instance = null;
    
    private List<RangeIndicator> _indicators = new List<RangeIndicator>();
    private PlayerModel _player;

    private void Awake()
    {
        if (Instance == null)
            Instance = this;
    }

    private void Start()
    {
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnPlayerSpawned, OnPlayerSpawned);
    }

    private void Update()
    {
        CheckRangeDistance();
    }

    private RangeIndicator _closestIndicator;
    private void CheckRangeDistance()
    {
        if (_player == null)
            return;
        
        RangeIndicator closest = null;
        
        var closestDistance = float.MaxValue;
        foreach (var indicator in _indicators)
        {
            if (indicator == null || !indicator.isActiveAndEnabled)
                continue;
            
            var distance = Vector3.Distance(_player.transform.position, indicator.transform.position);
            if (distance <= _player.absorbDistance)
            {
                if (!(distance < closestDistance)) 
                    continue;
            
                closest = indicator;
                closestDistance = distance;   
            }
        }
        
        if (closest == _closestIndicator)
            return;
        
        _closestIndicator = closest;

        _indicators.Where(x => x != null && x.isActiveAndEnabled).ToList()
            .ForEach(indicator => indicator.SetColor(indicator == closest && closestDistance <= _player.absorbDistance));
    }
    
    private void OnPlayerSpawned(params object[] parameters)
    {
        _player = (PlayerModel) parameters[1];
    }
    
    public void AddIndicator(RangeIndicator indicator)
    {
        _indicators.Add(indicator);
    }
}
