using MM.Cam;
using MM.Inputs;
using MM.Sound;
using MM.UI;
#if UNITY_EDITOR
using UnityEditor.Timeline;
#endif
using UnityEngine;

namespace MM.Entities.Player.Arms
{
    public class PlayerArm : Arm
    {
        #region Private Variables
        [Header("PlayerArm Parameters")]
        [SerializeField] protected float fireRate;
        [SerializeField] protected Transform shotSpawn;
        [SerializeField] protected GameObject muzzleShotParticles;
        [Tooltip("The percentage that the arm will lose")]
        [SerializeField, Range(min: 0, max: 100)] protected float percentageLoss = 10f;
        [SerializeField] protected ArmType armType = ArmType.BasicArm;
    
        [SerializeField] private PlayerModel _model;
        [SerializeField] protected PlayerController _controller;

        private Renderer _renderer;     // Used for merging
        private const float _totalEnergy = 100f;
        private float _currentEnergy;
    
        protected CameraShaker _cameraShaker;
        protected float _currentFireRate;
        #endregion
        
        #region MonoBehaviour Functions
        private void Awake()
        {
            _currentEnergy = _totalEnergy;
            _renderer = GetComponentInChildren<Renderer>();

            _cameraShaker = GetComponent<CameraShaker>();
        }
        
        #endregion
        
        #region Events
        private void OnEnable()
        {
            // Used in the case when the player changed the arm and then the energy of it is 0, show again the arm renderer
            if (!_renderer.enabled)
                _renderer.enabled = true;
        }
        private void OnDrawGizmos()
        {
            var transform1 = transform;
            var position = transform1.position;
            var forward = transform1.forward;
        
            Gizmos.color = Color.green;
        
            Gizmos.DrawRay(position + transform1.right * arm.autoAimArea/2,  forward * arm.autoAimRange);
            Gizmos.DrawRay(position + transform.right * -arm.autoAimArea/2, forward * arm.autoAimRange);
        }
        #endregion

        #region Private Functions
        protected void SubtractEnergy()
        {
            _currentEnergy -= percentageLoss;
        
            UIManager.Instance.SetArmEnergy(isLeft, _currentEnergy);
        }
    
        protected override void Rotate()
        {
            var position = transform.position;
            
            // Create a new target point in world coordinates based on the mouse position
            var point = new Vector3(InputManager.Instance.mousePosition.x, position.y, InputManager.Instance.mousePosition.z);
            
            // Calculate the angle between the new target point and the torso's forward direction
            var angle = Vector3.SignedAngle(point - position, _model.GetTorso().transform.forward, Vector3.up); 
            angle *= isLeft ? 1 : -1;

            // Check if the calculated angle is within the allowed range for arm rotation
            if (!(angle >= arm.minAngle) || 
                !(angle <= arm.maxAngle)) 
                return;
            
            // Rotate the arm to look at the new target point, effectively aiming in that direction
            transform.LookAt(point);
        }
    
        private void Shoot()
        {
            if (this == null ||
                !gameObject.activeInHierarchy || 
                _controller == null)
                return;

            var bullet = _controller.bulletPool.Get();

            if (bullet == null)
                return;
        
            bullet.pool = _controller.bulletPool;
            bullet.transform.position = shotSpawn.position;
            bullet.transform.eulerAngles = transform.eulerAngles;

            if (muzzleShotParticles != null)
            {
                var mz = Instantiate(muzzleShotParticles, shotSpawn.position, Quaternion.identity);
            
                mz.transform.forward = transform.forward.normalized;
                mz.transform.parent = shotSpawn;
            }

            SubtractEnergy();
        
            _cameraShaker.ShakeCamera();

            AudioManager.Instance.PlayAudioClip(Sounds.SoundType.BasicShot, shotSpawn.position);

            _currentFireRate = fireRate;
        }
        #endregion
    
        #region Public Functions
        
        /// <summary>
        /// Set the current energy value of the arm when the player
        /// return to the main boss fight
        /// </summary>
        public void ForceUIBarValue()
        {
            UIManager.Instance.SetArmEnergy(isLeft, _currentEnergy);
        }
        
        /// <summary>
        /// Sets the energy of the arm to the total energy
        /// </summary>
        public void ResetEnergy()
        {
            _currentEnergy = _totalEnergy;
        }
    
        public float GetDuration()
        {
            return _currentEnergy;
        }
        
        public override void MakeAction()
        {
            if (_currentFireRate <= 0)
                Shoot();
        }
    
        public override void Update()
        {
            base.Update();
            _currentFireRate -= Time.deltaTime;
        }
        
        public ArmType GetArmType()
        {
            return armType;
        }
        #endregion
        
        public enum ArmType
        {
            None,
            BasicArm,
            LaserArm,
            BurstArm,
            ShieldArm,
            BladeArm
        }
    }
}
