using MM.Entities.Player.Arms;
using MM.Entities.Player;
using MM.Gameplay;
using UnityEngine;

namespace MM.Entities.Enemies.Bosses
{
    public class BossArm : Arm
    {
        #region Private Variables
        [Header("BossArm Parameters")]
        [SerializeField]protected float rotationSpeed = 2f;
        [SerializeField] private Transform shotSpawn;
        [Header("Pivot Parameters")]
        [SerializeField] protected GameObject torso;
        [SerializeField] protected Transform restDirection;
    
        protected PlayerModel _player;
        protected BossSubmodule _bossSubmodule;
        protected bool _lookAtObject;
        protected GameObject _objectToLook;
        #endregion

        #region MonoBehaviour Functions
        private void Start()
        {
            _bossSubmodule = GetComponent<BossSubmodule>();
        }
        #endregion

        #region Private Functions
        protected override void Rotate()
        {
            if (_bossSubmodule.GetIsStunned())
                return;

            Vector3 point;
            if (!CheckPlayer() && _lookAtObject)
                point = _objectToLook == null ? _player.transform.position : _objectToLook.transform.position;
            else
                point = restDirection.position;

            var angle = Vector3.SignedAngle(point - transform.position, torso.transform.forward, Vector3.up); 
            angle *= isLeft ? 1 : -1;

            if (!(angle >= arm.minAngle) || !(angle <= arm.maxAngle)) 
                return;
        
            var pivotTransform = torso.transform.position;

            var p = transform.position;
            var nextForward = new Vector3(point.x, p.y, point.z) - 
                              new Vector3(p.x, p.y, p.z);
        
            var aimTarget = GetAutoAimTarget(nextForward);
            if (aimTarget != Vector3.zero)
            {
                pivotTransform = transform.position;
                point = aimTarget;
            }

            var transform1 = transform;
            var position1 = transform1.position;
        
            var upAxis =  transform1.rotation * Vector3.up;
            var rot = Quaternion.LookRotation(
                new Vector3(point.x, position1.y, point.z) -
                new Vector3(pivotTransform.x, position1.y, pivotTransform.z), upAxis);
        
            transform.rotation = Quaternion.Slerp(transform.rotation, rot, Time.deltaTime * rotationSpeed);
        }
    
        /// <summary>
        /// Check if the player exists in the level
        /// </summary>
        /// <returns></returns>
        protected bool CheckPlayer()
        {
            if (_player == null)
                _player = LevelManager.Instance.Player;

            return _player == null;
        }
        #endregion
    
        #region Public Functions
        public void SetLookAtObject(bool lookAtObject)
        {
            _lookAtObject = lookAtObject;
        }

        public void SetObjectToLook(GameObject obj)
        {
            _objectToLook = obj;
        }
        
        public Transform GetShotSpawn()
        {
            return shotSpawn;
        }
        #endregion
    }
}
