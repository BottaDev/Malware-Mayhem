using System.Collections;
using MM.Sound;
using UnityEngine;

namespace MM.Entities.Player.Arms
{
    public class BurstArm : PlayerArm
    {
        #region Private Variables
        [Header("BurstArm Parameters")]
        [SerializeField] private int shotsCount = 3;
        [SerializeField] private float timeBetweenShot = 0.1f;
        #endregion
    
        #region Public Functions
        public override void MakeAction()
        {
            if (_currentFireRate <= 0 && gameObject.activeSelf)
                Attack();
        }
        #endregion

        #region Private Functions
        private void Attack()
        {
            if (this == null)
                return;

            StartCoroutine(nameof(Shoot));
            _currentFireRate = fireRate;
        }
        
        private IEnumerator Shoot()
        {
            if (this == null ||
                !gameObject.activeInHierarchy || 
                _controller == null)
                yield return null;

            SubtractEnergy();
        
            for (var i = 0; i < shotsCount; i++)
            {
                if (muzzleShotParticles != null)
                {
                    var mz = Instantiate(muzzleShotParticles, shotSpawn.position, Quaternion.identity);
                
                    mz.transform.forward = transform.forward.normalized;
                    mz.transform.parent = shotSpawn;
                }

                var bullet = _controller.assaultBulletPool.Get();
            
                if (bullet == null)
                    yield return null;
                
                bullet.pool = _controller.assaultBulletPool;
                bullet.transform.position = shotSpawn.position;
                bullet.transform.eulerAngles = transform.eulerAngles;
                
                _cameraShaker.ShakeCamera();
            
                AudioManager.Instance.PlayAudioClip(Sounds.SoundType.BlueShot, shotSpawn.position);
                yield return new WaitForSeconds(timeBetweenShot);
            }

            yield return null;
        }
        #endregion
    }
}
