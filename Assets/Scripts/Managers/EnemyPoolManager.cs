using System;
using System.Collections;
using System.Collections.Generic;
using Bullets;
using Bullets.Factories;
using Common;
using UnityEngine;

public class EnemyPoolManager : MonoBehaviourSingleton<EnemyPoolManager>
{
    // Enemy
    public Pool<Bullet> assaultBulletPool;
    public Pool<Bullet> shieldBulletPool;
    
    
    // Boss
    public Pool<Bullet> rapidGreenBossBulletPool;
    public Pool<Bullet> mediumGreenBossBulletPool;
    public Pool<Bullet> slowGreenBossBulletPool;
    
    public Pool<Bullet> rapidBlueBossBulletPool;
    public Pool<Bullet> mediumBlueBossBulletPool;
    public Pool<Bullet> slowBlueBossBulletPool;
    
    public Pool<Bullet> rapidRedBossBulletPool;
    public Pool<Bullet> mediumRedBossBulletPool;
    public Pool<Bullet> slowRedBossBulletPool;
    
    public Pool<Bullet> rapidOrangeBossBulletPool;
    public Pool<Bullet> mediumOrangeBossBulletPool;
    public Pool<Bullet> slowOrangeBossBulletPool;

    public Pool<Bullet> cannonBallPool;

    private void Start()
    {
        CreatePools();
    }

    private void CreatePools()
    {
        var poolTransform = GameObject.Find("Pool").GetComponent<Transform>();
        if (poolTransform == null)
            Debug.LogError("Pool Object not found in scene");
        
        // ENEMY
        var assaultBulletFactory = new EnemyAssaultBulletFactory(poolTransform);
        assaultBulletPool = new Pool<Bullet>(assaultBulletFactory.Create, Bullet.TurnOn, Bullet.TurnOff, 10);
        
        var shieldBulletFactory = new EnemyShieldBulletFactory(poolTransform);
        shieldBulletPool = new Pool<Bullet>(shieldBulletFactory.Create, Bullet.TurnOn, Bullet.TurnOff, 4);
        
        
        // BOSS
        var greenRapidFac = new RapidBossBulletFactory(poolTransform, RapidBossBulletFactory.BulletColor.Green);
        rapidGreenBossBulletPool = new Pool<Bullet>(greenRapidFac.Create, Bullet.TurnOn, Bullet.TurnOff, 10);
        
        var greenMediumFac = new MediumBossBulletFactory(poolTransform, MediumBossBulletFactory.BulletColor.Green);
        mediumGreenBossBulletPool = new Pool<Bullet>(greenMediumFac.Create, Bullet.TurnOn, Bullet.TurnOff, 10);
        
        var greenSlowFac = new SlowBossBulletFactory(poolTransform, SlowBossBulletFactory.BulletColor.Green);
        slowGreenBossBulletPool = new Pool<Bullet>(greenSlowFac.Create, Bullet.TurnOn, Bullet.TurnOff, 10);
        
        var blueRapidFac = new RapidBossBulletFactory(poolTransform, RapidBossBulletFactory.BulletColor.Blue);
        rapidBlueBossBulletPool = new Pool<Bullet>(blueRapidFac.Create, Bullet.TurnOn, Bullet.TurnOff, 10);
        
        var blueMediumFac = new MediumBossBulletFactory(poolTransform, MediumBossBulletFactory.BulletColor.Blue);
        mediumBlueBossBulletPool = new Pool<Bullet>(blueMediumFac.Create, Bullet.TurnOn, Bullet.TurnOff, 10);
        
        var blueSlowFac = new SlowBossBulletFactory(poolTransform, SlowBossBulletFactory.BulletColor.Blue);
        slowBlueBossBulletPool = new Pool<Bullet>(blueSlowFac.Create, Bullet.TurnOn, Bullet.TurnOff, 10);
        
        var redRapidFac = new RapidBossBulletFactory(poolTransform, RapidBossBulletFactory.BulletColor.Red);
        rapidRedBossBulletPool = new Pool<Bullet>(redRapidFac.Create, Bullet.TurnOn, Bullet.TurnOff, 10);
        
        var redMediumFac = new MediumBossBulletFactory(poolTransform, MediumBossBulletFactory.BulletColor.Red);
        mediumRedBossBulletPool = new Pool<Bullet>(redMediumFac.Create, Bullet.TurnOn, Bullet.TurnOff, 10);
        
        var redSlowFac = new SlowBossBulletFactory(poolTransform, SlowBossBulletFactory.BulletColor.Red);
        slowRedBossBulletPool = new Pool<Bullet>(redSlowFac.Create, Bullet.TurnOn, Bullet.TurnOff, 10);
        
        var orangeRapidFac = new RapidBossBulletFactory(poolTransform, RapidBossBulletFactory.BulletColor.Orange);
        rapidOrangeBossBulletPool = new Pool<Bullet>(orangeRapidFac.Create, Bullet.TurnOn, Bullet.TurnOff, 10);
        
        var orangeMediumFac = new MediumBossBulletFactory(poolTransform, MediumBossBulletFactory.BulletColor.Orange);
        mediumOrangeBossBulletPool = new Pool<Bullet>(orangeMediumFac.Create, Bullet.TurnOn, Bullet.TurnOff, 10);
        
        var orangeSlowFac = new SlowBossBulletFactory(poolTransform, SlowBossBulletFactory.BulletColor.Orange);
        slowOrangeBossBulletPool = new Pool<Bullet>(orangeSlowFac.Create, Bullet.TurnOn, Bullet.TurnOff, 10);
        
        var cannonBallFac = new CannonBallFactory(poolTransform);
        cannonBallPool = new Pool<Bullet>(cannonBallFac.Create, Bullet.TurnOn, Bullet.TurnOff, 1);
    }
    
    public Bullet GetBossBullet(BossBulletType bulletType)
    {
        Bullet bullet;
        
        switch (bulletType)
        {
            case BossBulletType.RapidGreen:
                bullet = rapidGreenBossBulletPool.Get();
                bullet.pool = rapidGreenBossBulletPool;
                break;
            case BossBulletType.MediumGreen:
                bullet = mediumGreenBossBulletPool.Get();
                bullet.pool = mediumGreenBossBulletPool;
                break;
            case BossBulletType.SlowGreen:
                bullet = slowGreenBossBulletPool.Get();
                bullet.pool = slowGreenBossBulletPool;
                break;
            
            case BossBulletType.RapidRed:
                bullet = rapidRedBossBulletPool.Get();
                bullet.pool = rapidRedBossBulletPool;
                break;
            case BossBulletType.MediumRed:
                bullet = mediumRedBossBulletPool.Get();
                bullet.pool = mediumRedBossBulletPool;
                break;
            case BossBulletType.SlowRed:
                bullet = slowRedBossBulletPool.Get();
                bullet.pool = slowRedBossBulletPool;
                break;
            
            case BossBulletType.RapidBlue:
                bullet = rapidBlueBossBulletPool.Get();
                bullet.pool = rapidBlueBossBulletPool;
                break;
            case BossBulletType.MediumBlue:
                bullet = mediumBlueBossBulletPool.Get();
                bullet.pool = mediumBlueBossBulletPool;
                break;
            case BossBulletType.SlowBlue:
                bullet = slowBlueBossBulletPool.Get();
                bullet.pool = slowBlueBossBulletPool;
                break;
            
            case BossBulletType.RapidOrange:
                bullet = rapidOrangeBossBulletPool.Get();
                bullet.pool = rapidOrangeBossBulletPool;
                break;
            case BossBulletType.MediumOrange:
                bullet = mediumOrangeBossBulletPool.Get();
                bullet.pool = mediumOrangeBossBulletPool;
                break;
            case BossBulletType.SlowOrange:
                bullet = slowOrangeBossBulletPool.Get();
                bullet.pool = slowOrangeBossBulletPool;
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }

        return bullet;
    }
    
    public Bullet GetCannonBall()
    {
        var bullet = cannonBallPool.Get();
        bullet.pool = cannonBallPool;
        
        return bullet;
    }
}
