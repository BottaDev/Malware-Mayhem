using System.Collections;
using System.Collections.Generic;
using MM.Entities.Player.Arms;
using MM.Events;
using MM.Gameplay;
using MM.Particles;
using UnityEngine;

namespace MM.Entities.Player
{
    public class PlayerModel : Entity
    {
        #region Private Variables
        [SerializeField] private float startingMovementSpeed = 2f;
        [SerializeField] private float acceleration = 0.8f;
        
        [Header("Torso Parameters")] 
        [SerializeField, Range(1, 15)] private float torsoSpeed = 2f;
        
        [SerializeField] private GameObject torso;
        [Header("Legs Parameters")]
        [SerializeField] private GameObject legs;
        
        [Header("Arms Parameters")]
        [SerializeField] private List<PlayerArm> leftArms = new List<PlayerArm>();
        [SerializeField] private List<PlayerArm> rightArms = new List<PlayerArm>();
        [SerializeField] private float armResetTime = 1f;
        
        [Header("Hack Parameters")]
        [SerializeField] private LayerMask enemyAbsorbMask;
        [SerializeField] private LayerMask moduleAbsorbMask;
        
        [Tooltip("The min distance the player could appear when return from a submodule fight")]
        [SerializeField, Range(0f, 10f)] private float minReturnDistance = 4f;
        [Tooltip("The max distance the player could appear when return from a submodule fight")]
        [SerializeField, Range(0f, 10f)] private float maxReturnDistance = 10f;
        [SerializeField, Range(0.1f, 5f)] private float absorbDistance = 3f;
        
        [Header("Camera Shake")]
        [SerializeField] private float camZoomSpeed = 1.5f;
        [SerializeField] private float minCamFOV = 45;
        [SerializeField] private float maxCamFOV = 100;
        [SerializeField] private float timeScaleSlow = 0f;
        [SerializeField] private float timeScaleSpeed = 2f;
        
        [Header("Buff Parameters")]
        [SerializeField] private float healAmount = 4f;
        
        [Header("VFX")]
        [SerializeField] private AbsorptionParticles mergeEffect;
        
        [Tooltip("The particle force field that is spawned when the player returns from a submodule fight")]
        [SerializeField] private ParticleSystemForceField particleForceField;
        [SerializeField] private GameObject corpsePrefab;
        [SerializeField] private GameObject deathParticles;
        
        [Header("Submodule Parameters")] 
        [SerializeField] private PlayerArm.ArmType startingArm = PlayerArm.ArmType.BasicArm;

        [Space(10)]
        [SerializeField] private bool cantDie;

        private PlayerController _controller;
        #endregion

        #region MonoBehaviour Functions
        private void Start()
        {
            EventManager.Instance.Trigger(NameEvent.OnPlayerSpawned, true, this);
            _controller = GetComponent<PlayerController>();
        
            if (startingMovementSpeed <= movementSpeed)
            {
                Debug.Log("Player's starting movement speed is lower than the base movement speed. This will cause the" +
                          " player to move slower than intended.");
            }
            
            EventManager.Instance.Subscribe(NameEvent.OnAbsorbedSubmodule, OnAbsorbedSubmodule);
            EventManager.Instance.Subscribe(NameEvent.OnReturnedBoss, OnReturnedBoss);
        }
        
        private void OnDrawGizmosSelected()
        {
            Gizmos.color = Color.green;
            Gizmos.DrawWireSphere(transform.position, absorbDistance);
        }
        
        private void OnDrawGizmos()
        {
            Gizmos.color = Color.magenta;
            Gizmos.DrawWireSphere(transform.position, absorbDistance);
        }
        #endregion

        #region Public Functions
        public float GetCurrentHealth()
        {
            return _currentHp;
        }

        public bool IsFullHP()
        {
            return _currentHp == hp;
        }

        public int GetCurrentArm(bool isLeft)
        {
            return _controller.GetCurrentArm(isLeft);
        }

        public float GetArmEnergy(bool isLeft)
        {
            return _controller.GetArmEnergy(isLeft);
        }
    
        public void SetCurrentHealth(float heath)
        {
            _currentHp = heath;
        }
    
        public override void TakeDamage(float damage, PlayerArm.ArmType aType = PlayerArm.ArmType.None, bool showDamage = true)
        {
            if (showDamage)
                StartCoroutine(ShowDamage());
        
            _controller.TakeDamage(damage);
        }

        public bool GetLowLife()
        {
            return _controller.GetIfLowLife();
        }

        public override void KillEntity()
        {
            LevelManager.Instance.LoseLevel();
            base.KillEntity();
        }
        
        public float GetAcceleration()
        {
            return acceleration;
        }
        
        public float GetStartingMovementSpeed()
        {
            return startingMovementSpeed;
        }
        
        public bool GetCantDie()
        {
            return cantDie;
        }

        public float GetAbsorbDistance()
        {
            return absorbDistance;
        }

        public float GetCamZoomSpeed()
        {
            return camZoomSpeed;
        }

        public float GetMinCamFOV()
        {
            return minCamFOV;
        }

        public float GetMaxCamFOV()
        {
            return maxCamFOV;
        }

        public float GetTimeScaleSlow()
        {
            return timeScaleSlow;
        }

        public float GetTimeScaleSpeed()
        {
            return timeScaleSpeed;
        }
        
        public GameObject GetTorso()
        {
            return torso;
        }
        
        public GameObject GetLegs()
        {
            return legs;
        }
        
        public float GetHealAmount()
        {
            return healAmount;
        }
        
        public float GetArmResetTime()
        {
            return armResetTime;
        }
        
        public PlayerArm.ArmType GetStartingArm()
        {
            return startingArm;
        }
        
        public AbsorptionParticles GetMergeEffect()
        {
            return mergeEffect;
        }
        
        public LayerMask GetModuleAbsorbMask()
        {
            return moduleAbsorbMask;
        }
        
        public LayerMask GetEnemyAbsorbMask()
        {
            return enemyAbsorbMask;
        }
        
        public List<PlayerArm> GetLeftArms()
        {
            return leftArms;
        }
        public List<PlayerArm> GetRightArms()
        {
            return rightArms;
        }
        
        public float GetTorsoSpeed()
        {
            return torsoSpeed;
        }
        
        public GameObject GetCorpsePrefab()
        {
            return corpsePrefab;
        }
        public GameObject GetDeathParticles()
        {
            return deathParticles;
        }
        
        public float GetMinReturnDistance()
        {
            return minReturnDistance;
        }
        
        public float GetMaxReturnDistance()
        {
            return maxReturnDistance;
        }
        
        /// <summary>
        /// Returns the particle force field that is spawned when the player returns from a submodule fight
        /// </summary>
        /// <returns></returns>
        public ParticleSystemForceField GetParticleForceFieldObj()
        {
            return particleForceField;
        }
        #endregion

        #region Private Functions
        protected override IEnumerator ShowDamage()
        {
            EventManager.Instance.Trigger(NameEvent.OnPlayerDamaged);
            return base.ShowDamage();
        }
        #endregion
        
        #region Events
        private void OnAbsorbedSubmodule(params object[] parameters)
        {
            RestoreToOriginalMaterials();
        }

        private void OnReturnedBoss(params object[] parameters)
        {
            RestoreToOriginalMaterials();
        }
        #endregion
    }
}
