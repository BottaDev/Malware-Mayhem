using System.Collections.Generic;
using MM.Bullets;
using MM.Common;
using MM.Events;
using UnityEngine;

namespace MM.Entities.Enemies.Bosses.E_Vast.SubmoduleBosses
{
    /// <summary>
    /// Manage the individual spread bosses of E-Vast
    /// </summary>
    public class SpreadManager : MonoBehaviour
    {
        #region Private Variables
        [Header("External Shoots")] 
        [SerializeField] private BossBulletType bulletPrefab = BossBulletType.MediumRed;
        [SerializeField] private int bulletsAccount;
        [SerializeField] private float fireRate;
        [SerializeField] private float speedRotation;
        private const float _radius = 27;
        private const float _rotationPerSecond = 90;
        private const float _maxAngle = 360f;
        private float _currentFireRate;
        private float _accumulatedRotation;
    
        [Header("Spread bosses")]
        [SerializeField] private List<SpreadBoss> spreadBoss;
        private int _submoduleIndex;
        #endregion

        #region MonoBehaviour Functions
        private void Start()
        {
            SetTime();
        }

        private void Update()
        {
            if (_currentFireRate <= 0)
            {
                Shoot();
                SetTime();
            }
            else
            {
                _currentFireRate -= Time.unscaledDeltaTime;
            }
        
            _accumulatedRotation += Time.deltaTime * _rotationPerSecond;
            if (_accumulatedRotation >= _maxAngle)
                _accumulatedRotation  = 0;
        
            transform.RotateAround(transform.position, Vector3.up, speedRotation * Time.deltaTime);
        }
        #endregion
        
        #region Public Functions
        public void SpreadDefeated(int index)
        {
            _submoduleIndex = index;
            Invoke(nameof(CheckSpread), .1f);
        }
        #endregion

        #region Private Functions
        private void Shoot()
        {
            var angle = _maxAngle / bulletsAccount;
            for (var i = 0; i < bulletsAccount; i++)
            {
                var rotation = Quaternion.AngleAxis(i * angle + _accumulatedRotation, Vector3.up);

                var direction = rotation * Vector3.forward;
                var position = transform.position + (direction * _radius);

                // Fix the Y of the spawn
                const float yAxis = 1f;
            
                position = new Vector3(position.x, yAxis, position.z);
                Bullet bullet = null;

                switch (bulletPrefab)
                {
                    case BossBulletType.RapidRed:
                        bullet = EnemyPoolManager.Instance.rapidRedBossBulletPool.Get();
                        bullet.pool = EnemyPoolManager.Instance.rapidRedBossBulletPool;
                        break;
                    case BossBulletType.MediumRed:
                        bullet = EnemyPoolManager.Instance.mediumRedBossBulletPool.Get();
                        bullet.pool = EnemyPoolManager.Instance.mediumRedBossBulletPool;
                        break;
                    case BossBulletType.SlowRed:
                        bullet = EnemyPoolManager.Instance.slowRedBossBulletPool.Get();
                        bullet.pool = EnemyPoolManager.Instance.slowRedBossBulletPool;
                        break;
                }

                if(bullet.bulletDataData.speed > 0)
                    bullet.bulletDataData.speed *= -1;
                bullet.transform.position = position;
                bullet.transform.rotation = rotation;
            }
        }
        
        private void CheckSpread()
        {
            for (var i = 0; i < spreadBoss.Count; i++)
            {
                if (spreadBoss[i] == null)
                {
                    spreadBoss.Remove(spreadBoss[i]);
                }
            }

            if (spreadBoss.Count == 0)
            {
                EventManager.Instance.Trigger(NameEvent.OnReturnedBoss, true, _submoduleIndex);
            }
        }

        private void SetTime()
        {
            _currentFireRate = fireRate;
        }
        #endregion
    }
}
