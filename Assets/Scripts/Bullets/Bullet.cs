using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using Unity.VisualScripting;
using UnityEngine;

public class Bullet : MonoBehaviour
{
    public Pool<Bullet> pool;
    public Bullets bulletData; 
    private TrailRenderer _trail;
    private float _spawnTime;

    private void Awake()
    {
        _trail = GetComponent<TrailRenderer>();
    }
    
    public virtual void OnEnable()
    {
        _spawnTime = Time.time;
    }

    public virtual void Update()
    {
        if (_spawnTime + bulletData.timeToDestroy <= Time.time)
            ReturnToPool();
    }

    public virtual void FixedUpdate()
    {
        transform.Translate(Vector3.forward * (Time.deltaTime * bulletData.speed));
    }

    protected virtual void OnTriggerEnter(Collider other)
    {
        DestroyBullet(other.gameObject);
    }
    
    private void DestroyBullet(GameObject other)
    {
        // Check if object is not in destroyMask
        if (bulletData.destroyMask != (bulletData.destroyMask | (1 << other.layer))) 
            return;
        
        var particles = Instantiate(bulletData.deathParticles, transform.position, Quaternion.identity);
        particles.transform.forward = -transform.forward;

        switch (other.layer)
        {
            // Enemy, Player
            case 8 or 9:
                MakeDamage(other.GetComponent<Entity>());
                break;
            
            // Submodule
            case 6:
                MakeDamage(other.GetComponent<BossSubmodule>());
                break;
        }
            
        ReturnToPool();
    }
    
    protected void MakeDamage(BossSubmodule module)
    {
        module.TransmitDamage(bulletData.damage, bulletData.bulletType);
    }
    
    protected void MakeDamage(Entity entity)
    {
        entity.TakeDamage(bulletData.damage, bulletData.bulletType);
    }

    private void ReturnToPool()
    {
        if (!gameObject.activeInHierarchy) 
            return;
        
        if (pool != null)
            pool.ReturnToPool(this);
        else
            Destroy(gameObject);
    }

    public void ForceReturnToPool()
    {
        ReturnToPool();
    }
    
    private TrailRenderer GetTrail()
    {
        return _trail;
    }

    public static void TurnOn(Bullet bullet)
    {
        var trail = bullet.GetTrail();
        if (trail != null)
            trail.enabled = true;
        
        if (bullet != null && bullet.gameObject != null)
            bullet.gameObject.SetActive(true);
    }
    
    public static void TurnOff(Bullet bullet)
    {
        var trail = bullet.GetTrail();
        if (trail != null)
        {
            trail.Clear();
            trail.enabled = false;
        }

        if (bullet != null && bullet.gameObject != null)
            bullet.gameObject.SetActive(false);
    }
}
