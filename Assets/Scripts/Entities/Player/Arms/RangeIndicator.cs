using MM.Gameplay;
using UnityEngine;

[RequireComponent(typeof(LineRenderer))]
public class RangeIndicator : MonoBehaviour
{
    [SerializeField, Range(0,50)] private int segments = 25;
    [SerializeField, Range(0.1f, 1f)] private float lineWidth = 0.5f;

    private LineRenderer _line;
    [SerializeField, Tooltip("This value is usually the same as the action range in the requested object.")] 
    private float range;
    [SerializeField, Tooltip("Some objects need to be multiplied by this variable to be more accurate, otherwise leave in 1")] 
    private float multiplier = 3.3f;
    [Space]
    [SerializeField] private bool isSubmodule;
    [Space]
    [SerializeField] private Material normalMat;
    [SerializeField] private Material highlightedMat;
    
    private void OnEnable()
    {
        // Reset the color when the object is enabled
        if (isSubmodule)
            SetColor(false);
    }
    
    private void Awake()
    {
        _line = GetComponent<LineRenderer>();
    }

    private void Start ()
    {
        // Check the type of the object that is using this script
        var isSubmodule = false;
        if (GetComponentInParent<BossSubmodule>())
            isSubmodule = true;
        else if (!GetComponentInParent<Enemy>())
            Debug.LogError("This object is not a child of an Enemy or BossSubmodule object. Please fix this.");

        RangeManager.Instance.AddIndicator(this, isSubmodule);

        _line.positionCount = segments + 1;
        _line.useWorldSpace = false;
        _line.widthMultiplier = lineWidth;
        
        CreatePoints ();
    }

    private void CreatePoints ()
    {
        var angle = 20f;
        const float yPos = -1f;
        var radius = range * multiplier;
        
        for (var i = 0; i < (segments + 1); i++)
        {
            var x = Mathf.Sin(Mathf.Deg2Rad * angle) * radius;
            var z = Mathf.Cos(Mathf.Deg2Rad * angle) * radius;

            _line.SetPosition(i,new Vector3(x, yPos, z));

            angle += (360f / segments);
        }
    }

    /// <summary>
    /// Set the color of the line renderer if the object is the closest one to the player
    /// </summary>
    /// <param name="closest"></param>
    public void SetColor(bool closest)
    {
        _line.material = closest ? highlightedMat : normalMat;
    }
}
