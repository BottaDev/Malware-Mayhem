using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

public class PlayerModel : Entity
{
    public float acceleration = 0.9f;
    [Header("Torso Parameters")] 
    [Range(1, 15)]public float torsoSpeed = 2f;
    public GameObject torso;
    [Header("Legs Parameters")]
    public GameObject legs;
    [Header("Arms Parameters")] 
    public float finisherDistance = 2f;
    public float launchRate = 12f;
    public List<ArmsSet> leftArms = new List<ArmsSet>();
    public List<ArmsSet> rightArms = new List<ArmsSet>();
    public float launchDistance = 6f;
    public float armResetTime = 1f;
    [Header("Absorb Parameters")]
    public float camZoomSpeed = .5f;
    public float minCamFOV = 45;
    public float maxCamFOV = 100;
    public float timeScaleSlow = .5f;
    public float timeScaleSpeed = 1;
    [Header("Buff Parameters")]
    public float healAmount = 25f;
    /*[Header("Dash Parameters")]
    public float dashRate = 3f;
    public float dashDistance = 4f;
    public float dashDuration = 0.1f;*/
    [Header("VFX")]
    public GameObject dustParticle;
    public Transform particlePosition;
    public ParticleSystemForceField leftArmParticleForceField;
    public ParticleSystemForceField rightArmParticleForceField;
    public GameObject corpsePrefab;
    public GameObject deathParticles;

    private PlayerController _controller;
    
    protected override void Awake()
    {
        base.Awake();
        EventManager.Instance.Trigger("OnPlayerSpawned", true);
        _controller = GetComponent<PlayerController>();
    }

    private void OnDrawGizmosSelected()
    {
        Gizmos.color = Color.green;
        Gizmos.DrawWireSphere(transform.position, finisherDistance);
    }

    public float GetCurrentHealth()
    {
        return _currentHp;
    }
    
    public void SetCurrentHealth(float heath)
    {
        _currentHp = heath;
    }
    
    public override void TakeDamage(float damage)
    {
        StartCoroutine(ShowDamage());
        _controller.TakeDamage(damage);
    }

    public override void KillEntity()
    {
        LevelManager.Instance.EndLevel();
        base.KillEntity();
    }

    protected override IEnumerator ShowDamage()
    {
        EventManager.Instance.Trigger("OnPlayerDamaged");
        return base.ShowDamage();
    }

    [Serializable]
    public class ArmsSet
    {
        public string name;
        public List<Arm> arms = new List<Arm>();
    }
}
