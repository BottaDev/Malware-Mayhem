using UnityEngine;

public class Boss : Entity, ILateUpdatable
{
    [Header("Boss Parameters")] 
    [SerializeField] private GameObject model;
    
    private GenericAttackPattern _pattern;
    private PlayerModel _player;

    private void OnEnable()
    {
        UpdateManager.Instance.lateUpdates.Add(this);
    }

    private void OnDisable()
    {
        UpdateManager.Instance.lateUpdates.Remove(this);
    }

    protected override void Awake()
    {
        base.Awake();
        _pattern = GetComponent<GenericAttackPattern>();
    }

    /// <summary>
    /// Check if the player exists in the level
    /// </summary>
    /// <returns></returns>
    private bool CheckPlayer()
    {
        if (_player == null)
        {
            _player = GameObject.Find("Player")?.GetComponent<PlayerModel>();
            if (_player == null)
                _player = GameObject.Find("Player(Clone)")?.GetComponent<PlayerModel>();
        }

        return _player == null;
    }
    
    public void FalseLateUpdate()
    {
        if (CheckPlayer() || model == null) 
            return;
        
        var newRotation = Quaternion.LookRotation(_player.transform.position - transform.position);
        var currentRotation = model.transform.rotation;
        
        currentRotation = Quaternion.Slerp(currentRotation, newRotation, Time.deltaTime * rotationSpeed);
        currentRotation = new Quaternion(0, currentRotation.y, 0, currentRotation.w);
        model.transform.rotation = currentRotation;
    }

    public override void TakeDamage(float damage, Bullet.BulletType bType = Bullet.BulletType.None, bool showDamage = true)
    {
        base.TakeDamage(damage, showDamage: showDamage);

        _pattern.CheckPhaseHp(_currentHp);
    }
}