using System.Collections;
using MM.Entities.Player;
using UnityEngine;

namespace MM.Entities.Enemies.Bosses.E_Vast
{
    public class FallingMissile : MonoBehaviour
    {
        [Header("Fall Parameters")]
        [SerializeField] private float damage = 10f;
        [SerializeField] private float shadowDuration;
        [SerializeField] private float fallDelay;
        [Header("Objects")]
        [SerializeField] private ParticleSystem impactParticles;
        [SerializeField] private GameObject explotionParticles;
        [SerializeField] private GameObject impactVFXPlane;
        [SerializeField] private GameObject missilePrefab;

        private void Start()
        {
            transform.eulerAngles = new Vector3(0,180,0);
            StartCoroutine(MissileFall());
            StartCoroutine(Fall());
            StartCoroutine(Shadow());
        }
    
        private IEnumerator Fall()
        {
            yield return new WaitForSeconds(fallDelay);

            var position = transform.position;
            position.y = 0;
            //Instantiate(impactParticles, position, Quaternion.identity);
            Instantiate(explotionParticles, position, Quaternion.identity);
            Instantiate(impactVFXPlane, position, Quaternion.identity);

            const float radius = 1f;
            var collision = Physics.OverlapSphere(position, radius);
            foreach (var t in collision)
            {
                var a = t.gameObject;
            
                if (a.gameObject.layer != 9) 
                    continue;
            
                var b = a.GetComponent<PlayerModel>();
                b.TakeDamage(damage);
            }

            const float time = 0.15f;
            yield return new WaitForSeconds(time);

            if (missileObject)
                Destroy(missileObject);
            Destroy(gameObject);
        }

        private IEnumerator Shadow()
        {
            var startScale = Vector3.one * .3f;
            const int steps = 60;

            for (var i = 0; i < steps; i++)
            {
                transform.localScale = Vector3.Lerp(Vector3.zero, startScale, (float)i / (float)steps);
                yield return new WaitForSeconds(shadowDuration / (float)steps);
            }
        }

        GameObject missileObject;
        private IEnumerator MissileFall()
        {
            const int steps = 60;
            missileObject = Instantiate(missilePrefab);

            for (var i = 0; i <= steps; i++)
            {
                missileObject.transform.position = Vector3.Lerp(transform.position + Vector3.up * 15, transform.position, (float)i / (float)steps);
                yield return new WaitForSeconds(fallDelay / (float)steps);
            }

            Destroy(missileObject);
        }
    }
}
