using System.Collections;
using UnityEngine;

public class MissileBoss : SubBoss
{
    [SerializeField] private Transform[] holesPositions;
    [SerializeField] private float timeToHide = 3f;
    [SerializeField] private float timeToAttack = 1.5f;
    [SerializeField] private float timeToGoOut = 5;
    private float _currentTime;
    private bool _isOutside;
    private bool _isAttacking;
    private Transform _t;
    private GenericAttackPhase _genericAttack;

    protected override void Awake()
    {
        base.Awake();
        
        _t = GetComponent<Transform>();
        
        _genericAttack = GetComponent<GenericAttackPhase>();
        _genericAttack.enabled = false;
        _genericAttack.SetCanAttack(true);
        
        SetTime();
    }

    public void Update()
    {
        if(_isOutside || _isAttacking)
            return;

        if (_currentTime <= 0)
        {
            _isAttacking = true;
            MakeAction();
            SetTime();
        }
        else
        {
            _currentTime -= Time.deltaTime;
        }
    }

    private void MakeAction()
    {
        var randomPos = Random.Range(0, holesPositions.Length - 1);

        _t.position = holesPositions[randomPos].position;

        StartCoroutine(MakeAttack());
    }

    private IEnumerator MakeAttack()
    {
        StartCoroutine(Move());
        
        yield return new WaitUntil(() => _isOutside);

        yield return new WaitForSeconds(timeToAttack);
        
        _genericAttack.enabled = true;

        yield return new WaitForSeconds(timeToHide);

        _genericAttack.enabled = false;
        _isAttacking = false;
        StartCoroutine(Move());
    }

    private IEnumerator Move()
    {
        for (var i = 0; i < 30; i++)
        {
            if (_isOutside)
                _t.position -= _t.up * .2f;
            else
                _t.position += _t.up * .2f;

            yield return new WaitForSeconds(.1f);
        }

        _isOutside = !_isOutside;
    }

    private void SetTime()
    {
        _currentTime = timeToGoOut;
    }
}