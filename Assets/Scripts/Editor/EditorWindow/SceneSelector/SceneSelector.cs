using UnityEngine;
using UnityEditor;
using UnityEditor.SceneManagement;
using System.Linq;
using UnityEngine.SceneManagement;

public class EditorSelectScenePopup : PopupWindowContent
{
    private readonly GUILayoutOption[] _iconLayout =
    {
        GUILayout.Width(20.0f), GUILayout.Height(20.0f)
    };

    private GUIStyle _buttonStyle;
    private GUIStyle _selectedButtonStyle;
    private SceneAsset[] _buildScenes;
    private SceneAsset _currentScene;

    private Vector2 _scrollPosBuild;
    
    public EditorSelectScenePopup()
    {
        InitStyles();

        GetBuildScenes();
        _currentScene = AssetDatabase.LoadAssetAtPath<SceneAsset>(SceneManager.GetActiveScene().path);
    }

    private void InitStyles()
    {
        var blankTex = MakeTex(new Color(0f, 0f, 0f, 0f));
        var selectedTex = MakeTex(new Color(0f, 0f, 0f, 0.3f));

        var hoverState = new GUIStyleState()
        {
            background = selectedTex,
            textColor = GUI.skin.button.onHover.textColor,
        };

        _buttonStyle = new GUIStyle(GUI.skin.label)
        {
            onHover = hoverState,
            hover = hoverState,
            normal =
            {
                background = blankTex
            }
        };

        _selectedButtonStyle = new GUIStyle(_buttonStyle)
        {
            normal =
            {
                background = selectedTex
            }
        };
    }

    private static Texture2D MakeTex(Color col)
    {
        var texture = new Texture2D(1, 1, TextureFormat.ARGB32, false);
        texture.SetPixel(0, 0, col);
        texture.Apply();
        return texture;
    }

    public override void OnGUI(Rect rect)
    {
        EditorGUILayout.BeginHorizontal();
        DrawBuildScenes();
        EditorGUILayout.EndHorizontal();

        if (Event.current.type == EventType.MouseMove && EditorWindow.mouseOverWindow == editorWindow)
            editorWindow?.Repaint();
    }

    private void DrawBuildScenes()
    {
        EditorGUILayout.BeginVertical();
        EditorGUILayout.BeginHorizontal();

        GUILayout.Label("Scenes in Build", EditorStyles.boldLabel, GUILayout.Height(20.0f));

        EditorGUILayout.EndHorizontal();

        if (_buildScenes.Length > 0)
        {
            _scrollPosBuild = EditorGUILayout.BeginScrollView(_scrollPosBuild);

            for (var i = 0; i < _buildScenes.Length; i++)
                DrawSelection(_buildScenes[i], i);

            EditorGUILayout.EndScrollView();
        }
        else
            GUILayout.Label("No scene in build setting");


        EditorGUILayout.EndVertical();
    }

    private void DrawSelection(SceneAsset scene, int index = -1)
    {
        if (scene == null) return;

        GUILayout.BeginHorizontal();

        var style = CustomSceneButton.SelectedScene == scene ? _selectedButtonStyle : _buttonStyle;
        if (GUILayout.Button(index >= 0 ? $"{index}\t{scene.name}" : scene.name, style))
            OpenScene(scene);

        style = _currentScene == scene ? _selectedButtonStyle : _buttonStyle;
        if (GUILayout.Button(EditorGUIUtility.IconContent("d_BuildSettings.SelectedIcon", "Open Scene"), style, _iconLayout))
            OpenScene(scene);

        GUILayout.EndHorizontal();
    }

    private void SelectScene(SceneAsset scene)
    {
        CustomSceneButton.SelectedScene = scene;
        editorWindow.Close();
    }

    private void OpenScene(SceneAsset scene)
    {
        SelectScene(scene);
        if (EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo())
        {
            var scenePath = AssetDatabase.GetAssetPath(scene);
            EditorSceneManager.OpenScene(scenePath);
            _currentScene = scene;
            InitStyles();
        }
    }

    private void GetBuildScenes()
    {
        var settingScenes = EditorBuildSettings.scenes;

        _buildScenes = settingScenes.Select(settingScene => AssetDatabase.GUIDToAssetPath(settingScene.guid.ToString()))
            .Select(AssetDatabase.LoadAssetAtPath<SceneAsset>)
            .Where(scene => scene != null)
            .ToArray();
    }
}