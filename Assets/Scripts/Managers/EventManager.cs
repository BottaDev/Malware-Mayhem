using System.Collections.Generic;
using System;
using MM.Common;

namespace MM.Events
{
    public class EventManager : MonoBehaviourSingleton<EventManager>
    {
        #region Private Variables
        
        private Dictionary<NameEvent, Action<object[]>> _subscribers = new ();

        #endregion

        #region Public Functions

        public void Subscribe(NameEvent eventId, Action<object[]> callback)
        {
            if (!_subscribers.ContainsKey(eventId))
                _subscribers.Add(eventId, callback);
            else
                _subscribers[eventId] += callback;
        }

        public void Unsubscribe(NameEvent eventId, Action<object[]> callback)
        {
            if (!_subscribers.ContainsKey(eventId)) return;

            _subscribers[eventId] -= callback;
        }

        public void Trigger(NameEvent eventId, params object[] parameters)
        {
            if (!_subscribers.ContainsKey(eventId))
                return;

            _subscribers[eventId]?.Invoke(parameters);
        }

        #endregion
    }
}

public enum NameEvent
{
    // PLAYER
    OnPlayerSpawned,
    OnPlayerDamaged,
    OnArmChanged,
    OnLowLife,
    OnTutorialSkip,
    OnAbsorbedSubmodule,
    OnReturnedBoss,
    OnInitialAttackWait,
    OnPostProcessFinished,

    // ENEMY
    OnEnemySpawn,
    OnEnemyDead,
    OnStunnedEnemy,
    OnAbsorbingEnemy,
    OnMissileBossMoved,
    OnStunnedSubmodule,
    OnBossDeath,
    OnBossSubmoduleDeath,

    //TEXT
    OnTextStarted,
    OnTextFinished,
    
    //WAVE
    OnWaveFinished,
}