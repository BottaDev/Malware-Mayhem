using System.Collections;
using MM.Common;
using UnityEngine;

namespace MM.Entities.Enemies.Bosses.Notron.SubmoduleBosses
{
    public class SubBossMultiAttack : SubmoduleAttack
    {
        #region Private Variables
        [SerializeField] private string patternName;
        [SerializeField] private bool isCannon;
        [SerializeField] private float initialDelay;
    
        [Header("Bullets Parameters")]
        [SerializeField] protected float fireRate;
        [SerializeField, Range(0, 10)] protected int bulletCount;
        [SerializeField] protected BossBulletType projectile = BossBulletType.MediumBlue;

        private float _currentTime;
        private CannonSubModules _cannon;
        #endregion
    
        #region Monobehaviour Functions
        protected override void Start()
        {
            base.Start();
            _cannon = GetComponent<CannonSubModules>();
            _currentTime = timeAfterExecuting;
        }

        private void Update()
        {
            if (_currentTime <= 0)
                MakeAction();
            else
                _currentTime -= Time.deltaTime;
        }
        #endregion

        #region Public Functions
        public override void MakeAction()
        {
            base.MakeAction();
            StartShooting();
            _currentTime = timeAfterExecuting;
        }
        #endregion
    
        #region Private Functions
        private void StartShooting()
        {
            if (this == null || 
                !gameObject.activeInHierarchy) 
                return;
        
            if (isCannon)
                StartCoroutine(SpawnCannonBall(initialDelay));
            else
                StartCoroutine(SpawnBullets(fireRate, bulletCount, initialDelay, projectile));
        }

        private IEnumerator SpawnCannonBall(float delay)
        {
            yield return new WaitForSeconds(delay);
        
            var position = _cannon.GetShotSpawn().position;
            
            var cannonBall = EnemyPoolManager.Instance.GetCannonBall();
            cannonBall.transform.position = position;
            cannonBall.transform.eulerAngles = _cannon.GetShotSpawn().transform.eulerAngles;
        }
    
        private IEnumerator SpawnBullets(float newFireRate, float newBulletCount, float newInitialDelay, BossBulletType newProjectile)
        {
            yield return new WaitForSeconds(newInitialDelay);
        
            for (var i = 0; i < newBulletCount; i++)
            {
                // Break the loop if the boss is hidden
                if (_cannon.GetIsHidden())
                    yield return null;

                var position = _cannon.GetShotSpawn().position;
            
                var bullet = EnemyPoolManager.Instance.GetBossBullet(newProjectile);
                bullet.transform.position = position;
                bullet.transform.eulerAngles = _cannon.GetShotSpawn().transform.eulerAngles;
            
                //AudioManager.Instance.PlayAudioClip(Sounds.SoundType.EnemyBlueShot, position);

                yield return new WaitForSeconds(newFireRate);
            }
        }
        #endregion
    }
}