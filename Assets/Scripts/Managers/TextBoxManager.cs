using System.Collections;
using MM.Common;
using MM.Events;
using MM.Gameplay;
using TMPro;
using UnityEngine;

namespace MM.UI
{
    /// <summary>
    /// Manage the Text Box that is used, for example, in the tutorial
    /// </summary>
    public class TextBoxManager : MonoBehaviourSingleton<TextBoxManager>
    {
        #region Private Variables

        [SerializeField] private AllTexts[] textLines;
        [SerializeField] private float lineSpeed;
        [SerializeField] private KeyCode input;
        private int _currentLine;
        private float _currentSpeed;
        private bool _cantStart = true;
        private bool _finishedTyping;
        private TextMeshProUGUI _textBox;

        #endregion

        #region Properties

        public bool FinishedTyping => _finishedTyping;

        #endregion

        #region MonoBehaviour Functions

        private void Start()
        {
            EventManager.Instance.Subscribe(NameEvent.OnPlayerSpawned, OnPlayerSpawned);

            _textBox = UIManager.Instance.GetTextBox();
            _textBox.text = string.Empty;

            _currentSpeed = lineSpeed;
        }

        private void Update()
        {
            if (textLines.Length <= 0 || _currentLine >= textLines.Length || _cantStart)
            {
                return;
            }

            if (Input.anyKeyDown)
            {
                if (_textBox.text == textLines[_currentLine].texts)
                {
                    NextLine();
                }
            }

            if (Input.GetKey(input))
            {
                if ((int)_currentSpeed == (int)lineSpeed)
                {
                    _currentSpeed /= 2;
                }
            }

            if (Input.GetKeyUp(input))
            {
                _currentSpeed = lineSpeed;
            }
        }

        #endregion

        #region Public Functions

        public void SetText(AllTexts[] text)
        {
            textLines = text;
        }

        public void StartText()
        {
            StartCoroutine(StarTexts());
        }

        public void ContinueText()
        {
            EventManager.Instance.Trigger(NameEvent.OnTextStarted);
            StartCoroutine(TypeLine());
        }

        #endregion

        #region Private Functions

        private IEnumerator StarTexts()
        {
            yield return new WaitWhile(() => _cantStart);

            EventManager.Instance.Trigger(NameEvent.OnTextStarted);
            _finishedTyping = false;
            _currentLine = 0;
            StartCoroutine(TypeLine());
        }
        
        private IEnumerator TypeLine()
        {
            foreach (var t in textLines[_currentLine].texts)
            {
                _textBox.text += t;

                yield return new WaitForSecondsRealtime(_currentSpeed);
            }
            
            _finishedTyping = true;
        }

        private void NextLine()
        {
            _currentLine++;
            _textBox.text = string.Empty;

            if (_currentLine >= textLines.Length || textLines[_currentLine - 1].stop)
            {
                _finishedTyping = false;
                EventManager.Instance.Trigger(NameEvent.OnTextFinished);
            }
            else if (_currentLine < textLines.Length - 1)
            {
                StartCoroutine(TypeLine());
            }
        }

        #endregion

        #region Event Functions

        private void OnPlayerSpawned(params object[] parameters)
        {
            _cantStart = false;
        }

        #endregion
    }
}