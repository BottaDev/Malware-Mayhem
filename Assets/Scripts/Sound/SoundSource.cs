using System.Collections;
using MM.Common;
using UnityEngine;
using Random = UnityEngine.Random;

namespace MM.Sound
{
    /// <summary>
    /// Represents a sound source in the scene. It manages the playback of audio clips
    /// with specified parameters and supports object pooling for efficient resource usage.
    /// </summary>
    public class SoundSource : MonoBehaviour
    {
        #region Public Variables
        public Pool<SoundSource> pool;
        #endregion
    
        #region Private Variables
        private AudioSource _audioSource;
        #endregion
    
        #region MonoBehaviour Functions
        private void Awake()
        {
            _audioSource = GetComponent<AudioSource>();
        }
        #endregion

        #region Public Functions
        public IEnumerator PlaySound(AudioClip newClip, float minPitch, float maxPitch, float volume, Vector3 newPosition)
        {
            // Place the sound source at the new position
            transform.position = newPosition;
        
            // Varies the pitch of the audio
            var newPitch = Random.Range(minPitch, maxPitch);

            _audioSource.clip = newClip;
            _audioSource.pitch = newPitch;
            _audioSource.volume = volume;
            _audioSource.Play();
        
            yield return new WaitForSeconds(newClip.length);

            if (_audioSource != null)
                _audioSource.Stop();
        
            ReturnToPool();
        }
    
        /// <summary>
        /// Turns on the GameObject associated with the provided SoundSource if it exists and is not null.
        /// </summary>
        /// <param name="soundSource"></param>
        public static void TurnOn(SoundSource soundSource)
        {
            if (soundSource != null && soundSource.gameObject != null)
                soundSource.gameObject.SetActive(true);
        }
    
        /// <summary>
        /// Turns off the GameObject associated with the provided SoundSource if it exists and is not null.
        /// </summary>
        /// <param name="soundSource"></param>
        public static void TurnOff(SoundSource soundSource)
        {
            if (soundSource != null && soundSource.gameObject != null)
                soundSource.gameObject.SetActive(false);
        }
        #endregion

        #region Private Functions
        /// <summary>
        /// // Return the sound source to the pool
        /// </summary>
        private void ReturnToPool()
        {
            if (this == null || gameObject == null || !gameObject.activeInHierarchy) 
                return;
        
            if (pool != null)
                pool.ReturnToPool(this);
            else
                Destroy(gameObject);
        }
        #endregion
    }
}
