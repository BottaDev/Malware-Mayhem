using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

public class PlayerView : MonoBehaviour
{
    private PlayerModel _model;
    private List<MeshRenderer> _renders;
    private List<MeshRenderer> _activeRenders;  // The renders that are currently active when the player is merging
    private ParticleSystem _hoverParticles;
    
    private void Awake()
    {
        _model = GetComponent<PlayerModel>();
        
        // Get all visible renders of the Player
        _renders = GetComponentsInChildren<MeshRenderer>().ToList();

        // Get all renders from the list _player.LeftArms
        var asd = _model.leftArms.Select(arm => arm.GetComponent<MeshRenderer>()).ToList();
        
        _hoverParticles = GetComponentInChildren<ParticleSystem>();
    }

    public static void ResetArm(PlayerArm arm)
    {
        arm.gameObject.SetActive(false);
    }
    
    public static void ShowArm(List<PlayerArm> armSets, int armIndex)
    {
        // Reset all arms
        armSets.ForEach(ResetArm);

        // Enable the arm that is currently selected
        armSets[armIndex].gameObject.SetActive(true);
    }
    
    /// <summary>
    /// Show the merging effect when the player merge or hack and entity
    /// </summary>
    /// <param name="forceField"></param>
    public void ShowMergingEffect(ParticleSystemForceField forceField)
    {
        var effect = Instantiate(_model.mergeEffect, transform.position, Quaternion.identity);
        
        const float effectDuration = 0.8f;
        effect.SetUpForceField(forceField, effectDuration);
    }
    
    /// <summary>
    /// Set the visibility of the mesh renderers of the player when merging / hacking
    /// </summary>
    /// <param name="isVisible"></param>
    public void SetPlayerVisibility(bool isVisible)
    {
        // Get the current visible renders to disable them
        if (!isVisible)
            _activeRenders = _renders.Where(r => r.gameObject.activeSelf).ToList();
        
        // Set all renders to be visible or not
        _activeRenders.ForEach(r => r.enabled = isVisible);
        
        // Set the hover particles to be visible or not
        _hoverParticles.gameObject.SetActive(isVisible);
    }
}
