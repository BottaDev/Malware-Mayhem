using System.Reflection;
using UnityEditor;
using UnityEditor.SceneManagement;
using UnityEngine;
using UnityEngine.UIElements;
using UnityToolbarExtender;
using PopupWindow = UnityEditor.PopupWindow;

namespace MM_Editor.MM_EditorWindow
{
    [InitializeOnLoad]
    public class CustomSceneButton
    {
        #region Private Variables

        private static SceneAsset _selectedScene;
        private static GUIContent _customSceneContent;
        private static GUIContent _gameSceneContent;
        private static Rect _buttonRect;
        private static VisualElement _toolbarElement;
        private static SceneAsset _lastScene;

        #endregion

        #region Properties

        //Constructor
        static CustomSceneButton()
        {
            ToolbarExtender.LeftToolbarGUI.Add(OnToolbarLeftGUI);
            EditorApplication.update += OnUpdate;

            var savedScenePath = EditorPrefs.GetString(GetEditorPrefKey(), "");
            _selectedScene = AssetDatabase.LoadAssetAtPath<SceneAsset>(savedScenePath);

            if (_selectedScene == null && EditorBuildSettings.scenes.Length > 0)
            {
                var scenePath = EditorBuildSettings.scenes[0].path;
                SelectedScene = AssetDatabase.LoadAssetAtPath<SceneAsset>(scenePath);
            }
        }

        public static SceneAsset SelectedScene
        {
            get => _selectedScene;
            set
            {
                _selectedScene = value;
                _toolbarElement?.MarkDirtyRepaint();

                if (value != null)
                {
                    var path = AssetDatabase.GetAssetPath(value);
                    EditorPrefs.SetString(GetEditorPrefKey(), path);
                }
                else
                    EditorPrefs.DeleteKey(GetEditorPrefKey());
            }
        }

        #endregion

        #region Private Functions

        /// <summary>
        /// Set the position and the base control of the button
        /// </summary>
        private static void OnToolbarLeftGUI()
        {
            GUILayout.FlexibleSpace();

            var sceneName = _selectedScene != null ? _selectedScene.name : "Select Scene...";
            var selected =
                EditorGUILayout.DropdownButton(new GUIContent(sceneName), FocusType.Passive, GUILayout.Width(128.0f));

            if (Event.current.type == EventType.Repaint)
            {
                _buttonRect = GUILayoutUtility.GetLastRect();
            }

            if (selected)
            {
                PopupWindow.Show(_buttonRect, new EditorSelectScenePopup());
            }
        }

        private static void OnUpdate()
        {
            if (_toolbarElement == null)
            {
                var toolbarType = typeof(Editor).Assembly.GetType("UnityEditor.Toolbar");
                var toolbars = Resources.FindObjectsOfTypeAll(toolbarType);
                var currentToolbar = toolbars.Length > 0 ? (ScriptableObject)toolbars[0] : null;

                if (currentToolbar != null)
                {
                    var guiViewType = typeof(Editor).Assembly.GetType("UnityEditor.GUIView");
                    var iWindowBackendType = typeof(Editor).Assembly.GetType("UnityEditor.IWindowBackend");
                    var guiBackend = guiViewType.GetProperty("windowBackend",
                        BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                    var viewVisualTree = iWindowBackendType.GetProperty("visualTree",
                        BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                    var windowBackend = guiBackend?.GetValue(currentToolbar);
                    _toolbarElement = (VisualElement)viewVisualTree?.GetValue(windowBackend, null);
                }
            }

            if (_lastScene == null ||
                EditorApplication.isPlaying || EditorApplication.isPaused ||
                EditorApplication.isCompiling || EditorApplication.isPlayingOrWillChangePlaymode)
            {
                return;
            }

            ChangeScene(_lastScene);
            _lastScene = null;
        }

        private static void ChangeScene(SceneAsset scene)
        {
            if (EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo())
            {
                EditorSceneManager.playModeStartScene = scene;
                EditorApplication.isPlaying = true;
            }
        }

        private static string GetEditorPrefKey()
        {
            var projectPrefix = PlayerSettings.companyName + "." + PlayerSettings.productName;
            return projectPrefix + "_CustomPlayButton_SelectedScenePath";
        }

        #endregion
    }
}