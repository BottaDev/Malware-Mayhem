using System;
using MM.Entities.Player;
using MM.Events;
using UnityEngine;

namespace MM.Entities.Enemies.Bosses.Iset.SubModuleBosses
{
    public class ScrollingWall : MonoBehaviour
    {
        #region Private Variables
        
        [SerializeField] private float speed = 1f;
        [SerializeField] private float damage = 1f;
        [SerializeField] private float delayBetweenDamage = 1f;
        [SerializeField] private Transform objectToMove;
        
        private float _currentDelay;
        private bool _isPlayerSpawned;
        private bool _canAttack;

        #endregion

        #region Monobehaviour Functions

        private void Awake()
        {
            EventManager.Instance.Subscribe(NameEvent.OnPlayerSpawned, OnPlayerSpawned);
            
            _currentDelay = delayBetweenDamage;
        }

        private void Update()
        {
            if(!_isPlayerSpawned) { return; }
            
            if (_currentDelay > 0)
            {
                _currentDelay -= Time.deltaTime;
            }
            else
            {
                _canAttack = true;
            }
        }

        private void FixedUpdate()
        {
            if(!_isPlayerSpawned) { return; }
            
            objectToMove.position += Vector3.forward * (speed * Time.deltaTime);
        }

        private void OnCollisionEnter(Collision other)
        {
            if(other.gameObject.TryGetComponent<PlayerController>(out var player))
            {
                player.TakeDamage(damage);
            }
        }

        private void OnCollisionStay(Collision other)
        {
            if(!_canAttack) { return; }
            
            if (other.gameObject.TryGetComponent<PlayerController>(out var player))
            {
                _canAttack = false;
                _currentDelay = delayBetweenDamage;
                player.TakeDamage(damage);
            }
        }

        #endregion

        #region Event Functions

        private void OnPlayerSpawned(params object[] parameters)
        {
            _isPlayerSpawned = true;
        }

        #endregion
    }
}