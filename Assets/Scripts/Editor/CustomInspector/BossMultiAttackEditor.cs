using System;
using System.Linq;
using UnityEditor;
using UnityEngine;

[CustomEditor(typeof(BossMultiAttack)), CanEditMultipleObjects]
public class BossMultiAttackEditor : Editor
{
    private BossMultiAttack _bossMultiAttack;
    
    private GUIStyle _title;
    private int _totalMultiAttacks;
    private int _prevTotalMultiAttacks;

    private void OnEnable()
    {
        _bossMultiAttack = (BossMultiAttack)target;
    }

    public override void OnInspectorGUI()
    {
        serializedObject.Update();
        
        GUILayout.Label("General Parameters");
        _bossMultiAttack.timeAfter = EditorGUILayout.FloatField("Time After Executing", _bossMultiAttack.timeAfter);
        
        EditorGUILayout.Space();
        
        GUILayout.Label("Pattern Parameters");
        _bossMultiAttack.patternName = EditorGUILayout.TextField("Pattern Name", _bossMultiAttack.patternName);

        EditorGUILayout.Space();
        
        EditorGUILayout.BeginHorizontal();
        GUILayout.Label("Multi Attacks");
        _totalMultiAttacks = EditorGUILayout.IntSlider(_totalMultiAttacks, 0, 5);
        EditorGUILayout.EndHorizontal();
        
        EditorGUILayout.Space();
        
        if(GUILayout.Button("New Multi Attack"))
        {
            if(_totalMultiAttacks == _prevTotalMultiAttacks)
                return;
            
            if(_totalMultiAttacks < _prevTotalMultiAttacks)
                _bossMultiAttack.multiAttacks.RemoveRange(_totalMultiAttacks, _prevTotalMultiAttacks - _totalMultiAttacks);
            else if(_totalMultiAttacks > _prevTotalMultiAttacks)
            {
                for (var i = 0; i < _totalMultiAttacks - _prevTotalMultiAttacks; i++)
                    _bossMultiAttack.multiAttacks.Add(new ());
            }
            else if(_bossMultiAttack.multiAttacks.Count <= 0)
            {
                _bossMultiAttack.multiAttacks.Clear();   
                return;
            }
            
            _prevTotalMultiAttacks = _totalMultiAttacks;
        }
        
        EditorGUILayout.Space();
        
        DrawMultiAttacks();
        
        serializedObject.ApplyModifiedProperties();
        
        if (GUI.changed)
            EditorUtility.SetDirty(target);
    }

    private void DrawMultiAttacks()
    {
        if (!_bossMultiAttack.multiAttacks.Any())
            return;
        
        foreach (var t in _bossMultiAttack.multiAttacks)
        {
            EditorGUILayout.Space();
            
            t.attackType = (BossMultiAttack.MultiAttackType)EditorGUILayout.EnumPopup("Attack Type", t.attackType);

            switch (t.attackType)
            {
                case BossMultiAttack.MultiAttackType.Bullets:
                    t.fireRate = EditorGUILayout.FloatField("Fire Rate", t.fireRate);
                    t.bulletCount = EditorGUILayout.IntSlider("Bullet Count", t.bulletCount, 0, 10);
                    t.projectile = (BossBulletType)EditorGUILayout.EnumPopup("Projectile", t.projectile);
                    break;

                case BossMultiAttack.MultiAttackType.ContinuousLaser:
                    t.laserDuration = EditorGUILayout.FloatField("Laser Duration", t.laserDuration);
                    break;

                case BossMultiAttack.MultiAttackType.CannonBall:
                    break;

                default:
                    throw new ArgumentOutOfRangeException();
            }

            t.initialDelay = EditorGUILayout.FloatField("Initial Delay", t.initialDelay);
            t.stopMovement = EditorGUILayout.Toggle("Stop Movement", t.stopMovement);
            
            EditorGUILayout.Space();
        }
    }
}