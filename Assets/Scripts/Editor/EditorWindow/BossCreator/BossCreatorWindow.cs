using System.Collections.Generic;
using UnityEditor;
using UnityEngine;
using UnityEngine.AI;

namespace MM_Editor.MM_EditorWindow
{
    public class BossCreatorWindow : EditorWindow
    {
        #region Private Variables
        
        private int _totalSubmodules;
        private MeshFilter _bossMeshFilter;
        private MeshRenderer _bossMeshRenderer;
        private Vector2 _scrollPos;
        private ColliderType _bossCollider;
        private readonly List<SubModuleConfig> _config = new();
        private readonly GUILayoutOption _layoutOption = GUILayout.Width(250);
        
        #endregion

        #region MonoBehaviour Functions

        [MenuItem("Malware Mayhem/Boss Creator")]
        private static void ShowWindow()
        {
            GetWindow<BossCreatorWindow>("Boss Creator");
        }

        private void OnGUI()
        {
            minSize = new Vector2(400, 150);
            maxSize = new Vector2(400, 450);

            EditorGUILayout.BeginVertical();
            _scrollPos = EditorGUILayout.BeginScrollView(_scrollPos);

            BossConfiguration();
            SubModulesConfiguration();
            CreateButton();

            EditorGUILayout.EndScrollView();
            EditorGUILayout.EndVertical();
        }
        
        private void OnDestroy()
        {
            _config.Clear();
        }

        #endregion

        #region Private Functions
        
        private void BossConfiguration()
        {
            EditorGUILayout.BeginVertical();

            EditorGUILayout.Space();

            GUILayout.Label("Main Boss Configuration");

            EditorGUILayout.BeginHorizontal();
            
            GUILayout.Label("Mesh Filter");
            _bossMeshFilter =
                EditorGUILayout.ObjectField(_bossMeshFilter, typeof(MeshFilter), true, _layoutOption) as MeshFilter;
            
            EditorGUILayout.EndHorizontal();

            
            EditorGUILayout.BeginHorizontal();
            GUILayout.Label("Mesh Renderer");
            _bossMeshRenderer =
                EditorGUILayout.ObjectField(_bossMeshRenderer, typeof(MeshRenderer), true, _layoutOption) as
                    MeshRenderer;
            
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.BeginHorizontal();
            
            GUILayout.Label("Collider");
            _bossCollider = (ColliderType)EditorGUILayout.EnumPopup(_bossCollider, _layoutOption);
            
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.Space();

            EditorGUILayout.EndVertical();
        }

        private void SubModulesConfiguration()
        {
            EditorGUILayout.BeginVertical();
            EditorGUILayout.BeginHorizontal();

            GUILayout.Label("Total Submodules");
            _totalSubmodules = EditorGUILayout.IntSlider(_totalSubmodules, 0, 3, _layoutOption);

            EditorGUILayout.EndHorizontal();

            for (var i = 0; i < _totalSubmodules; i++)
            {
                if (_config.Count < _totalSubmodules)
                {
                    CreateSubmoduleConfig();
                }
                
                DrawSelection(i);
            }

            if (_totalSubmodules == 0)
            {
                _config.Clear();
            }

            EditorGUILayout.EndVertical();
        }

        private void DrawSelection(int index)
        {
            EditorGUILayout.BeginVertical();

            EditorGUILayout.Space();

            GUILayout.Label($"Submodule {index + 1}");

            EditorGUILayout.BeginHorizontal();
            
            GUILayout.Label("Mesh Filter");
            _config[index].MeshFilter =
                EditorGUILayout.ObjectField(_config[index].MeshFilter, typeof(MeshFilter), true, _layoutOption) as
                    MeshFilter;
            
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.BeginHorizontal();
            
            GUILayout.Label("Mesh Renderer");
            _config[index].MeshRenderer =
                EditorGUILayout.ObjectField(_config[index].MeshRenderer, typeof(MeshRenderer), true, _layoutOption) as
                    MeshRenderer;
            
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.BeginHorizontal();
            
            GUILayout.Label("Collider");
            _config[index].Collider = (ColliderType)EditorGUILayout.EnumPopup(_bossCollider, _layoutOption);
            
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.Space();

            EditorGUILayout.EndVertical();
        }

        private void CreateButton()
        {
            EditorGUILayout.BeginVertical();

            if (GUILayout.Button("Create Boss"))
            {
                CreateBoss();
            }

            EditorGUILayout.EndVertical();
        }

        private void CreateBoss()
        {
            var boss = new GameObject("Boss");

            if (_bossMeshFilter != null)
            {
                boss.AddComponent<MeshFilter>().sharedMesh = _bossMeshFilter.mesh;
            }

            if (_bossMeshRenderer != null)
            {
                boss.AddComponent<MeshRenderer>().sharedMaterial = _bossMeshRenderer.material;
            }

            switch (_bossCollider)
            {
                case ColliderType.Box:
                    boss.AddComponent<BoxCollider>();
                    break;
                case ColliderType.Sphere:
                    boss.AddComponent<SphereCollider>();
                    break;
                case ColliderType.Capsule:
                    boss.AddComponent<CapsuleCollider>();
                    break;
                default:
                    boss.AddComponent<BoxCollider>();
                    break;
            }

            boss.AddComponent<Rigidbody>();
            boss.AddComponent<NavMeshAgent>();
            boss.AddComponent<NavMeshObstacle>();
            boss.AddComponent<Boss>();
            boss.AddComponent<SubmoduleAttackRandomizer>();

            for (var i = 0; i < _config.Count; i++)
            {
                var submodule = new GameObject($"Submodule {i + 1}")
                {
                    transform =
                    {
                        parent = boss.transform
                    }
                };

                if (_config[i].MeshFilter != null)
                {
                    submodule.AddComponent<MeshFilter>().sharedMesh = _config[i].MeshFilter.mesh;
                }

                if (_config[i].MeshRenderer != null)
                {
                    submodule.AddComponent<MeshRenderer>().sharedMaterial = _config[i].MeshRenderer.material;
                }

                switch (_config[i].Collider)
                {
                    case ColliderType.Box:
                        boss.AddComponent<BoxCollider>();
                        break;
                    case ColliderType.Sphere:
                        boss.AddComponent<SphereCollider>();
                        break;
                    case ColliderType.Capsule:
                        boss.AddComponent<CapsuleCollider>();
                        break;
                    default:
                        boss.AddComponent<BoxCollider>();
                        break;
                }

                submodule.AddComponent<BossSubmodule>();
                submodule.AddComponent<Outline>();
            }
        }

        private void CreateSubmoduleConfig()
        {
            _config.Add(new SubModuleConfig());
        }
        
        #endregion
    }
}

public class SubModuleConfig
{
    public MeshFilter MeshFilter;
    public MeshRenderer MeshRenderer;
    public ColliderType Collider;
}

public enum ColliderType
{
    Box,
    Sphere,
    Capsule
}