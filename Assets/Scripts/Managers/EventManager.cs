using System.Collections.Generic;
using UnityEngine;
using System;
using Common;

public class EventManager : MonoBehaviourSingleton<EventManager>
{
    Dictionary<NameEvent, Action<object[]>> _subscribers = new Dictionary<NameEvent, Action<object[]>>();

    public enum NameEvent
    {
        // PLAYER
        OnPlayerSpawned,
        OnPlayerDamaged,
        OnArmChanged,
        OnLowLife,
        OnTutorialSkip,
        OnAbsorbedSubmodule,
        OnReturnedBoss,
        OnInitialAttackWait,
        OnPostProcessFinished,
        
        // ENEMY
        OnEnemySpawn,
        OnEnemyDead,
        OnStunnedEnemy,
        OnAbsorbingEnemy,
        OnMissileBossMoved,
        OnStunnedSubmodule,
        OnBossDeath,
        OnBossSubmoduleDeath,
        
        //TEXT
        OnTextStarted,
        OnTextFinished,
        
        //WAVE
        OnWaveFinished
    }

    public void Subscribe(NameEvent eventId, Action<object[]> callback)
    {
        if (!_subscribers.ContainsKey(eventId))
            _subscribers.Add(eventId, callback);
        else
            _subscribers[eventId] += callback;
    }

    public void Unsubscribe(NameEvent eventId, Action<object[]> callback)
    {
        if (!_subscribers.ContainsKey(eventId)) return;

        _subscribers[eventId] -= callback;
    }

    public void Trigger(NameEvent eventId, params object[] parameters)
    {
        if (!_subscribers.ContainsKey(eventId))
            return;

        _subscribers[eventId]?.Invoke(parameters);
    }
}