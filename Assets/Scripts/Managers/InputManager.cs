using MM.Common;
using MM.Events;
using MM.Gameplay;
using UnityEngine;
using UnityEngine.UI;

namespace MM.Inputs
{
    /// <summary>
    /// Calculate the mouse position in the world space with the Pixel Post-Processing Camera.
    /// </summary>
    public class InputManager : MonoBehaviourSingleton<InputManager>
    {
        #region Public Variables

        [HideInInspector] public Vector3 mousePosition = Vector3.zero;

        #endregion

        #region Private Variables

        [SerializeField] private LayerMask groundLayerMask;
        [SerializeField] private Texture2D cursorImage;
        [SerializeField] private Camera[] levelCameras;
        
        private CanvasScaler _canvasScaler;
        private Camera _cam;

        #endregion

        #region Monobehaviour Functions

        protected override void Awake()
        {
            base.Awake();

            _cam = levelCameras[0];

            
        }

        private void Start()
        {
            EventManager.Instance.Subscribe(NameEvent.OnAbsorbedSubmodule, OnAbsorbedSubmodule);
            EventManager.Instance.Subscribe(NameEvent.OnReturnedBoss, OnReturnedBoss);
        }

        private void Update()
        {
            //Check if the camera is null because is needed to calculate the mouse position
            if (_cam == null || PauseManager.Instance.IsPaused)
            {
                return;
            }

            SetResolutionFactor();
            SetMousePosition();
        }

        #endregion

        #region Private Functions

        private void SetResolutionFactor()
        {
            Cursor.lockState = CursorLockMode.Confined;

            if (_canvasScaler == null)
                _canvasScaler = GameObject.Find("Gameplay Canvas").GetComponent<CanvasScaler>();

            var hotSpot = new Vector2(cursorImage.width / 2, cursorImage.height / 2);
            
            // Set the cursor image and hotspot position
            Cursor.SetCursor(cursorImage, hotSpot, CursorMode.Auto);
        }
        
        private void SetMousePosition()
        {
            var ray = _cam.ScreenPointToRay(Input.mousePosition);

            if (Physics.Raycast(ray, out var hitInfo, Mathf.Infinity, groundLayerMask, QueryTriggerInteraction.Ignore))
            {
                mousePosition = hitInfo.point;
                mousePosition.y = 0;
                
                Debug.DrawLine(ray.origin, hitInfo.point, Color.green);
            }
            else
            {
                Debug.DrawLine(ray.origin, ray.origin + ray.direction * 500, Color.red);
            }
        }

        #endregion

        #region Event Functions

        private void OnAbsorbedSubmodule(params object[] parameters)
        {
            var cameraIndex = (int)parameters[0];
            _cam = levelCameras[cameraIndex];
        }

        private void OnReturnedBoss(params object[] parameters)
        {
            _cam = levelCameras[0];
        }

        #endregion
    }
}