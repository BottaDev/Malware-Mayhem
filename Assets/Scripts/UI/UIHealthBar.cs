using System.Collections;
using UnityEngine;
using UnityEngine.UI;

namespace MM.UI
{
    /// <summary>
    /// Represents a health bar in the UI. It manages the health bar for the player and enemies.
    /// </summary>
    public class UIHealthBar : UIBar
    {
        #region Private Variables
        [SerializeField] private Image slowBar;
        [SerializeField] private Image edge;
    
        private float _currentSlowValue;
        private Color _slowColor;
        private Color _edgeColor;
    
        private float _t;
        #endregion

        #region MonoBehaviour Functions
        protected override void Start()
        {
            base.Start();
        
            if (slowBar != null)
            {
                _slowColor = slowBar.color;
            }

            if (edge != null)
            {
                _edgeColor = edge.color;
            }
        }

        private void Update()
        {
            if (slowBar != null && (int)_currentSlowValue != (int)_currentValue)
            {
                _currentSlowValue = Mathf.Lerp(_currentSlowValue, _currentValue, _t);
                _t += 0.1f * Time.deltaTime;
            }

            var amount = _currentValue / _maxValue;
            if(amount < 0)
            {
                amount = 0;
            }

            bar.fillAmount = amount;
        
            if (slowBar != null)
            {
                slowBar.fillAmount = _currentSlowValue / _maxValue;
            }
        }
        #endregion
    
        #region Public Functions
        public override void SetMaxValue(float value)
        {
            base.SetMaxValue(value);
        
            _currentSlowValue = _maxValue;
        }

        public override void SetValue(float value)
        {
            _currentValue = value;
            _t = 0;
        }
    
        public IEnumerator BlinkBar(Color newColor)
        {
            const float waitTIme = 0.1f;
            newColor.a = _barColor.a;

            if (slowBar != null)
            {
                slowBar.color = newColor;
            }
        
            if (edge != null)
            {
                edge.color = newColor;
            }
        
            bar.color = newColor;
        
            yield return new WaitForSeconds(waitTIme);

            if (slowBar != null)
            {
                slowBar.color = _slowColor;
            }
        
            if (edge != null)
            {
                edge.color = _edgeColor;
            }
        
            bar.color = _barColor;
        }
        #endregion
    }
}