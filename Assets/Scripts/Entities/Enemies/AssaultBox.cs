using System.Collections;
using MM.Sound;
using MM.Common;
using UnityEngine;

public class AssaultBox : Enemy
{
    [Header("AssaultBox Parameters")]
    [SerializeField]private float minFireRate = 2f;
    [SerializeField]private float maxFireRate = 3f;
    [SerializeField]private int shotsCount = 3;
    [SerializeField]private float timeBetweenShot = 0.1f;
    [SerializeField]private float attackDistance;
    [SerializeField]private float idealDistance;
    [SerializeField]private float upperBodySpeed;
    [SerializeField] private bool cantMove;
    [SerializeField] private bool cantAttack;

    [Header("AssaultBox Objects")]
    [SerializeField]private GameObject upperBody;
    [SerializeField]private Transform shotSpawn;

    private float _fireRate;
    private float _currentFireRate;
    private bool _attacking = false;
    private Vector3 _moveDirection;

    protected override void Awake()
    {
        base.Awake();
        _fireRate = Random.Range(minFireRate, maxFireRate);
    }

    private void StayIdle()
    {
        if (_agent.enabled)
            _agent.isStopped = true;

        var position = _player.transform.position;
        RotateTowards(position);
        RotateUpperBody(position);
    }

    private void RotateUpperBody(Vector3 target)
    {
        var direction = (target - upperBody.transform.position).normalized;
        var lookRotation = Quaternion.LookRotation(new Vector3(direction.x, 0, direction.z));
        upperBody.transform.rotation = Quaternion.Slerp(upperBody.transform.rotation, lookRotation, Time.deltaTime * upperBodySpeed);
    }

    private IEnumerator SpawnShoot()
    {
        _attacking = true;

        for (var i = 0; i < shotsCount; i++)
        {
            if (isStunned)
                break;

            var position = shotSpawn.position;
            
            var bullet = EnemyPoolManager.Instance.assaultBulletPool.Get();
            bullet.pool = EnemyPoolManager.Instance.assaultBulletPool;
            bullet.transform.position = position;
            bullet.transform.eulerAngles = upperBody.transform.eulerAngles;
            
            AudioManager.Instance.PlayAudioClip(Sounds.SoundType.EnemyBlueShot, position);

            yield return new WaitForSeconds(timeBetweenShot);
        }

        _attacking = false;
        _moveDirection = CalculateNextDirection();
    }

    private void Attack()
    {
        if(cantAttack)
        {
            _moveDirection = CalculateNextDirection();
            return;
        }
        
        StartCoroutine(SpawnShoot());
        _currentFireRate = _fireRate;
    }

    protected override void MakeActions()
    {
        if (_currentFireRate <= 0 && _distanceToPlayer <= attackDistance &&
            !_fov.CheckMiddleObstacle(_player.transform.position))
            Attack();
        else
            _currentFireRate -= Time.deltaTime;
    }

    protected override void Move()
    {
        if (_attacking || cantMove)
        {
            StayIdle();
            return;
        }

        if (_distanceToPlayer >= attackDistance || _fov.CheckMiddleObstacle(_player.transform.position))
            MoveToPosition(_player.transform.position);
        else
            MoveToPosition(transform.position + _moveDirection);

        RotateTowards(transform.position + _moveDirection);
        RotateUpperBody(_player.transform.position);
    }

    private Vector3 CalculateNextDirection()
    {
        var newPos = transform.position;
        
        if (_player != null)
            newPos = _player.transform.position;
        
        if (_agent.enabled)
            _agent.isStopped = false;
        
        var nextDir = (_distanceToPlayer >= idealDistance ? newPos - transform.position : transform.position - newPos).normalized;

        return nextDir;
    }

    private void OnDrawGizmosSelected()
    {
        Gizmos.color = Color.red;
        Gizmos.DrawWireSphere(transform.position, attackDistance);
    }
}