using System.Collections;
using MM.Entities.Player;
using MM.Gameplay;
using MM.Sound;
using UnityEngine;

namespace MM.Entities.Enemies.Bosses.E_Vast
{
    public class TargetedMissilesAttack : SubmoduleAttack
    {
        #region Private Variables
        [Header("Attack Parameters")]
        [SerializeField] private float missileCount = 12f;
        [SerializeField] private float timeBetweenMissiles = 0.5f;
        [SerializeField] private GameObject missile;
        [SerializeField] private GameObject missileModel;
        [SerializeField] private Transform[] missileModelPosition;
    
        private PlayerModel _player;
        #endregion
    
        #region Public Functions
        public override void MakeAction()
        {
            base.MakeAction();
            StartCoroutine(SpawnMissiles());
        }
        #endregion

        #region Private Functions
        private IEnumerator SpawnMissiles()
        {
            for (var i = 0; i < missileCount; i++)
            {
                if (_submodule.GetIsStunned())
                    yield return null;
            
                if (CheckPlayer())
                    continue;

                Instantiate(missileModel, 
                    i < 6 ? missileModelPosition[i].position : missileModelPosition[i - 6].position,
                    Quaternion.identity);

                // Fix the Y of the spawn
                const float yAxis = .1f;

                var t = _player.transform;
                var position = t.position;
                var pos = new Vector3 (position.x, yAxis, position.z);

                Instantiate(missile, pos, Quaternion.identity);
            
                AudioManager.Instance.PlayAudioClip(Sounds.SoundType.MissileLaunch, pos);
            
                yield return new WaitForSeconds(timeBetweenMissiles);
            }
        }

        /// <summary>
        /// Check if the player exists in the level
        /// </summary>
        /// <returns></returns>
        private bool CheckPlayer()
        {
            if (_player == null)
                _player = LevelManager.Instance.Player;

            return _player == null;
        }
        #endregion
    }
}
