using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using Sound;
using UnityEngine;
using UnityEngine.Rendering.PostProcessing;
using Debug = UnityEngine.Debug;

public class CameraDistortionController : MonoBehaviour
{
    // TODO: get the position of the module in the screen and center the vignette/distortion on it
    //public Transform distortTarget;

    private float _progress;
    private Vignette _vignette;
    private LensDistortion _lensDistortion;
    private ChromaticAberration _chromaticAberration;
    private CameraDistortionPPSSettings _cameraDistortion;
    private PostProcessVolume _volume;

    private void Start()
    {
        _volume = gameObject.GetComponent<PostProcessVolume>();
        _volume.profile.TryGetSettings(out _vignette);
        _volume.profile.TryGetSettings(out _lensDistortion);
        _volume.profile.TryGetSettings(out _chromaticAberration);
        _volume.profile.TryGetSettings(out _cameraDistortion);
        _volume.weight = 0;
    }

    private void OnEnable()
    {
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnAbsorbedSubmodule, OnAbsorbedSubmodule);
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnReturnedBoss, OnReturnedBoss);
    }

    //StartEffect
    private void OnAbsorbedSubmodule(params object[] parameter)
    {
        AudioManager.Instance.PlayAudioClip(Sounds.SoundType.Hacking, transform.position);
        UIManager.Instance.ChangeStatus(false);
        _volume.weight = 1;
        StartCoroutine(VFXCoroutine());
        StartCoroutine(LensDistortionCoroutine());
    }

    //Effect Out
    private void OnReturnedBoss(params object[] parameter)
    {
        UIManager.Instance.ChangeStatus(false);
        _volume.weight = 1;
        StartCoroutine(VFXOut());
    }

    private IEnumerator VFXCoroutine()
    {
        SetStatus(false);
        var duration = 1.5f;
        var steps = 60;
        
        for (var i = 0; i <= steps; i++)
        {
            _progress = Mathf.Lerp(0, 1, (float)i / (float)steps);

            _cameraDistortion._NoiseScale.value = Mathf.Lerp(0, 15, _progress);
            _vignette.intensity.value = Mathf.Lerp(0, 1, _progress);
            _chromaticAberration.intensity.value = Mathf.Lerp(0, 1, _progress);

            yield return new WaitForSecondsRealtime(duration/steps);
        }
        SetStatus(true);
    }

    private IEnumerator LensDistortionCoroutine()
    {
        SetStatus(false);
        var duration = .5f;
        var steps = 20;

        for (var i = 0; i <= steps; i++)
        {
            _lensDistortion.intensity.value = Mathf.Lerp(0, -70, (float)i / (float)steps);
            yield return new WaitForSecondsRealtime(duration / steps);
        }

        duration = 1;
        steps = 40;
        for (var i = 0; i <= steps; i++)
        {
            _lensDistortion.intensity.value = Mathf.Lerp(0, 70, (float)i / (float)steps);
            yield return new WaitForSecondsRealtime(duration / steps);
        }

        StartCoroutine(VFXOut());
    }

    private IEnumerator VFXOut()
    {
        const float duration = .5f;
        const int steps = 20;

        for (var i = 0; i <= steps; i++)
        {
            _progress = Mathf.Lerp(0, 1, (float)i / (float)steps);

            _cameraDistortion._NoiseScale.value = Mathf.Lerp(15, 0, _progress);
            _vignette.intensity.value = Mathf.Lerp(1, 0, _progress);
            _lensDistortion.intensity.value = Mathf.Lerp(70, 0, _progress);
            _chromaticAberration.intensity.value = Mathf.Lerp(1, 0, _progress);

            yield return new WaitForSecondsRealtime(duration / steps);
        }

        _volume.weight = 0;
        EventManager.Instance.Trigger(EventManager.NameEvent.OnPostProcessFinished, true);
        SetStatus(true);
    }

    private void SetStatus(bool status)
    {
        BossManager.Instance.ChangeStatus(status);
        UIManager.Instance.ChangeStatus(status);
        LevelManager.Instance.ChangeStatus(status);
    }
}
