using System;
using System.Collections.Generic;

namespace Common
{
    /// <summary>
    /// Provides a mechanism to cache and retrieve values associated with keys.
    /// It allows values to be generated on-demand using a processing function when a key is not found.
    /// </summary>
    /// <typeparam name="TKey"></typeparam>
    /// <typeparam name="TValue"></typeparam>
    public class LookupTable <TKey, TValue>
    {
        #region Private Variables
        private Dictionary<TKey, TValue> _dictionary = new Dictionary<TKey, TValue>();
        private Func<TKey, TValue> _process;
        #endregion
    
        #region Public Variables
        public LookupTable(Func<TKey, TValue> process) 
        {
            _process = process;
        }

        public TValue GetValue(TKey key) 
        {
            if (!_dictionary.ContainsKey(key)) 
                _dictionary[key] = _process(key);

            return _dictionary[key];
        }
    
        /// <summary>
        /// Indexer to provide access to values using square brackets (e.g., table[key]) 
        /// </summary>
        /// <param name="key"></param>
        public TValue this[TKey key] 
        {
            get {
                return GetValue(key);
            }
        }
        #endregion
    }
}
