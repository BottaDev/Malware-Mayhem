using MM.Entities;
using UnityEditor;
using UnityEditorInternal;
using UnityEngine;
using MM.Gameplay;

namespace MM_Editor.GUIScene
{
    //[CustomEditor(typeof(SpawnerManager))]
    public class SpawnerEditor : Editor
    {
        #region Common

        #region Variables

        private SpawnerManager _spawnerManager;

        #endregion

        #region Functions

        private void OnEnable()
        {
            _spawnerManager = (SpawnerManager)target;

            _title = new GUIStyle
            {
                normal =
                {
                    textColor = Color.white
                },
                alignment = TextAnchor.MiddleCenter,
                fontSize = 20
            };
        }

        #endregion

        #endregion

        #region GUIScene

        #region Functions

        private void OnSceneGUI()
        {
            DrawPositions();
        }

        private void DrawPositions()
        {
            var spawns = _spawnerManager.GetSpawnPoints();

            if (spawns.Count <= 0)
            {
                return;
            }

            foreach (var t in spawns)
            {
                if (t.spawnPoint == null)
                {
                    continue;
                }

                var transform = t.spawnPoint;

                var position = transform.position;
                var rotation = transform.rotation;

                t.spawnPoint.position = Handles.PositionHandle(position, rotation);
            }
        }

        #endregion

        #endregion

        #region Custom Editor

        #region Private Variables

        private int _totalSpawnPoints;
        private int _prevTotalSpawnPoints;
        private int _totalEnemies;
        private int _prevTotalEnemies;
        private GUIStyle _title;
        private readonly GUILayoutOption _layoutOption = GUILayout.Width(280);

        #endregion

        #region Public Functions

        public override void OnInspectorGUI()
        {
            serializedObject.Update();

            GUILayout.Label("Spawns Data", _title);

            EditorGUILayout.Space();

            EnemiesOptions();

            EditorGUILayout.Space();

            SpawnPointsOptions();

            EditorGUILayout.Space();

            CountRestriction();

            EditorGUILayout.Space();

            TimeRestriction();

            EditorGUILayout.Space();

            LayersRestriction();

            serializedObject.ApplyModifiedProperties();

            if (GUI.changed)
                EditorUtility.SetDirty(target);
        }

        #endregion

        #region Private Functions

        private void EnemiesOptions()
        {
            EditorGUILayout.BeginHorizontal();

            GUILayout.Label("Enemies");
            _totalEnemies = EditorGUILayout.IntSlider(_totalEnemies, 0, 5, _layoutOption);

            EditorGUILayout.EndHorizontal();

            EditorGUILayout.Space();

            if (GUILayout.Button("Create Enemies"))
            {
                if (_totalEnemies == _prevTotalEnemies)
                {
                    return;
                }

                if (_totalEnemies < _prevTotalEnemies && _totalEnemies > 0)
                {
                    _spawnerManager.enemies.RemoveRange(_totalEnemies, _prevTotalEnemies - _totalEnemies);
                }
                else if (_totalEnemies > _prevTotalEnemies)
                {
                    for (var i = 0; i < _totalEnemies - _prevTotalEnemies; i++)
                    {
                        _spawnerManager.enemies.Add(new SpawnData());
                    }
                }
                else if (_totalEnemies <= 0)
                {
                    _spawnerManager.enemies.Clear();
                    return;
                }

                _prevTotalEnemies = _totalEnemies;
            }

            EditorGUILayout.Space();

            var spawns = _spawnerManager.GetEnemies();

            foreach (var t in spawns)
            {
                EditorGUILayout.BeginHorizontal();

                t.name = EditorGUILayout.TextField("Name", t.name, _layoutOption);

                EditorGUILayout.EndHorizontal();

                EditorGUILayout.BeginHorizontal();

                GUILayout.Label("Enemy Spawn");
                // t.enemySpawn =
                //     EditorGUILayout.ObjectField(t.enemySpawn, typeof(EnemySpawn), true, _layoutOption) as EnemySpawn;

                EditorGUILayout.EndHorizontal();

                EditorGUILayout.BeginHorizontal();

                GUILayout.Label("Max Type Enemies");
                t.maxCount = EditorGUILayout.IntField(t.maxCount, _layoutOption);

                EditorGUILayout.EndHorizontal();

                EditorGUILayout.BeginHorizontal();

                GUILayout.Label("Probability");
                t.probability = EditorGUILayout.FloatField(t.probability, _layoutOption);

                EditorGUILayout.EndHorizontal();

                EditorGUILayout.Space(10);
            }
        }

        private void SpawnPointsOptions()
        {
            EditorGUILayout.BeginHorizontal();

            GUILayout.Label("Spawn Points");
            _totalSpawnPoints = EditorGUILayout.IntSlider(_totalSpawnPoints, 0, 5, _layoutOption);

            EditorGUILayout.EndHorizontal();

            EditorGUILayout.Space();

            if (GUILayout.Button("Create Spawn Points"))
            {
                if (_totalSpawnPoints == _prevTotalSpawnPoints)
                {
                    return;
                }

                if (_totalSpawnPoints < _prevTotalSpawnPoints)
                {
                    _spawnerManager.spawnPoints.RemoveRange(_totalSpawnPoints, _prevTotalSpawnPoints - _totalSpawnPoints);
                }
                else if (_totalSpawnPoints > _prevTotalSpawnPoints)
                {
                    for (var i = 0; i < _totalSpawnPoints - _prevTotalSpawnPoints; i++)
                    {
                        _spawnerManager.spawnPoints.Add(new SpawnPointData());
                    }
                }
                else if (_spawnerManager.spawnPoints.Count <= 0)
                {
                    _spawnerManager.spawnPoints.Clear();
                    return;
                }

                _prevTotalSpawnPoints = _totalSpawnPoints;
            }

            EditorGUILayout.Space();

            var spawns = _spawnerManager.GetSpawnPoints();

            foreach (var t in spawns)
            {
                EditorGUILayout.BeginHorizontal();

                EditorGUILayout.TextField("Name", t.spawnPoint.name);

                EditorGUILayout.EndHorizontal();

                EditorGUILayout.BeginHorizontal();

                GUILayout.Label("Spawn Point");
                t.spawnPoint =
                    EditorGUILayout.ObjectField(t.spawnPoint, typeof(Transform), true, _layoutOption) as Transform;

                EditorGUILayout.EndHorizontal();

                EditorGUILayout.BeginHorizontal();

                GUILayout.Label("Detection Area");
                t.detectionArea = EditorGUILayout.FloatField(t.detectionArea, _layoutOption);

                EditorGUILayout.EndHorizontal();

                EditorGUILayout.BeginHorizontal();

                GUILayout.Label("Spawn Area");
                t.spawnArea = EditorGUILayout.FloatField(t.spawnArea, _layoutOption);

                EditorGUILayout.EndHorizontal();

                EditorGUILayout.Space(10);
            }
        }

        private void CountRestriction()
        {
            GUILayout.Label("Count Restriction", _title);

            EditorGUILayout.Space();

            _spawnerManager.maxLivingEnemies = EditorGUILayout.IntField("Max Enemies Alive", _spawnerManager.maxLivingEnemies);

            _spawnerManager.maxSpawnedEnemies = EditorGUILayout.IntField("Max Enemies Spawned", _spawnerManager.maxSpawnedEnemies);
        }

        private void TimeRestriction()
        {
            GUILayout.Label("Time Restriction", _title);

            EditorGUILayout.Space();

            _spawnerManager.spawnRate = EditorGUILayout.FloatField("Spawn Rate", _spawnerManager.spawnRate);
        }

        private void LayersRestriction()
        {
            GUILayout.Label("Layers Restriction", _title);

            EditorGUILayout.Space();

            _spawnerManager.spawnObstacleMask = EditorGUILayout.MaskField("Spawn Obstacle Mask",
                InternalEditorUtility.LayerMaskToConcatenatedLayersMask(_spawnerManager.spawnObstacleMask),
                InternalEditorUtility.layers);

            _spawnerManager.playerMask = EditorGUILayout.MaskField("Player Mask",
                InternalEditorUtility.LayerMaskToConcatenatedLayersMask(_spawnerManager.playerMask),
                InternalEditorUtility.layers);
        }

        #endregion

        #endregion
    }
}