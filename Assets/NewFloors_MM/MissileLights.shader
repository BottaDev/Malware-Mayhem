// Made with Amplify Shader Editor
// Available at the Unity Asset Store - http://u3d.as/y3X 
Shader "MissileLights"
{
	Properties
	{
		_MissileCircle_Mask_BigCircle("MissileCircle_Mask_BigCircle", 2D) = "white" {}
		_MissileCircle_Mask_LittleCircle("MissileCircle_Mask_LittleCircle", 2D) = "white" {}
		_MissileCircle_Mask_MiddleCircle("MissileCircle_Mask_MiddleCircle", 2D) = "white" {}
		_Progress("Progress", Range( 0 , 3)) = 0
		_Color("Color", Color) = (0.3677911,0.4858458,0.8962264,0)
		[HideInInspector] _texcoord( "", 2D ) = "white" {}
		[HideInInspector] __dirty( "", Int ) = 1
	}

	SubShader
	{
		Tags{ "RenderType" = "Transparent"  "Queue" = "Transparent+0" "IgnoreProjector" = "True" "IsEmissive" = "true"  }
		Cull Back
		CGINCLUDE
		#include "UnityPBSLighting.cginc"
		#include "Lighting.cginc"
		#pragma target 3.0
		struct Input
		{
			float2 uv_texcoord;
		};

		uniform float4 _Color;
		uniform float _Progress;
		uniform sampler2D _MissileCircle_Mask_BigCircle;
		uniform float4 _MissileCircle_Mask_BigCircle_ST;
		uniform sampler2D _MissileCircle_Mask_MiddleCircle;
		uniform float4 _MissileCircle_Mask_MiddleCircle_ST;
		uniform sampler2D _MissileCircle_Mask_LittleCircle;
		uniform float4 _MissileCircle_Mask_LittleCircle_ST;

		void surf( Input i , inout SurfaceOutputStandard o )
		{
			o.Emission = _Color.rgb;
			float clampResult15 = clamp( ( _Progress - 2.0 ) , 0.0 , 1.0 );
			float2 uv_MissileCircle_Mask_BigCircle = i.uv_texcoord * _MissileCircle_Mask_BigCircle_ST.xy + _MissileCircle_Mask_BigCircle_ST.zw;
			float clampResult16 = clamp( ( _Progress - 1.0 ) , 0.0 , 1.0 );
			float2 uv_MissileCircle_Mask_MiddleCircle = i.uv_texcoord * _MissileCircle_Mask_MiddleCircle_ST.xy + _MissileCircle_Mask_MiddleCircle_ST.zw;
			float clampResult17 = clamp( ( _Progress - 0.0 ) , 0.0 , 1.0 );
			float2 uv_MissileCircle_Mask_LittleCircle = i.uv_texcoord * _MissileCircle_Mask_LittleCircle_ST.xy + _MissileCircle_Mask_LittleCircle_ST.zw;
			o.Alpha = ( ( clampResult15 * tex2D( _MissileCircle_Mask_BigCircle, uv_MissileCircle_Mask_BigCircle ) ) + ( clampResult16 * tex2D( _MissileCircle_Mask_MiddleCircle, uv_MissileCircle_Mask_MiddleCircle ) ) + ( clampResult17 * tex2D( _MissileCircle_Mask_LittleCircle, uv_MissileCircle_Mask_LittleCircle ) ) ).r;
		}

		ENDCG
		CGPROGRAM
		#pragma surface surf Standard alpha:fade keepalpha fullforwardshadows 

		ENDCG
		Pass
		{
			Name "ShadowCaster"
			Tags{ "LightMode" = "ShadowCaster" }
			ZWrite On
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			#pragma target 3.0
			#pragma multi_compile_shadowcaster
			#pragma multi_compile UNITY_PASS_SHADOWCASTER
			#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
			#include "HLSLSupport.cginc"
			#if ( SHADER_API_D3D11 || SHADER_API_GLCORE || SHADER_API_GLES || SHADER_API_GLES3 || SHADER_API_METAL || SHADER_API_VULKAN )
				#define CAN_SKIP_VPOS
			#endif
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"
			sampler3D _DitherMaskLOD;
			struct v2f
			{
				V2F_SHADOW_CASTER;
				float2 customPack1 : TEXCOORD1;
				float3 worldPos : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};
			v2f vert( appdata_full v )
			{
				v2f o;
				UNITY_SETUP_INSTANCE_ID( v );
				UNITY_INITIALIZE_OUTPUT( v2f, o );
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( o );
				UNITY_TRANSFER_INSTANCE_ID( v, o );
				Input customInputData;
				float3 worldPos = mul( unity_ObjectToWorld, v.vertex ).xyz;
				half3 worldNormal = UnityObjectToWorldNormal( v.normal );
				o.customPack1.xy = customInputData.uv_texcoord;
				o.customPack1.xy = v.texcoord;
				o.worldPos = worldPos;
				TRANSFER_SHADOW_CASTER_NORMALOFFSET( o )
				return o;
			}
			half4 frag( v2f IN
			#if !defined( CAN_SKIP_VPOS )
			, UNITY_VPOS_TYPE vpos : VPOS
			#endif
			) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID( IN );
				Input surfIN;
				UNITY_INITIALIZE_OUTPUT( Input, surfIN );
				surfIN.uv_texcoord = IN.customPack1.xy;
				float3 worldPos = IN.worldPos;
				half3 worldViewDir = normalize( UnityWorldSpaceViewDir( worldPos ) );
				SurfaceOutputStandard o;
				UNITY_INITIALIZE_OUTPUT( SurfaceOutputStandard, o )
				surf( surfIN, o );
				#if defined( CAN_SKIP_VPOS )
				float2 vpos = IN.pos;
				#endif
				half alphaRef = tex3D( _DitherMaskLOD, float3( vpos.xy * 0.25, o.Alpha * 0.9375 ) ).a;
				clip( alphaRef - 0.01 );
				SHADOW_CASTER_FRAGMENT( IN )
			}
			ENDCG
		}
	}
	Fallback "Diffuse"
	CustomEditor "ASEMaterialInspector"
}
/*ASEBEGIN
Version=18900
24;71;1104;513;1047.901;128.8798;1.33376;True;False
Node;AmplifyShaderEditor.RangedFloatNode;7;-929.648,-101.4043;Inherit;False;Property;_Progress;Progress;3;0;Create;True;0;0;0;False;0;False;0;0;0;3;0;1;FLOAT;0
Node;AmplifyShaderEditor.SimpleSubtractOpNode;11;-507.2073,273.7704;Inherit;True;2;0;FLOAT;0;False;1;FLOAT;1;False;1;FLOAT;0
Node;AmplifyShaderEditor.SimpleSubtractOpNode;13;-507.207,494.2124;Inherit;True;2;0;FLOAT;0;False;1;FLOAT;0;False;1;FLOAT;0
Node;AmplifyShaderEditor.SimpleSubtractOpNode;12;-511.8318,59.49472;Inherit;True;2;0;FLOAT;0;False;1;FLOAT;2;False;1;FLOAT;0
Node;AmplifyShaderEditor.SamplerNode;2;-511.9788,1136.768;Inherit;True;Property;_MissileCircle_Mask_LittleCircle;MissileCircle_Mask_LittleCircle;1;0;Create;True;0;0;0;False;0;False;-1;ba5c512c688972744aca96937b8d834e;ba5c512c688972744aca96937b8d834e;True;0;False;white;Auto;False;Object;-1;Auto;Texture2D;8;0;SAMPLER2D;;False;1;FLOAT2;0,0;False;2;FLOAT;0;False;3;FLOAT2;0,0;False;4;FLOAT2;0,0;False;5;FLOAT;1;False;6;FLOAT;0;False;7;SAMPLERSTATE;;False;5;COLOR;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4
Node;AmplifyShaderEditor.SamplerNode;1;-498.6713,751.2482;Inherit;True;Property;_MissileCircle_Mask_BigCircle;MissileCircle_Mask_BigCircle;0;0;Create;True;0;0;0;False;0;False;-1;a290e947f4393494193738be6833ee0c;a290e947f4393494193738be6833ee0c;True;0;False;white;Auto;False;Object;-1;Auto;Texture2D;8;0;SAMPLER2D;;False;1;FLOAT2;0,0;False;2;FLOAT;0;False;3;FLOAT2;0,0;False;4;FLOAT2;0,0;False;5;FLOAT;1;False;6;FLOAT;0;False;7;SAMPLERSTATE;;False;5;COLOR;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4
Node;AmplifyShaderEditor.SamplerNode;3;-509.5604,943.6522;Inherit;True;Property;_MissileCircle_Mask_MiddleCircle;MissileCircle_Mask_MiddleCircle;2;0;Create;True;0;0;0;False;0;False;-1;05639f42584e0fa439c612d1f53aafd9;05639f42584e0fa439c612d1f53aafd9;True;0;False;white;Auto;False;Object;-1;Auto;Texture2D;8;0;SAMPLER2D;;False;1;FLOAT2;0,0;False;2;FLOAT;0;False;3;FLOAT2;0,0;False;4;FLOAT2;0,0;False;5;FLOAT;1;False;6;FLOAT;0;False;7;SAMPLERSTATE;;False;5;COLOR;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4
Node;AmplifyShaderEditor.ClampOpNode;16;-266.2866,275.8688;Inherit;False;3;0;FLOAT;0;False;1;FLOAT;0;False;2;FLOAT;1;False;1;FLOAT;0
Node;AmplifyShaderEditor.ClampOpNode;17;-256.4654,496.8482;Inherit;False;3;0;FLOAT;0;False;1;FLOAT;0;False;2;FLOAT;1;False;1;FLOAT;0
Node;AmplifyShaderEditor.ClampOpNode;15;-271.1972,64.71064;Inherit;False;3;0;FLOAT;0;False;1;FLOAT;0;False;2;FLOAT;1;False;1;FLOAT;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;20;-21.90369,574.7216;Inherit;False;2;2;0;FLOAT;0;False;1;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;18;-58.55469,167.7025;Inherit;False;2;2;0;FLOAT;0;False;1;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.SimpleMultiplyOpNode;19;-52.7677,341.3126;Inherit;False;2;2;0;FLOAT;0;False;1;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.SimpleAddOpNode;4;139.9422,376.0107;Inherit;True;3;3;0;COLOR;0,0,0,0;False;1;COLOR;0,0,0,0;False;2;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.ColorNode;5;199.8568,-11.15625;Inherit;False;Property;_Color;Color;4;0;Create;True;0;0;0;False;0;False;0.3677911,0.4858458,0.8962264,0;0.3677911,0.4858458,0.8962264,0;True;0;5;COLOR;0;FLOAT;1;FLOAT;2;FLOAT;3;FLOAT;4
Node;AmplifyShaderEditor.StandardSurfaceOutputNode;0;560.155,189.4389;Float;False;True;-1;2;ASEMaterialInspector;0;0;Standard;MissileLights;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;False;False;False;False;False;False;Back;0;False;-1;0;False;-1;False;0;False;-1;0;False;-1;False;0;Transparent;0.5;True;True;0;False;Transparent;;Transparent;All;14;all;True;True;True;True;0;False;-1;False;0;False;-1;255;False;-1;255;False;-1;0;False;-1;0;False;-1;0;False;-1;0;False;-1;0;False;-1;0;False;-1;0;False;-1;0;False;-1;False;2;15;10;25;False;0.5;True;2;5;False;-1;10;False;-1;0;0;False;-1;0;False;-1;0;False;-1;0;False;-1;0;False;0;0,0,0,0;VertexOffset;True;False;Cylindrical;False;Relative;0;;-1;-1;-1;-1;0;False;0;0;False;-1;-1;0;False;-1;0;0;0;False;0.1;False;-1;0;False;-1;False;16;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT;0;False;4;FLOAT;0;False;5;FLOAT;0;False;6;FLOAT3;0,0,0;False;7;FLOAT3;0,0,0;False;8;FLOAT;0;False;9;FLOAT;0;False;10;FLOAT;0;False;13;FLOAT3;0,0,0;False;11;FLOAT3;0,0,0;False;12;FLOAT3;0,0,0;False;14;FLOAT4;0,0,0,0;False;15;FLOAT3;0,0,0;False;0
WireConnection;11;0;7;0
WireConnection;13;0;7;0
WireConnection;12;0;7;0
WireConnection;16;0;11;0
WireConnection;17;0;13;0
WireConnection;15;0;12;0
WireConnection;20;0;17;0
WireConnection;20;1;2;0
WireConnection;18;0;15;0
WireConnection;18;1;1;0
WireConnection;19;0;16;0
WireConnection;19;1;3;0
WireConnection;4;0;18;0
WireConnection;4;1;19;0
WireConnection;4;2;20;0
WireConnection;0;2;5;0
WireConnection;0;9;4;0
ASEEND*/
//CHKSM=FD92A88872A67F9250C08F75B7AA65A6D4CEDC1A