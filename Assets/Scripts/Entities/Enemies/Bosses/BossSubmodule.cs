using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using MM.Entities.Player.Arms;
using MM.Entities.Player;
using MM.Events;
using MM.Gameplay;
using UnityEngine;
using Random = UnityEngine.Random;

namespace MM.Entities.Enemies.Bosses
{
    public class BossSubmodule : Entity
    {
        #region Private Variables
        [Header("Submodule Parameters")]
        [SerializeField] private int submoduleIndex;
        [SerializeField] private List<SubModulePhase> attackPhases;
        [Tooltip("The type of bullet it must be to take damage")]
        [SerializeField] private PlayerArm.ArmType armType;
        [Header("Stun Parameters")]
        [SerializeField] private float stunTime = 5f;
        [Tooltip("The percentage that the module recovers when leaving the stun state")]
        [SerializeField, Range(1, 100)] private float recoveryPercentage = 50f;
        [Header("Objects")]
        [SerializeField] protected GameObject absorbEffect;
        [SerializeField] protected GameObject lockedEffects;
        [Header("Model")]
        [SerializeField] private Color subBossColor;
        [SerializeField] private Color defaultSubBossColor;

        [SerializeField] private bool cantStun;
    
        [HideInInspector]public bool wasAbsorbed;
        private Boss _boss;
        private bool _isStunned;
        private bool _canAttack = true;
        private bool _isInvulnerable;
        private bool _isEnraged;
        private float _currentAttackTime;
        private int _currentPhase;
        private Outline _outline;
        private Material _material;
        private PlayerController _player;
        private Color _currentColor;
        private int _lastAttackIndex = -1;
        private static readonly int EmissionColor = Shader.PropertyToID("_EmissionColor");
        private static readonly int AlbedoColor = Shader.PropertyToID("_Color");
        #endregion

        #region MonoBehaviour Functions
        protected override void Awake()
        {
            base.Awake();
            _outline = GetComponent<Outline>();

            var render = GetComponentInChildren<Renderer>();
            foreach (var material in render.materials)
            {
                if (material.name.Contains("Emissive"))
                {
                    _material = material;
                }
            }

            _currentColor = defaultSubBossColor;
        }

        private void Start()
        {
            _boss = GetComponentInParent<Boss>();
            _player = LevelManager.Instance.GetPlayer().gameObject.GetComponent<PlayerController>();
        
            OutlineModule();
        
            EventManager.Instance.Subscribe(NameEvent.OnReturnedBoss, OnReturnedBoss);
            EventManager.Instance.Subscribe(NameEvent.OnAbsorbedSubmodule, OnAbsorbedSubmodule);
            EventManager.Instance.Subscribe(NameEvent.OnPostProcessFinished, OnPostProcessFinished);
            EventManager.Instance.Subscribe(NameEvent.OnArmChanged, OnArmChanged);
        }
        #endregion
        
        #region Public Functions
        public void MakeAction()
        {
            if (_isStunned || !_canAttack || attackPhases.Count == 0)
                return;

            if (attackPhases.Count > 2)
            {
                var availableAttacks = attackPhases[_currentPhase].attacks.Where((_, index) => index != _lastAttackIndex)
                    .ToList();
                var randomAttackIndex = Random.Range(0, availableAttacks.Count);

                var randomAttack = availableAttacks[randomAttackIndex];
                _lastAttackIndex = attackPhases[_currentPhase].attacks.IndexOf(randomAttack);
            }
            else if (attackPhases.Any())
            {
                _lastAttackIndex = Random.Range(0, attackPhases[_currentPhase].attacks.Count);
            }
        
            var attack = attackPhases[_currentPhase].attacks[_lastAttackIndex];
            attack.MakeAction();
            _currentAttackTime = attack.GetTimeAfterExecuting();
        }

        public void ChangePhase()
        {
            _lastAttackIndex = -1;
            _currentPhase++;

            // If the current phase is greater than the amount of phases, don't attack
            _isStunned = _currentPhase >= attackPhases.Count;
        }
        
        public bool GetIsStunned()
        {
            return _isStunned;
        }
        
        public void TransmitDamage(float damage, PlayerArm.ArmType aType = PlayerArm.ArmType.None, bool showDamage = true)
        {
            if(_boss != null)
                _boss.TakeDamage(damage, aType, showDamage);
        }
    
        public float GetTimeAfterExecuting()
        {
            return _currentAttackTime;
        }
        
        public override void TakeDamage(float damage, PlayerArm.ArmType aType = PlayerArm.ArmType.None, bool showDamage = true)
        {
            if (_isInvulnerable ||
                _isEnraged ||
                aType != armType)
            {
                return;   
            }

            _currentHp -= damage;
        
            if(showDamage)
                StartCoroutine(ShowDamage());
        
            if (_currentHp <= 0)
            {
                if(cantStun)
                {
                    DestroyModule();
                }
                else
                {
                    StartCoroutine(StunModule());
                }
            }
        }
        
        public int GetSubmoduleIndex()
        {
            return submoduleIndex;
        }
        #endregion
    
        #region Private Functions
        protected virtual IEnumerator StunModule()
        {
            Stun();
        
            yield return new WaitForSeconds(stunTime);

            RecoverFromStun();
        }

        private void Stun()
        {
            _isInvulnerable = true;
            _isStunned = true;
        
            EventManager.Instance.Trigger(NameEvent.OnStunnedSubmodule, submoduleIndex);

            absorbEffect.SetActive(true);
        }
    
        private void RecoverFromStun()
        {
            if (absorbEffect != null)
                absorbEffect.SetActive(false);

            _isStunned = false;
        
            var newHp = (recoveryPercentage * hp) / 100;
            _currentHp = newHp;
        
            _isInvulnerable = false;
        }

        protected override IEnumerator ShowDamage()
        {
            var renderers = allRenderers.Where(x => x != null).ToArray();
            foreach (var item in renderers)
                item.material = damagedMat;

            yield return new WaitForSeconds(.15f);

            ChangeMaterial();
        }

        private void ChangeMaterial()
        {
            for (var i = 0; i < allRenderers.Length; i++)
            {
                allRenderers[i].material = baseMats[i];
            }

            _material.SetColor(EmissionColor, _currentColor);
            _material.SetColor(AlbedoColor, _currentColor);
        }

        /// <summary>
        /// Makes the boss enter the enraged state. Cannot be damaged
        /// </summary>
        private void StartEnragedState()
        {
            _isInvulnerable = true;
            _isEnraged = true;
        
            // Disable outline
            _outline.enabled = false;
            _material.SetColor(EmissionColor, defaultSubBossColor);
            _material.SetColor(AlbedoColor, defaultSubBossColor);
            _currentColor = defaultSubBossColor;
        
            // Show the locked effects
            lockedEffects.SetActive(true);
        }
    
        private void DestroyModule()
        {
            if(_boss != null)
                _boss.ChangePatternPhase();
            EventManager.Instance.Trigger(NameEvent.OnBossSubmoduleDeath, gameObject);
            Destroy(gameObject);
        }
        
        private void OutlineModule()
        {
            if (this == null || !gameObject.activeInHierarchy) { return; }
        
            var arms = _player.GetCurrentArmsType();

            // Ensure that the player has arms
            if (arms.Item1 == null || arms.Item2 == null) { return; }
            
            var arm1 = arms.Item1.GetArmType();
            var arm2 = arms.Item2.GetArmType();
        
            if(_outline != null)
            {
                _outline.enabled = arm1 == armType || arm2 == armType;
            }
        
            if(arm1 == armType || arm2 == armType)
            {
                _material.SetColor(EmissionColor, subBossColor);
                _material.SetColor(AlbedoColor, subBossColor);
                _currentColor = subBossColor;
            }
            else
            {
                _material.SetColor(EmissionColor, defaultSubBossColor);
                _material.SetColor(AlbedoColor, defaultSubBossColor);
                _currentColor = defaultSubBossColor;
            }
        }
        #endregion

        #region Events
        private void OnArmChanged(params object[] parameters)
        {
            if (_isEnraged)
                return;
        
            OutlineModule();
        }
        
        private void OnReturnedBoss(params object[] parameters)
        {
            if((int)parameters[1] != submoduleIndex) 
                return;
        
            var won = (bool) parameters[0];
            if (won)
            {
                DestroyModule();
            }
            else
            {
                RecoverFromStun();
                StartEnragedState();
                _canAttack = true;
            }
        }

        private void OnAbsorbedSubmodule(params object[] parameters)
        {
            _canAttack = false;
        }

        private void OnPostProcessFinished(params object[] parameters)
        {
            _canAttack = true;
        }
        #endregion
        
        [Serializable]
        public class SubModulePhase
        {
            public string name = "Phase";
            public List<SubmoduleAttack> attacks;
        }
    }
}
