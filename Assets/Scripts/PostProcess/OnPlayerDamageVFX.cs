using System.Collections;
using UnityEngine;
using MM.Events;
using UnityEngine.Rendering.PostProcessing;

/// <summary>
/// Paints the sides of the screen red when the player takes damage
/// </summary>
public class OnPlayerDamageVFX : MonoBehaviour
{
    #region Private Variables
    [SerializeField]
    private float duration = 0.7f;
    
    private PostProcessVolume _volume;
    #endregion

    #region MonoBehaviour Functions
    private void Start()
    {
        EventManager.Instance.Subscribe(NameEvent.OnPlayerDamaged, OnPlayerDamaged);
        
        _volume = GetComponent<PostProcessVolume>();
    }
    #endregion

    #region Events
    private void OnPlayerDamaged(params object[] parameters)
    {
        if (this != null && gameObject.activeInHierarchy)
            StartCoroutine(DamageTakenVFX());
    }
    #endregion
    
    #region Private Functions
    private IEnumerator DamageTakenVFX()
    {
        const int maxVolume = 1;
        const int steps = 15;
        
        var stepTime = duration / (float)steps;
        for (var i = 0; i < steps; i++)
        {
            _volume.weight = Mathf.Lerp(maxVolume, 0, (float)i / steps);
            yield return new WaitForSeconds(stepTime);
        }
    }
    #endregion
}
