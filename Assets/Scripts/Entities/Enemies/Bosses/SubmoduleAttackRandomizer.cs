using System;
using System.Linq;
using System.Collections.Generic;
using UnityEngine;
using Random = UnityEngine.Random;

public class SubmoduleAttackRandomizer : MonoBehaviour, IUpdatable
{
    [SerializeField] private List<BossSubmodule> submodules;
    [SerializeField] private float startFireRate = 10f;

    private float _currentFireRate;
    private bool _canAttack;

    private void Awake()
    {
        _currentFireRate = startFireRate;
    }

    private void Start()
    {
        EventManager.Instance.Subscribe("OnReturnedBoss", OnReturnedBoss);
        EventManager.Instance.Subscribe("OnInitialAttackWait", OnInitialAttackWait);
    }

    private void OnEnable()
    {
        UpdateManager.Instance.updates.Add(this);
    }

    private void OnDisable()
    {
        UpdateManager.Instance.updates.Remove(this);
    }

    public void FalseUpdate()
    {        
        if (!_canAttack)
            return;
        
        if (_currentFireRate <= 0)
            SelectRandomModule();
        else
            _currentFireRate -= Time.deltaTime;
    }
    
    private void SelectRandomModule()
    {
        var randomSubmodule = submodules.Where(submodule => !submodule.GetIsStunned())
                                        .OrderBy(_ => Random.value).FirstOrDefault();

        if (randomSubmodule == null)
        {
            _currentFireRate = startFireRate;
            return;   
        }

        randomSubmodule.MakeAction();
        _currentFireRate = randomSubmodule.GetTimeAfterExecuting();
    }

    private void OnReturnedBoss(params object[] parameters)
    {
        Invoke(nameof(CheckSubmodulesActive), .1f);
    }

    private void OnInitialAttackWait(params object[] parameters)
    {
        _canAttack = true;
    }
    
    private void CheckSubmodulesActive()
    {
        for (int i = 0; i < submodules.Count; i++)
        {
            if (submodules[i] == null)
                submodules.Remove(submodules[i]);
        }

        if (submodules.Count == 0)
            enabled = false;
    }
}
