using System;
using System.Collections.Generic;
using System.Linq;
using UnityEditor;
using UnityEngine;
using Random = UnityEngine.Random;

[System.Serializable]
public class Spawner : MonoBehaviour
{
    [SerializeField]private SpawnData[] enemies;
    [SerializeField]private SpawnPointData[] spawnPoints;
    [Header("Count Restriction")]
    [SerializeField]private int maxLivingEnemies;
    [SerializeField]private int maxSpawnedEnemies;
    [Header("Time Restriction")]
    [SerializeField]private float spawnRate;
    [Header("Layers")]
    [SerializeField]private LayerMask spawnObstacleMask;
    [SerializeField]private LayerMask playerMask;
    [Header("Usability")]
    [SerializeField]private bool stopSpawn;
    
    private float _currentSpawnRate;
    private int _currentEnemyCount;
    private int _currentSpawnedEnemies;

    private void Start()
    {
        EventManager.Instance.Subscribe("OnEnemyDead", OnEnemyDead);
        EventManager.Instance.Subscribe("OnEnemySpawn", OnEnemySpawn);
    }

    private void Update()
    {
        if (stopSpawn || 
            _currentEnemyCount >= maxLivingEnemies ||
            _currentSpawnedEnemies >= maxSpawnedEnemies)
            return;
        
        TryToSpawn();
    }

    private void TryToSpawn()
    {
        if (_currentSpawnRate <= 0)
        {
            SpawnData enemy = GetEnemy();
            
            if (enemy == null)
                return;
            
            SpawnPointData spawnPoint = GetSpawnPoint();
            
            SpawnEnemy(spawnPoint, enemy);   
        }
        else
        {
            _currentSpawnRate -= Time.deltaTime;
        }
    }
    
    private SpawnData GetEnemy()
    {
        var enemiesToSpawn = enemies.Where(enemy => enemy.currentSpawnCount < enemy.maxCount).ToList();
        
        if(enemiesToSpawn.Count == 0)
            return null;
        
        var totalProbability = enemiesToSpawn.Sum(enemy => enemy.probability);

        var random = Random.Range(0, totalProbability);
        float currentProbability = 0;
        foreach (SpawnData enemy in enemiesToSpawn)
        {
            currentProbability += enemy.probability;
            if (random <= currentProbability)
                return enemy;
        }
        
        return enemiesToSpawn[0];
    }
    
    private SpawnPointData GetSpawnPoint()
    {
        if (spawnPoints.Length == 0)
            return null;

        List<SpawnPointData> pos = new List<SpawnPointData>();

        foreach (var point in spawnPoints)
        {
            var position = point.spawnPoint.transform.position;
            
            // Check if the player is inside the areas
            var spawnAreaCollision = Physics.OverlapSphere(position, point.spawnArea, playerMask);
            var detectionAreaCollision = Physics.OverlapSphere(position, point.detectionArea, playerMask);
            
            bool inSpawnArea = spawnAreaCollision.Length > 0; 
            bool inDetectionArea = detectionAreaCollision.Length > 0;
            
            if (inDetectionArea && !inSpawnArea)
                pos.Add(point);
        }

        // Return random spawn point if player is not in any detection area
        if (pos.Count == 0)
            return spawnPoints[Random.Range(0, spawnPoints.Length)];
        
        return pos[Random.Range(0, pos.Count)];
    }

    private Vector3 GetRandomPosition(SpawnPointData spawnPointData)
    {
        var randomPosition = Random.insideUnitSphere * spawnPointData.spawnArea + spawnPointData.spawnPoint.position;
        randomPosition.y = 0.1f;
        var colliders = Physics.OverlapSphere(randomPosition, 0.1f, spawnObstacleMask);
        
        return colliders.Length > 0 ? GetRandomPosition(spawnPointData) : randomPosition;
    }
    
    private void SpawnEnemy(SpawnPointData spawnPointData, SpawnData spawnData)
    {
        _currentEnemyCount++;
        _currentSpawnedEnemies++;

        Vector3 position = GetRandomPosition(spawnPointData);
        Instantiate(spawnData.enemySpawn, position, Quaternion.identity);
        
        _currentSpawnRate = spawnRate;
    }
    
    // -------------------
    // ENEMY ORDER:
    // 0 - LaserPorter
    // 1 - AssaultBox
    // 2 - Shielder
    // -------------------
    private void OnEnemySpawn(params object[] parameters)
    {
        switch ((Enemy.EnemyType) parameters[0])
        {
            case Enemy.EnemyType.LaserPorter:
                enemies[0].currentSpawnCount++;
                break;
            case Enemy.EnemyType.AssaultBox:
                enemies[1].currentSpawnCount++;
                break;
            case Enemy.EnemyType.Shielder:
                enemies[2].currentSpawnCount++;
                break;
        }
    }

    private void OnEnemyDead(params object[] parameters)
    {
        switch ((Enemy.EnemyType) parameters[0])
        {
            case Enemy.EnemyType.LaserPorter:
                enemies[0].currentSpawnCount--;
                break;
            case Enemy.EnemyType.AssaultBox:
                enemies[1].currentSpawnCount--;
                break;
            case Enemy.EnemyType.Shielder:
                enemies[2].currentSpawnCount--;
                break;
        }
        
        _currentEnemyCount--;
    }
    
    // Should be used when there's more than one spawner in the level
    public void SetCanSpawn(bool stopSpawn)
    {
        this.stopSpawn = stopSpawn;
    }

    public SpawnPointData[] GetSpawnPoints()
    {
        return spawnPoints;
    }

    private void OnDrawGizmosSelected()
    {
        foreach (var point in spawnPoints)
        {
            if (point.spawnPoint != null)
            {
                var position = point.spawnPoint.position;
            
                Gizmos.color = Color.magenta;
                Gizmos.DrawWireSphere (position, point.spawnArea);
                Gizmos.color = Color.yellow;
                Gizmos.DrawWireSphere(position, point.detectionArea);   
            }
        }
    }
    
    [System.Serializable]
    public class SpawnData
    {
        public string name;
        public EnemySpawn enemySpawn;
        public int maxCount = 5;
        [Range(0, 1)]
        public float probability;
        
        [HideInInspector] public int currentSpawnCount = 0;
    }

    [System.Serializable]
    public class SpawnPointData
    {
        public string name;
        public Transform spawnPoint;
        public float detectionArea;
        public float spawnArea;   
    }
}
