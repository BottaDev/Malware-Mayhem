using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using DG.Tweening;

public class UIManager : MonoBehaviour
{
    public static UIManager Instance = null;

    [Header("[HUD] Player")] 
    public UIHealthBar playerHealthBar;
    public List<UIBar> leftBars = new List<UIBar>();
    public List<UIBar> rightBars = new List<UIBar>();
    [SerializeField] private GameObject playerBars;
    [SerializeField] private Transform finalPosition;
    [SerializeField] private float animDuration;
    
    [Header("[HUD] Boss")]
    public UIHealthBar bossHealthBar;
    public GameObject bossHealthBarContainer;
    
    [Header("Pause Menu")] 
    public GameObject hud;
    public GameObject pauseMenu;
    
    [Header("Fade")] 
    public GameObject fadeIn;

    [SerializeField] private GameObject absorbMenu;
    
    private UIBar _currentLeftUIBar;
    private UIBar _currentRightUIBar;
    private List<GameObject> _screens;
    private bool _canRefresh = true;

    private const float _maxArmValue = 100f;

    private void Awake()
    {
        if (Instance == null)
            Instance = this;
        
        InitializeArmBars();
        
        _currentLeftUIBar = leftBars[0];
        _currentRightUIBar = rightBars[0];
        
        _screens = new List<GameObject>
        {
            hud,
            pauseMenu
        };
    }

    private void Start()
    {
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnReturnedBoss, OnReturnedBoss);
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnAbsorbedSubmodule, OnAbsorbedSubmodule);
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnPostProcessFinished, OnPostProcessFinished);
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnPlayerSpawned, OnPlayerSpawned);
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnTutorialSkip, OnTutorialSkip);
    }

    public void Resume()
    {
        PauseManager.Instance.ResumeLevel();
    }

    public void ResumeLevel()
    {
        ShowScreen(hud);
    }

    public void ExitLevel()
    {
        PauseManager.Instance.SetLevelSpeed(1);
        SceneLoader.Instance.MainMenu();
    }
    
    public void RestartLevel()
    {
        PauseManager.Instance.SetLevelSpeed(1);
        SceneLoader.RetryLevel();
    }

    public void PauseLevel()
    {
        ShowScreen(pauseMenu);
    }
    
    private void ShowScreen(GameObject screen)
    {
        foreach (var s in _screens)
        {
            s.SetActive(false);
        }
        
        screen.SetActive(true);
    }
    
    private void InitializeArmBars()
    {
        foreach (var bar in leftBars)
        {
            bar.SetMaxValue(_maxArmValue);
        }
        
        foreach (var bar in rightBars)
        {
            bar.SetMaxValue(_maxArmValue);
        }
    }

    public void SetArmEnergy(bool isLeft, float value)
    {
        // Should ignore when is the basic arm
        switch (isLeft)
        {
            case true when _currentLeftUIBar != leftBars[0]:
                _currentLeftUIBar.SetValue(value);
                break;
            case false when _currentRightUIBar != rightBars[0]:
                _currentRightUIBar.SetValue(value);
                break;
        }
    }
    
    public void SetArmBar(bool isLeft, int index)
    {
        var bars = isLeft ? leftBars : rightBars; 
        
        foreach (var bar in bars)
        {
            bar.gameObject.SetActive(false);
        }
        
        bars[index].gameObject.SetActive(true);

        if (isLeft)
            _currentLeftUIBar = bars[index];
        else
            _currentRightUIBar = bars[index];
        
        bars[index].SetValue(_maxArmValue);
    }
    
    public void SetHealthBarValue(float newHealth, bool takingDamage, bool isPlayer)
    {
        var healthBar = isPlayer ? playerHealthBar : bossHealthBar;

        healthBar.SetValue(newHealth);

        StartCoroutine(takingDamage ? 
            healthBar.BlinkBar(Color.red) : 
            healthBar.BlinkBar(Color.green));
    }

    public void SetMaxHealth(float newHealth, bool isPlayer)
    {
        var healthBar = isPlayer ? playerHealthBar : bossHealthBar;
        healthBar.SetMaxValue(newHealth);
    }

    public void StartFadeIn()
    {
        ShowScreen(fadeIn);
    }

    public void ToggleAbsorbMenu(bool active)
    {
        absorbMenu.SetActive(active);
    }
    
    private void OnReturnedBoss(params object[] parameters)
    {
        _canRefresh = false;
        SetBossHealthVisibility(true);
    }
    
    private void OnAbsorbedSubmodule(params object[] parameters)
    {
        _canRefresh = false;
        SetBossHealthVisibility(false);
    }

    private void OnPostProcessFinished(params object[] parameters)
    {
        StartCoroutine(RefreshUI());
    }

    private void OnPlayerSpawned(params object[] parameters)
    {
        playerBars.SetActive(true);
        var finalRectTrans = finalPosition.GetComponent<RectTransform>();
        playerBars.GetComponent<RectTransform>().transform.DOMove(finalRectTrans.position, animDuration).SetEase(Ease.InOutSine);
        //playerBars.transform.DOLocalMove(finalRectTrans.position, animDuration)
            //.SetEase(Ease.InOutSine);
        StartCoroutine(MoveUI());
    }

    private void OnTutorialSkip(params object[] parameters)
    {
        playerBars.transform.DOComplete();
        SetPlayerAsChild();
    }

    private IEnumerator MoveUI()
    {
        yield return new WaitForSecondsRealtime(animDuration);
        SetPlayerAsChild();
    }

    private void SetPlayerAsChild()
    {
        playerBars.transform.parent = finalPosition;
        var finalRectTrans = finalPosition.GetComponent<RectTransform>();
        playerBars.transform.position = finalRectTrans.position;
    }
    
    public void SetBossHealthVisibility(bool visible)
    {
        bossHealthBarContainer.SetActive(visible);
    }

    private IEnumerator RefreshUI()
    {
        yield return new WaitUntil(() => _canRefresh);

        var time = 0f;
        
        // Check if it's the main fight or a submodule fight
        var playerSpawn = FindObjectOfType<PlayerSpawn>();
        
        time = playerSpawn != null ? playerSpawn.fallDelay : 1f;

        yield return new WaitForSeconds(time);

        var playerModel = LevelManager.Instance.GetPlayer();
        
        SetHealthBarValue(playerModel.GetCurrentHealth(), false, true);
        SetArmBar(true, playerModel.GetCurrentArm(true));
        SetArmBar(false, playerModel.GetCurrentArm(false));
        SetArmEnergy(true, playerModel.GetArmEnergy(true));
        SetArmEnergy(false, playerModel.GetArmEnergy(false));
    }

    public void ChangeStatus(bool status)
    {
        _canRefresh = status;
    }
}