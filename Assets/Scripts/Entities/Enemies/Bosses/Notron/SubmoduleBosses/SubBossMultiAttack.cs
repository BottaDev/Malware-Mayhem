using MM.Common;
using System.Collections;
using MM.Entities.Enemies.Bosses;
using MM.Entities.Enemies.Bosses.Notron.SubmoduleBosses;
using UnityEngine;

public class SubBossMultiAttack : SubmoduleAttack
{
    [SerializeField] private string patternName;
    [SerializeField] private bool isCannon;
    [SerializeField] private float initialDelay;
    
    [Header("Bullets Parameters")]
    public float fireRate;
    [Range(0, 10)] public int bulletCount;
    public BossBulletType projectile = BossBulletType.MediumBlue;

    private float _currentTime;
    private CannonSubModules _cannon;
    
    protected override void Start()
    {
        base.Start();
        _cannon = GetComponent<CannonSubModules>();
        _currentTime = timeAfterExecuting;
    }

    private void Update()
    {
        if (_currentTime <= 0)
            MakeAction();
        else
            _currentTime -= Time.deltaTime;
    }

    public override void MakeAction()
    {
        base.MakeAction();
        StartShooting();
        _currentTime = timeAfterExecuting;
    }
    
    private void StartShooting()
    {
        if (this == null || 
            !gameObject.activeInHierarchy) 
            return;
        
        if (isCannon)
            StartCoroutine(CannonBall(initialDelay));
        else
            StartCoroutine(SpawnBullets(fireRate, bulletCount, initialDelay, projectile));
    }

    private IEnumerator CannonBall(float initialDelay)
    {
        yield return new WaitForSeconds(initialDelay);
        
        var position = _cannon.GetShotSpawn().position;
            
        var cannonBall = EnemyPoolManager.Instance.GetCannonBall();
        cannonBall.transform.position = position;
        cannonBall.transform.eulerAngles = _cannon.GetShotSpawn().transform.eulerAngles;
    }
    
    private IEnumerator SpawnBullets(float _fireRate, float _bulletCount, float _initialDelay, BossBulletType _projectile)
    {
        yield return new WaitForSeconds(_initialDelay);
        
        for (var i = 0; i < _bulletCount; i++)
        {
            // Break the loop if the boss is hidden
            if (_cannon.GetIsHidden())
                yield return null;

            var position = _cannon.GetShotSpawn().position;
            
            var bullet = EnemyPoolManager.Instance.GetBossBullet(_projectile);
            bullet.transform.position = position;
            bullet.transform.eulerAngles = _cannon.GetShotSpawn().transform.eulerAngles;
            
            //AudioManager.Instance.PlayAudioClip(Sounds.SoundType.EnemyBlueShot, position);

            yield return new WaitForSeconds(_fireRate);
        }
    }
}