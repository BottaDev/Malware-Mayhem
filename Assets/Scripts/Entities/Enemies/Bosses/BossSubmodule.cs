using System.Collections;
using System.Linq;
using System.Collections.Generic;
using UnityEngine;
using Random = UnityEngine.Random;

public class BossSubmodule : Entity
{
    [Header("Submodule Parameters")] 
    public List<SubmoduleAttack> attacks;
    [Tooltip("The type of bullet it must be to take damage")]
    [SerializeField] private Bullet.BulletType bulletType;
    [Header("Stun Parameters")]
    [SerializeField] private float stunTime = 5f;
    [Tooltip("The percentage that the module recovers when leaving the stun state")]
    [SerializeField, Range(1, 100)] private float recoveryPercentage = 50f;
    [SerializeField] protected GameObject absorbEffect;
    
    private Boss _boss;
    private bool _isStunned;
    private bool _isInvulnerable;
    private float _currentAttackTime;

    private void Start()
    {
        _boss = GetComponentInParent<Boss>();
    }
    
    private int _lastAttackIndex = -1;
    public void MakeAction()
    {
        if (_isStunned)
            return;

        if (attacks.Count > 2)
        {
            var randomAttack = attacks.Where((_, index) => index != _lastAttackIndex).ToList()[Random.Range(0, attacks.Count - 1)];
            _lastAttackIndex = attacks.IndexOf(randomAttack);
        }
        else
        {
            _lastAttackIndex = Random.Range(0, attacks.Count);
        }
        
        var attack = attacks[_lastAttackIndex];
        attack.MakeAction();
        _currentAttackTime = attack.GetTimeAfterExecuting();
    }
    
    protected virtual IEnumerator StunModule()
    {
        Stun();
        
        yield return new WaitForSeconds(stunTime);

        RecoverFromStun();
    }

    private void Stun()
    {
        _isInvulnerable = true;
        _isStunned = true;

        absorbEffect.SetActive(true);
    }
    
    private void RecoverFromStun()
    {
        absorbEffect.SetActive(false);
        
        _isStunned = false;
        
        var newHp = (recoveryPercentage * hp) / 100;
        _currentHp = newHp;
        
        _isInvulnerable = false;
    }
    
    public override void TakeDamage(float damage, Bullet.BulletType bType = Bullet.BulletType.None, bool showDamage = true)
    {
        if (_isInvulnerable ||
            bType != bulletType)
        {
            return;   
        }

        _currentHp -= damage;
        
        if(showDamage)
            StartCoroutine(ShowDamage());
        
        _boss.TakeDamage(damage, showDamage: false);

        if (_currentHp <= 0)
            StartCoroutine(StunModule());
    }

    public float GetTimeAfterExecuting()
    {
        return _currentAttackTime;
    }

    public void DestroyModule()
    {
        Destroy(gameObject);
    }

    public bool GetIsStunned()
    {
        return _isStunned;
    }
}
