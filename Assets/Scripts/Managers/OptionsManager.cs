using System.Collections.Generic;
using System.Linq;
using MM.Common;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

namespace MM.Data
{
    /// <summary>
    /// Save the settings of the game.
    /// </summary>
    public class OptionsManager : MonoBehaviourSingleton<OptionsManager>
    {
        #region Private Variables
        
        [SerializeField] private Slider volumeSlider;
        [SerializeField] private Toggle fullScreenToggle;
        [SerializeField] private TMP_Dropdown resolutionDropdown;
        
        private Resolution[] _resolutions;
        
        #endregion

        #region MonoBehaviour Functions
        
        private void Start()
        {
            LoadSettings();
            
            volumeSlider.onValueChanged.AddListener(SetVolume);
            fullScreenToggle.onValueChanged.AddListener(SetFullscreen);
            resolutionDropdown.onValueChanged.AddListener(SetResolution);
        }
        
        #endregion

        #region Private Functions
        
        private void InitializeResolutionDropdown()
        {
            _resolutions = Screen.resolutions;
            
            var uniqueResolutions = _resolutions.Distinct(new ResolutionComparer()).ToList();

            resolutionDropdown.ClearOptions();
            
            var options = uniqueResolutions.Select(res => res.width + " x " + res.height).ToList();
            resolutionDropdown.AddOptions(options);
            
            resolutionDropdown.value = SaveFile.Instance.Settings.Resolution;
            resolutionDropdown.RefreshShownValue();
        }
        
        private void LoadSettings()
        {
            // Initialize the volume slider.
            volumeSlider.value = SaveFile.Instance.Settings.Sound;
            
            // Initialize the full screen toggle.
            fullScreenToggle.isOn = SaveFile.Instance.Settings.FullScreen;
            
            InitializeResolutionDropdown();
        }
        
        private void SetVolume(float volume)
        {
            AudioListener.volume = volume;
            
            SaveFile.Instance.Settings.Sound = volume;;
            SaveFile.Save();
        }

        private void SetFullscreen(bool isFullscreen)
        {
            Screen.fullScreen = isFullscreen;
            
            SaveFile.Instance.Settings.FullScreen = isFullscreen;
            SaveFile.Save();
        }

        private void SetResolution(int resolutionIndex)
        {
            var resolution = _resolutions[resolutionIndex];
            Screen.SetResolution(resolution.width, resolution.height, Screen.fullScreen);
            
            SaveFile.Instance.Settings.Resolution = resolutionIndex;
            SaveFile.Save();
        }
        
        #endregion
        
        private class ResolutionComparer : IEqualityComparer<Resolution>
        {
            public bool Equals(Resolution x, Resolution y)
            {
                return x.width == y.width && x.height == y.height;
            }

            public int GetHashCode(Resolution obj)
            {
                return obj.width.GetHashCode() ^ obj.height.GetHashCode();
            }
        }
    }
}
