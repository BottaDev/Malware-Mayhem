using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices.WindowsRuntime;
using UnityEngine;

public class IndividualShotgunArm : Arm
{
    [Header("BossArm Parameters")] [SerializeField]
    private float rotationSpeed = 2f;
    [SerializeField] private Transform shotSpawn;
    [Header("Pivot Parameters")]
    [SerializeField] private GameObject pivot;

    private PlayerModel _player;
    
    protected override void Rotate()
    {
        if (CheckPlayer())
            return;
        
        var point = _player.transform.position;

        var angle = Vector3.SignedAngle(point - transform.position, pivot.transform.forward, Vector3.up); 
        angle *= isLeft ? 1 : -1;

        if (!(angle >= minAngle) || !(angle <= maxAngle)) 
            return;
        
        var pivotTransform = pivot.transform.position;

        var p = transform.position;
        var nextForward = new Vector3(point.x, p.y, point.z) - 
                          new Vector3(p.x, p.y, p.z);
        
        var aimTarget = GetAutoAimTarget(nextForward);
        if (aimTarget != Vector3.zero)
        {
            pivotTransform = transform.position;
            point = aimTarget;
        }

        var transform1 = transform;
        var position1 = transform1.position;
        
        var upAxis =  transform1.rotation * Vector3.up;
        var rot = Quaternion.LookRotation(new Vector3(point.x, position1.y, point.z) - new Vector3(pivotTransform.x, position1.y, pivotTransform.z), upAxis);
        
        transform.rotation = Quaternion.Slerp(transform.rotation, rot, Time.deltaTime * rotationSpeed);
    }

    /// <summary>
    /// Check if the player exists in the level
    /// </summary>
    /// <returns></returns>
    private bool CheckPlayer()
    {
        if (_player == null)
            _player = LevelManager.Instance.GetPlayer();

        return _player == null;
    }
    
    public Transform GetShotSpawn()
    {
        return shotSpawn;
    }
}
