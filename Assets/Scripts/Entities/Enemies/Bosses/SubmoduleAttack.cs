using System;
using UnityEngine;

public abstract class SubmoduleAttack : MonoBehaviour, IBossAttack
{
    [Header("General Parameters")]
    [Tooltip("The time that must pass before the boss could use a new attack")]
    [SerializeField] protected float timeAfterExecuting = 5f;

    protected bool _canAttack = true;
    protected Boss _boss;
    protected BossSubmodule _submodule;
    
    private void Awake()
    {
        _boss = GetComponentInParent<Boss>();
        _submodule = GetComponent<BossSubmodule>();
    }

    protected virtual void Start()
    {
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnAbsorbedSubmodule, OnAbsorbedSubmodule);
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnPostProcessFinished, OnPostProcessFinished);
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnReturnedBoss, OnReturnedBoss);
    }

    public virtual void MakeAction()
    {
        if(!_canAttack)
            return;
    }
    
    public virtual float GetTimeAfterExecuting()
    {
        return timeAfterExecuting;
    }

    protected virtual void OnReturnedBoss(params object[] parameters)
    {
        _canAttack = true;
    }    
    
    protected virtual void OnPostProcessFinished(params object[] parameters)
    {
        _canAttack = true;
    }

    protected virtual void OnAbsorbedSubmodule(params object[] parameters)
    {
        _canAttack = false;
    }
    
}

