using UnityEngine;

<<<<<<< HEAD
public abstract class Arm : MonoBehaviour, IArm, IUpdatable
=======
public abstract class Arm : MonoBehaviour
>>>>>>> main
{
    [Header("General Parameters")]
    public float minAngle = -30;
    public float maxAngle = 180;
    public bool isLeft;

    [Header("Attached Auto-Aim Parameters")]
    public float autoAimArea = 1;
    public float autoAimRange = 10;
    public LayerMask enemyLayerMask;
    
<<<<<<< HEAD
    private Vector3 _positionToMove;
    private bool _isMoving;
    private PlayerModel _model;
    private GameObject _target;
    private float _currentMovingTime;
    private Outline _outline;

    protected virtual void Awake()
    {
        _outline = GetComponent<Outline>();
    }

    private void OnEnable()
    {
        UpdateManager.Instance.updates.Add(this);
    }

    private void OnDisable()
    {
        UpdateManager.Instance.updates.Remove(this);
    }

    protected virtual void Start()
    {
        var root = transform.root;

        if (!_detached)
        {
            _currentDurationTime = durationTime;
            _positionToMove = transform.position;
            
            _model = root.GetComponent<PlayerModel>();
            _controller = root.GetComponent<PlayerController>();
        }
    }

    public virtual void FalseUpdate()
=======
    protected virtual void Update()
>>>>>>> main
    {
        Rotate();
    }

    protected virtual void Rotate()
    {
        var root = transform.root;
        
        var point = InputManager.Instance.mousePosition;
        
        var angle = Vector3.SignedAngle(point - transform.position, root.transform.forward, Vector3.up); 
        angle *= isLeft ? 1 : -1;

        if (!(angle >= minAngle) || !(angle <= maxAngle)) 
            return;
        
        var pivotTransform = root.transform.position;

        var p = transform.position;
        var nextForward = new Vector3(point.x, p.y, point.z) - 
                          new Vector3(p.x, p.y, p.z);
        
        var aimTarget = GetAutoAimTarget(nextForward);
        if (aimTarget != Vector3.zero)
        {
            pivotTransform = transform.position;
            point = aimTarget;
        }

        var transform1 = transform;
        var position1 = transform1.position;
        transform1.forward = new Vector3(point.x, position1.y, point.z) - 
                             new Vector3(pivotTransform.x, position1.y, pivotTransform.z);
    }

    private static float GetDistanceToLine(Vector3 aSourcePoint, Vector3 aStart, Vector3 aEnd)
    {
        var ba = aEnd - aStart;
        var va = aSourcePoint - aStart;
        var w2 = va - ((ba * Vector3.Dot(va, ba)) / ba.sqrMagnitude);
        var pointOnLine = aSourcePoint - w2;

        return (aSourcePoint - pointOnLine).magnitude;
    }
    
    protected Vector3 GetAutoAimTarget(Vector3 nextForward)
    {
        var possibleTargets = Physics.BoxCastAll(transform.position, Vector3.one * autoAimArea / 2, nextForward, Quaternion.identity, autoAimRange, enemyLayerMask);

        if (possibleTargets.Length <= 0) 
            return Vector3.zero;
        
        float closestDist = 100;
        var closest = Vector3.zero;
        foreach (var item in possibleTargets)
        {
            var position = transform.position;
            var dist = GetDistanceToLine(item.collider.transform.position, position, position + nextForward * autoAimRange);
            if (!(dist < closestDist)) 
                continue;
            
            closestDist = dist;
            closest = item.collider.transform.position;
        }
            
        return closest;
    }
    
    public virtual void MakeAction() { }
}
