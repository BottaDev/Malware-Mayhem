using System.Collections;
using Common;
using UnityEngine;

/// <summary>
/// Manages transitions and state changes within the game.
/// It handles sub-level transitions and provides a mechanism to check if the player is currently in a transition state.
/// </summary>
public class TransitionManager : MonoBehaviourSingleton<TransitionManager>
{
    #region Public Variables
    [Tooltip("The time it takes for the transition to end.")]
    [SerializeField]
    private float timeToEndTransition = 1.25f;
    #endregion

    #region Private Variables
    // Indicates if the game is in a sub-level transition.
    private bool _inSubLevelTransition;
    #endregion

    #region Monobehaviour Functions
    private void Start()
    {
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnAbsorbedSubmodule, OnAbsorbedSubmodule);
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnReturnedBoss, OnReturnedBoss);
    }
    #endregion

    #region Private Functions
    /// <summary>
    /// Coroutine to enable the transition and wait for the end of the transition.
    /// </summary>
    private IEnumerator ProcessTransition()
    {
        SetInSubLevelTransition(true);

        yield return new WaitForSeconds(timeToEndTransition);
        
        SetInSubLevelTransition(false);
    }
    
    private void SetInSubLevelTransition(bool value)
    {
        _inSubLevelTransition = value;
    }
    #endregion

    #region Public Functions
    /// <summary>
    /// Checks if the game is in a sub-level transition.
    /// </summary>
    /// <returns>True if in a sub-level transition, false otherwise.</returns>
    public bool GetInSubLevelTransition()
    {
        return _inSubLevelTransition;
    }
    #endregion

    #region Events
    private void OnAbsorbedSubmodule(params object[] parameters)
    {
        StartCoroutine(ProcessTransition());
    }
    
    private void OnReturnedBoss(params object[] parameters)
    {
        StartCoroutine(ProcessTransition());
    }
    #endregion
}
