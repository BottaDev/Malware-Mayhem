using MM.Entities.Player.Arms;
using MM.Entities.Player;
using MM.Events;
using UnityEngine;

namespace MM.Entities.Enemies.Bosses.E_Vast.SubmoduleBosses
{
    public class IndividualShotgunArm : Arm
    {
        [Header("BossArm Parameters")] 
        [SerializeField] private float rotationSpeed = 2f;
        [SerializeField] private Transform shotSpawn;
    
        private GameObject _pivot;
        private PlayerModel _player;

        private void Start()
        {
            EventManager.Instance.Subscribe(NameEvent.OnPlayerSpawned, OnPlayerSpawned);
        }

        protected override void Rotate()
        {
            if (_player == null || _pivot == null)
                return;
        
            var point = _player.transform.position;

            var angle = Vector3.SignedAngle(point - transform.position, _pivot.transform.forward, Vector3.up); 
            angle *= isLeft ? 1 : -1;

            if (!(angle >= arm.minAngle) || !(angle <= arm.maxAngle)) 
                return;
        
            var pivotTransform = _pivot.transform.position;

            var p = transform.position;
            var nextForward = new Vector3(point.x, p.y, point.z) - 
                              new Vector3(p.x, p.y, p.z);
        
            var aimTarget = GetAutoAimTarget(nextForward);
            if (aimTarget != Vector3.zero)
            {
                pivotTransform = transform.position;
                point = aimTarget;
            }

            var transform1 = transform;
            var position1 = transform1.position;
        
            var upAxis =  transform1.rotation * Vector3.up;
            var rot = Quaternion.LookRotation(new Vector3(point.x, position1.y, point.z) - new Vector3(pivotTransform.x, position1.y, pivotTransform.z), upAxis);
        
            transform.rotation = Quaternion.Slerp(transform.rotation, rot, Time.deltaTime * rotationSpeed);
        }

        /// <summary>
        /// Set the pivot of the arm to be the teleported position
        /// </summary>
        /// <param name="pivot"></param>
        public void SetPivot(GameObject pivot)
        {
            _pivot = pivot;
        }

        private void OnPlayerSpawned(params object[] parameters)
        {
            _player = (PlayerModel) parameters[1];
        }
    
        public Transform GetShotSpawn()
        {
            return shotSpawn;
        }
    }
}
