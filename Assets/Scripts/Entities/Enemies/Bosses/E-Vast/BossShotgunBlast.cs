using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BossShotgunBlast : SubmoduleAttack
{
    [Header("Pattern Parameters")]
    [SerializeField] private string patternName;
    [SerializeField] private float initialDelay;
    [Header("Projectile Parameters")]
    [SerializeField] private float fireRate = 1f;
    [SerializeField] private BulletRound[] bulletRounds;

    private BossArm _arm;

    [Serializable]
    public class BulletRound
    {
        public GenericAttachPhase.BossBulletType projectile = GenericAttachPhase.BossBulletType.Medium;
        public float angle = 20f;
    }
    
    private void Start()
    {
        _arm = GetComponent<BossArm>();
    }
    
    public override void MakeAction()
    {
        _arm.SetLookAtPlayer(true);
        Invoke(nameof(StartShooting), initialDelay);
    }

    private void StartShooting()
    {
        if (this == null) 
            return;
        
        StartCoroutine(Shoot());
    }
    
    private IEnumerator Shoot()
    {
        const int numberOfProjectiles = 3;
        var shotSpawn = _arm.GetShotSpawn();
        
        foreach (var round in bulletRounds)
        {
            for (var i = 0; i < numberOfProjectiles; i++)
            {
                var rotation = Quaternion.AngleAxis((i - 1) * round.angle, Vector3.up);

                var transform1 = transform;
                var direction = rotation * transform1.forward;
                var position = shotSpawn.position + direction;

                // Fix the Y of the spawn
                const float yAxis = 1f;
            
                position = new Vector3(position.x, yAxis, position.z);
                var rot = rotation * transform1.rotation;
                
                switch (round.projectile)
                {
                    case GenericAttachPhase.BossBulletType.Rapid:
                        var rapidBullet = EnemyPoolManager.Instance.rapidBossBulletPool.Get();
                        rapidBullet.pool = EnemyPoolManager.Instance.rapidBossBulletPool;
                        rapidBullet.transform.position = position;
                        rapidBullet.transform.rotation = rot;
                        break;
                    case GenericAttachPhase.BossBulletType.Medium:
                        var mediumBullet = EnemyPoolManager.Instance.mediumBossBulletPool.Get();
                        mediumBullet.pool = EnemyPoolManager.Instance.mediumBossBulletPool;
                        mediumBullet.transform.position = position;
                        mediumBullet.transform.rotation = rot;
                        break;
                    case GenericAttachPhase.BossBulletType.Slow:
                        var slowBullet = EnemyPoolManager.Instance.slowBossBulletPool.Get();
                        slowBullet.pool = EnemyPoolManager.Instance.slowBossBulletPool;
                        slowBullet.transform.position = position;
                        slowBullet.transform.rotation = rot;
                        break;
                }
            }
            
            yield return new WaitForSeconds(fireRate);
        }
        
        _arm.SetLookAtPlayer(false);
    }
}
