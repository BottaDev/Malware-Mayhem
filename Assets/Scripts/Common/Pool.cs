using System;
using System.Collections.Generic;

namespace Common
{
    /// <summary>
    /// The Pool class provides a flexible object pooling mechanism for managing and reusing objects of type T.
    /// It allows you to specify factory methods for object creation and custom actions for activating and deactivating objects.
    /// The pool automatically manages object reuse and null reference cleanup.
    /// </summary>
    /// <typeparam name="T">The type of objects to be pooled.</typeparam>
    public class Pool<T>
    {
        #region Private Variables
        private readonly List<T> _uninstantiated = new List<T>();
        private readonly Func<T> _factoryMethod;
        private readonly Action<T> _turnOn;
        private readonly Action<T> _turnOff;
        #endregion
    
        #region Public Functions
    
        public Pool(Func<T> factoryMethod, Action<T> turnOn, Action<T> turnOff, int initialAmount) 
        {
            _factoryMethod = factoryMethod;
            _turnOn = turnOn;
            _turnOff = turnOff;
        
            for (var i = 0; i < initialAmount; i++) 
            {
                var obj = factoryMethod();
                _turnOff(obj); 
            
                _uninstantiated.Add(obj);
            }
        }
        public T Get() 
        {
            RemoveNulls();
        
            T obj;
        
            if (_uninstantiated.Count > 0) 
            {
                // If there are uninstantiated objects in the pool, reuse one.
                obj = _uninstantiated[0];
                _uninstantiated.Remove(obj);
            }
            else 
            {
                obj = _factoryMethod();
            }
        
            _turnOn(obj);

            return obj;
        }
    
        public void ReturnToPool(T obj) 
        {
            _uninstantiated.Add(obj);
        
            _turnOff(obj);
        }
        #endregion

        #region Private Functions
        /// <summary>
        /// Should remove nulls each time get any object from pool because scene
        /// module transitions can cause nulls in pool
        /// </summary>
        private void RemoveNulls()
        {
            _uninstantiated.RemoveAll(x => x == null);
        }
        #endregion
    }
}