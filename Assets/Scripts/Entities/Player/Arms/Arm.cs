using MM.ScriptableObjects;
using UnityEngine;

namespace MM.Entities.Player.Arms
{
    public abstract class Arm : MonoBehaviour
    {
        #region Private Variables
        [SerializeField] protected ArmData arm;
        [SerializeField] protected bool isLeft;
        #endregion

        #region MonoBehaviour Functions
        public virtual void Update()
        {
            Rotate();
        }
        #endregion

        #region Private Functions
        protected virtual void Rotate() { /* Do nothing */ }

        private static float GetDistanceToLine(Vector3 aSourcePoint, Vector3 aStart, Vector3 aEnd)
        {
            var ba = aEnd - aStart;
            var va = aSourcePoint - aStart;
            var w2 = va - ((ba * Vector3.Dot(va, ba)) / ba.sqrMagnitude);
            var pointOnLine = aSourcePoint - w2;

            return (aSourcePoint - pointOnLine).magnitude;
        }
    
        protected Vector3 GetAutoAimTarget(Vector3 nextForward)
        {
            var possibleTargets = Physics.BoxCastAll(transform.position, Vector3.one * arm.autoAimArea / 2, nextForward, Quaternion.identity, arm.autoAimRange, arm.enemyLayerMask);

            if (possibleTargets.Length <= 0) 
                return Vector3.zero;
        
            float closestDist = 100;
            var closest = Vector3.zero;
            foreach (var item in possibleTargets)
            {
                var position = transform.position;
                var dist = GetDistanceToLine(item.collider.transform.position, position, position + nextForward * arm.autoAimRange);
                if (!(dist < closestDist)) 
                    continue;
            
                closestDist = dist;
                closest = item.collider.transform.position;
            }
            
            return closest;
        }
        #endregion
    
        #region Public Functions
        public virtual void MakeAction() { /* Do nothing */ }
        #endregion
    }
}
