using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BossMultiAttack : SubmoduleAttack
{
    [Header("Pattern Parameters")]
    [SerializeField] private string patternName;
    [SerializeField] private Transform shotSpawn;
    [SerializeField] private List<MultiAttack> multiAttacks;
    
    private NotronMobilizer _mobilizer;
    
    protected override void Start()
    {
        base.Start();
        _mobilizer = GetComponentInParent<NotronMobilizer>();
    }
    
    public override void MakeAction()
    {
        base.MakeAction();
        StartShooting();
    }
    
    private void StartShooting()
    {
        if (this == null || 
            !gameObject.activeInHierarchy) 
            return;
        
        StartCoroutine(MakeAttack());
    }
    
    private IEnumerator MakeAttack()
    {
        foreach (var multiAttack in multiAttacks)
        {
            // Break the loop if the boss is stunned
            if (_submodule.GetIsStunned())
                yield return null;

            if (multiAttack.stopMovement)
                _mobilizer.StopMovement();
            
            switch (multiAttack.attackType)
            {
                case MultiAttackType.ContinuousLaser:
                    StartCoroutine(SpawnLaser(multiAttack.laserDuration, multiAttack.initialDelay));
                    break;
                
                case MultiAttackType.CannonBall:
                    StartCoroutine(CannonBall(multiAttack.initialDelay));
                    break;
                
                default:
                case MultiAttackType.Bullets:
                    StartCoroutine(SpawnBullets(multiAttack.fireRate, multiAttack.bulletCount, multiAttack.initialDelay, multiAttack.projectile));
                    break;
            }
            
            if (multiAttack.stopMovement)
                _mobilizer.RestartMovement();
        }
    }

    private IEnumerator SpawnLaser(float laserDuration, float initialDelay)
    {
        Debug.Log("Charging Laser: " + initialDelay);
        yield return new WaitForSeconds(initialDelay);

        Debug.Log("Laser active: " + laserDuration);
        yield return new WaitForSeconds(laserDuration);

        Debug.Log("Laser deactivated");
    }
    
    private IEnumerator CannonBall(float initialDelay)
    {
        Debug.Log("Charging CannonBall: " + initialDelay);
        yield return new WaitForSeconds(initialDelay);
        
        var position = shotSpawn.position;
            
        var cannonBall = EnemyPoolManager.Instance.GetCannonBall();
        cannonBall.transform.position = position;
        cannonBall.transform.eulerAngles = shotSpawn.transform.eulerAngles;
    }
    
    private IEnumerator SpawnBullets(float fireRate, float bulletCount, float initialDelay, BossBulletType projectile)
    {
        yield return new WaitForSeconds(initialDelay);
        
        for (var i = 0; i < bulletCount; i++)
        {
            // Break the loop if the boss is stunned
            if (_submodule.GetIsStunned())
                yield return null;

            var position = shotSpawn.position;
            
            var bullet = EnemyPoolManager.Instance.GetBossBullet(projectile);
            bullet.transform.position = position;
            bullet.transform.eulerAngles = shotSpawn.transform.eulerAngles;
            
            //AudioManager.Instance.PlayAudioClip(Sounds.SoundType.EnemyBlueShot, position);

            yield return new WaitForSeconds(fireRate);
        }
    }
    
    [Serializable]
    private class MultiAttack
    {
        public MultiAttackType attackType;
        
        [Header("Laser Parameters")]
        public float laserDuration;
        
        [Header("Bullets Parameters")]
        public float fireRate = 0f;
        [Range(0f, 10f)] public float bulletCount;
        public BossBulletType projectile = BossBulletType.MediumGreen;
    
        [Header("CannonBall Parameters")]
        // No special parameters for cannonball...
        
        public float initialDelay;
        public bool stopMovement;
    }
    
    private enum MultiAttackType
    {
        ContinuousLaser,
        CannonBall,
        Bullets
    }
}
