using UnityEngine;

namespace MM.Others
{
    /// <summary>
    /// Rotate this object around another object
    /// </summary>
    public class ObjectRotatorAroundAnother : MonoBehaviour
    {
        #region Private Variables

        [SerializeField] private Transform pivotTransform;
        [SerializeField] private float rotationAroundPivotSpeed;
        [Tooltip("If true, use rigidbody to rotate the object. If false, use transform")]
        [SerializeField] private bool useRigidbody;

        private Rigidbody _rb;
            
        #endregion

        #region MonoBehaviour Functions

        private void Awake()
        {
            _rb = GetComponent<Rigidbody>();
        }

        public void FixedUpdate()
        {
            if (pivotTransform == null) { return; }
            
            if(useRigidbody)
            {
                var pivotPosition = pivotTransform.position;
                var q = Quaternion.AngleAxis(rotationAroundPivotSpeed, transform.up);

                _rb.MovePosition(q * (_rb.transform.position - pivotPosition) + pivotPosition);
                _rb.MoveRotation(_rb.transform.rotation * q);
            }
            else
            {
                transform.RotateAround(pivotTransform.position, Vector3.up, rotationAroundPivotSpeed * Time.deltaTime);
            }
        }

        #endregion
    }
}