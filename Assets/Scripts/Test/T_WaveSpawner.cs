using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class T_WaveSpawner : MonoBehaviour
{
    int deathCount;
    int totalDeathCount = 0;
    int totalSpawnCount = 0;
    int deathsTillNextWave;
    int currentWave = 0;
    public GameObject levelExitPrefab;
    public List<EnemyWave> waves;

    private void Start()
    {
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnEnemyDead, OnEnemyDeath);

        SpawnWave(waves[currentWave]);
    }

    void OnEnemyDeath(params object[] parameter)
    {
        deathCount++;
        totalDeathCount++;
        if (deathCount >= deathsTillNextWave)
        {
            currentWave++;
            SpawnWave(waves[currentWave]);
        }
    }

    void SpawnWave(EnemyWave wave)
    {
        deathCount = 0;

        deathsTillNextWave = wave.deathsTillNextWave;
        //if (deathsTillNextWave != -1)
        //else deathsTillNextWave = totalSpawnCount - totalDeathCount;

        for (int i = 0; i < wave.enemies.Count; i++)
        {
            Instantiate(wave.enemies[i], wave.positions[i].position, Quaternion.identity);
            totalSpawnCount++;
        }

        if(currentWave >= 13){
            Instantiate(levelExitPrefab);
        }
    }


}

[System.Serializable]
public class EnemyWave
{
    public List<EnemySpawn> enemies;
    public List<Transform> positions;
    public int deathsTillNextWave;
}
