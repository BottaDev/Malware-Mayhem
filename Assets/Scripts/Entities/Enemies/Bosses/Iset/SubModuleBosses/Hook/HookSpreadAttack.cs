using System;
using MM.Bullets;
using MM.Common;
using UnityEngine;

namespace MM.Entities.Enemies.Bosses.Iset.SubModuleBosses 
{
    public class HookSpreadAttack : HookAttack
    {
        #region Private Variables
        
        [SerializeField] protected float maxAngle;
        [SerializeField] protected float radius;
        [SerializeField] protected float rotationPerSecond;
        
        private float _accumulatedRotation;

        #endregion

        #region Monobehaviour Functions

        private void Update()
        {
            AccumulateRotation();
        }

        #endregion

        #region Public Functions

        public float minAngle;
        public override void Shot()
        {
            //var angle = maxAngle / totalBullets;
            var angleRange = maxAngle - minAngle;
            var angleStep = angleRange / totalBullets;

            for (var i = 0; i < totalBullets; i++)
            {
                var currentAngle = minAngle + i * angleStep + _accumulatedRotation;
                var rotation = Quaternion.AngleAxis(currentAngle, Vector3.up);
                
                var direction = rotation * Vector3.right;
                var position = transform.position + (direction * radius);

                // Fix the Y of the spawn
                const float yAxis = 1f;
            
                position = new Vector3(position.x, yAxis, position.z);

                Bullet bullet;
            
                switch (bulletType)
                {
                    case BossBulletType.RapidGreen:
                        bullet = EnemyPoolManager.Instance.rapidGreenBossBulletPool.Get();
                        bullet.pool = EnemyPoolManager.Instance.rapidGreenBossBulletPool;
                        break;
                    case BossBulletType.MediumGreen:
                        bullet = EnemyPoolManager.Instance.mediumGreenBossBulletPool.Get();
                        bullet.pool = EnemyPoolManager.Instance.mediumGreenBossBulletPool;
                        break;
                    case BossBulletType.SlowGreen:
                        bullet = EnemyPoolManager.Instance.slowGreenBossBulletPool.Get();
                        bullet.pool = EnemyPoolManager.Instance.slowGreenBossBulletPool;
                        break;
                
                    case BossBulletType.RapidRed:
                        bullet = EnemyPoolManager.Instance.rapidRedBossBulletPool.Get();
                        bullet.pool = EnemyPoolManager.Instance.rapidRedBossBulletPool;
                        break;
                    case BossBulletType.MediumRed:
                        bullet = EnemyPoolManager.Instance.mediumRedBossBulletPool.Get();
                        bullet.pool = EnemyPoolManager.Instance.mediumRedBossBulletPool;
                        break;
                    case BossBulletType.SlowRed:
                        bullet = EnemyPoolManager.Instance.slowRedBossBulletPool.Get();
                        bullet.pool = EnemyPoolManager.Instance.slowRedBossBulletPool;
                        break;
                
                    case BossBulletType.RapidBlue:
                        bullet = EnemyPoolManager.Instance.rapidBlueBossBulletPool.Get();
                        bullet.pool = EnemyPoolManager.Instance.rapidBlueBossBulletPool;
                        break;
                    case BossBulletType.MediumBlue:
                        bullet = EnemyPoolManager.Instance.mediumBlueBossBulletPool.Get();
                        bullet.pool = EnemyPoolManager.Instance.mediumBlueBossBulletPool;
                        break;
                    case BossBulletType.SlowBlue:
                        bullet = EnemyPoolManager.Instance.slowBlueBossBulletPool.Get();
                        bullet.pool = EnemyPoolManager.Instance.slowBlueBossBulletPool;
                        break;
                
                    case BossBulletType.RapidOrange:
                        bullet = EnemyPoolManager.Instance.rapidOrangeBossBulletPool.Get();
                        bullet.pool = EnemyPoolManager.Instance.rapidOrangeBossBulletPool;
                        break;
                    case BossBulletType.MediumOrange:
                        bullet = EnemyPoolManager.Instance.mediumOrangeBossBulletPool.Get();
                        bullet.pool = EnemyPoolManager.Instance.mediumOrangeBossBulletPool;
                        break;
                    case BossBulletType.SlowOrange:
                        bullet = EnemyPoolManager.Instance.slowOrangeBossBulletPool.Get();
                        bullet.pool = EnemyPoolManager.Instance.slowOrangeBossBulletPool;
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }

                var bulletTransform = bullet.transform;
                bulletTransform.position = position;
                bulletTransform.rotation = rotation;
            }
        
            base.Shot();
        }

        #endregion

        #region Private Functions

        private void AccumulateRotation()
        {
            _accumulatedRotation += Time.deltaTime * rotationPerSecond;
            if (_accumulatedRotation >= maxAngle)
            {
                _accumulatedRotation = 0;
            }
        }

        #endregion
    }
}