using System.Collections;
using MM.Common;
using MM.Entities.Enemies.Bosses.E_Vast;
using UnityEngine;

namespace MM.Entities.Enemies.Bosses.Iset
{
    public class IsetTriShot : SubmoduleAttack
    {
        #region Public Variables
        [Header("Projectile Parameters")]
        [SerializeField] private float fireRate = 1f;
        [SerializeField] private float initialDelay = 1f;
        [SerializeField] private BossBulletType projectile = BossBulletType.MediumOrange;
        [Space]
        [Tooltip("The force that the boss will be pushed back when shot")]
        [SerializeField] private float pushBackForce = 1f;
        #endregion
        
        #region Private Variables
        private IsetMobilizer _mobilizer;
        private BossArm _arm;
        #endregion
        
        #region MonoBehaviour Functions
        protected override void Start()
        {
            base.Start();
            _mobilizer = GetComponentInParent<IsetMobilizer>();
            _arm = GetComponentInChildren<BossArm>();
        }
        #endregion
        
        #region Public Functions
        public override void MakeAction()
        {
            base.MakeAction();
            StartCoroutine(SpawnBullets());
        }
        #endregion
        
        #region Private Functions
        private IEnumerator SpawnBullets()
        {
            _mobilizer.StopMovement();
        
            yield return new WaitForSeconds(initialDelay);
        
            for (var i = 0; i < 3; i++)
            {
                // Break the loop if the boss is stunned
                if (_submodule.GetIsStunned())
                {
                    _arm.SetLookAtPlayer(false);
                    yield return null;
                }

                var position = _arm.GetShotSpawn().position;
            
                var bullet = EnemyPoolManager.Instance.GetBossBullet(projectile);
                bullet.transform.position = position;
                bullet.transform.eulerAngles = _arm.GetShotSpawn().transform.eulerAngles;
            
                //AudioManager.Instance.PlayAudioClip(Sounds.SoundType.EnemyBlueShot, position);
                
                // Each shot pushes the boss backwards a short distance
                _mobilizer.PushBack(transform.forward * pushBackForce);

                yield return new WaitForSeconds(fireRate);
            }
             
            _mobilizer.RestartMovement();
        
            _arm.SetLookAtPlayer(false);
        }
        #endregion
    }
}
