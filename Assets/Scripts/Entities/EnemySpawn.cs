using System.Collections;
using MM.Sound;
using UnityEngine;
using MM.Events;

public class EnemySpawn : MonoBehaviour
{
    public float shadowDuration;
    public float fallDelay;
    public ParticleSystem impactParticles;
    public GameObject enemyMeteor;
    public Enemy enemyToSpawn;

    private readonly Vector3 _enemyStartPosition = new Vector3(10,15,10);
    private float _fallDuration;

    private void Awake()
    {
        // For testing purposes, should check if the instance exist...
        if (EventManager.Instance != null)
            EventManager.Instance.Trigger(NameEvent.OnEnemySpawn, enemyToSpawn.type);
    }

    private void Start()
    {
        transform.eulerAngles = new Vector3(0,180,0);
        _fallDuration = shadowDuration - fallDelay;
        StartCoroutine(Fall());
        StartCoroutine(Shadow());
    }
    
    private IEnumerator Fall()
    {
        const int steps = 15;
        var meteor = Instantiate(enemyMeteor, transform.position + _enemyStartPosition, Quaternion.identity);
        
        yield return new WaitForSeconds(fallDelay);
        
        for (var i = 0; i < steps; i++)
        {
            meteor.transform.position = Vector3.Lerp(transform.position + _enemyStartPosition, transform.position, (float)i / (float)steps);
            yield return new WaitForSeconds(_fallDuration / (float)steps);
        }

        var position = transform.position;
        meteor.transform.position = position;
        Instantiate(impactParticles, position, Quaternion.identity);
        
        AudioManager.Instance.PlayAudioClip(Sounds.SoundType.EnemyFallImpact, position);
        
        var collision = Physics.OverlapSphere(position, 1f);
        foreach (var t in collision)
        {
            var a = t.gameObject;
            if (a.gameObject.layer != 9) 
                continue;
            
            var b = a.GetComponent<PlayerModel>();
            b.TakeDamage(6);
        }

        yield return new WaitForSeconds(.15f);
        
        Instantiate(enemyToSpawn.gameObject, transform.position, Quaternion.identity);

        Destroy(meteor);
        Destroy(gameObject);
    }

    private IEnumerator Shadow()
    {
        var startScale = Vector3.one * .3f;
        const int steps = 60;

        for (var i = 0; i < steps; i++)
        {
            transform.localScale = Vector3.Lerp(Vector3.zero, startScale, (float)i / (float)steps);
            yield return new WaitForSeconds(shadowDuration / (float)steps);
        }
    }
}
