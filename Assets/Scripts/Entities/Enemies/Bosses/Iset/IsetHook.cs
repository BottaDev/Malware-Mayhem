using UnityEngine;

namespace MM.Entities.Enemies.Bosses.Iset
{
    public class IsetHook : MonoBehaviour
    {
        #region Private Variables
        [SerializeField] private float speed = 25f;
        [SerializeField] private LayerMask hitMask;

        private float _damage;
        private bool _isMoving;
        private bool _shouldMove;   // Related to the boss movement
        private IsetHookAttack _isetHookAttack;
        private LineRenderer _lineRenderer;
        
        #endregion

        #region MonoBehaviour Functions
        private void Start()
        {
            _isetHookAttack = GetComponentInParent<IsetHookAttack>();
            
            _lineRenderer = GetComponentInChildren<LineRenderer>();
        }

        private void Update()
        {
            SetPositions();
        }

        private void FixedUpdate() 
        {
            if (!_isMoving)
                return;
            
            transform.Translate(Vector3.forward * (Time.deltaTime * speed));
        }
        #endregion
        
        #region Events
        private void OnTriggerEnter(Collider other)
        {
            // Check if object is not in destroyMask
            if (hitMask != (hitMask | (1 << other.gameObject.layer))) 
                return;
            
            StopMovement(other.gameObject);
        }
        #endregion

        #region Private Functions
        private void StopMovement(GameObject other)
        {
            // Player
            if (other.layer == 9) 
                MakeDamage(other.GetComponent<Entity>());
            
            _isMoving = false;

            if (_shouldMove)
            {
                // Move the boss to the hook...
                _isetHookAttack.MoveToHook();   
            }
            else
            {
                const float time = 1f;
                Destroy(gameObject, time);
            }
        }
        
        private void MakeDamage(Entity entity)
        {
            // Make damage to the player
            if (_isMoving)
            {
                entity.TakeDamage(_damage);
                Destroy(gameObject);
            }
        }
        
        /// <summary>
        /// Set the positions of the line renderer
        /// </summary>
        private void SetPositions()
        {
            _lineRenderer.positionCount = 2;
        
            _lineRenderer.SetPosition(0, _lineRenderer.transform.position);
            _lineRenderer.SetPosition(1, _isetHookAttack.GetShotSpawn().position);
        }
        #endregion
        
        #region Public Functions
        /// <summary>
        /// Attaches the hook to the boss arm
        /// </summary>
        
        public void Shoot(bool shouldMove = true)
        {
            _isMoving = true;

            _shouldMove = shouldMove;
            
            // Detach from the boss arm
            transform.parent = null;
            
            _lineRenderer.enabled = true;
        }
        
        public void SetDamage(float damage)
        {
            _damage = damage;
        }
        #endregion
    }
}
