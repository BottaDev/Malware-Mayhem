using System.Collections.Generic;
using MM.Common;
using MM.Sound;
using UnityEngine;
using UnityEngine.SceneManagement;

namespace MM.UI
{
    /// <summary>
    /// Manage the UI of the main menu.
    /// </summary>
    public class MenuUIManager : MonoBehaviourSingleton<MenuUIManager>
    {
        #region Private Variables

        [Header("Windows")] [SerializeField] private GameObject mainMenuWindow;
        [SerializeField] private GameObject optionsWindow;
        [SerializeField] private GameObject creditsWindow;
        [SerializeField] private GameObject levelsWindow;

        [Header("Levels Sections")] [SerializeField]
        private List<GameObject> levels;

        private List<GameObject> _screens;

        #endregion

        #region MonoBehaviour Functions

        protected override void Awake()
        {
            base.Awake();

            _screens = new List<GameObject>
            {
                mainMenuWindow,
                optionsWindow,
                creditsWindow,
                levelsWindow
            };

            ShowMenu();
        }

        private void Start()
        {
            AudioManager.Instance.PlayMusic("MainMenu");
        }

        #endregion

        #region Public Functions

        public void ShowMenu()
        {
            ShowWindow(mainMenuWindow);
        }

        public void ShowOptions()
        {
            ShowWindow(optionsWindow);
        }

        public void ShowCredits()
        {
            ShowWindow(creditsWindow);
        }

        public void ShowLevels()
        {
            ShowWindow(levelsWindow);
        }
        
        public void ShowLevel(int level)
        {
            var selectedLevel = level switch
            {
                -1 => null,
                0 => levels[0],
                1 => levels[1],
                _ => null
            };

            foreach (var s in levels)
            {
                s.SetActive(false);
            }

            if (selectedLevel != null)
            {
                selectedLevel.SetActive(true);
            }
        }

        public void PlayLevel(string levelName)
        {
            SceneManager.LoadScene(levelName);
        }

        public void Quit()
        {
            Application.Quit();
        }

        #endregion

        #region Private Functions

        private void ShowWindow(GameObject screen)
        {
            foreach (var s in _screens)
            {
                s.SetActive(false);
            }

            screen.SetActive(true);
        }

        #endregion
        
    }
}