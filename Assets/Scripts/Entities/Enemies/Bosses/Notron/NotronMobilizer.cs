using System;
using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.AI;

public class NotronMobilizer : MonoBehaviour
{
    [SerializeField] private float stoppingDistance = 1f;
    
    private NavMeshAgent _agent;
    private PlayerModel _player;
    private Entity _boss;
    private bool _stopMovement;

    private void Awake()
    {
        _agent = GetComponent<NavMeshAgent>();
        _boss = GetComponent<Entity>();
    }

    private void Update()
    {
        if (_boss.hp <= 0 ||
            CheckPlayer() ||
            BossManager.Instance.GetAttackPause())
        {
            return;   
        }
        
        Move();
    }
    
    private void Move()
    {
        if (_stopMovement)
            return;
        
        _agent.speed = _boss.movementSpeed;

        var distance = Vector3.Distance(_player.transform.position, transform.position);
        if (distance <= stoppingDistance)
        {
            _agent.destination = transform.position;    
            return;   
        }

        _agent.destination = _player.transform.position;
    }

    /// <summary>
    ///  Stop the default movement of the boss when the submodule attacks
    /// </summary>
    public void StopMovement()
    {
        _stopMovement = true;
    }

    /// <summary>
    /// Reset the default movement of the boss
    /// </summary>
    public void RestartMovement()
    {
        _stopMovement = false;
    }
    
    protected virtual void LateUpdate()
    {
        Rotate();
    }

    private void Rotate()
    {
        if (CheckPlayer() || CheckPlayerDistance()) 
            return;
        
        var newRotation = Quaternion.LookRotation(_player.transform.position - transform.position);
        var currentRotation = transform.rotation;
        var rotSpeed = _boss.rotationSpeed / 2;
        
        currentRotation = Quaternion.Slerp(currentRotation, newRotation, Time.deltaTime * rotSpeed);
        currentRotation = new Quaternion(0, currentRotation.y, 0, currentRotation.w);
        transform.rotation = currentRotation;
    }

    /// <summary>
    /// Checks the distance from the boss to the player
    /// </summary>
    /// <returns>Returns true if the distance is less or same as StoppingDistance </returns>
    private bool CheckPlayerDistance()
    {
        var distance = Vector3.Distance(_player.transform.position, transform.position);

        return distance <= stoppingDistance;
    }
    
    /// <summary>
    /// Check if the player exists in the level
    /// </summary>
    /// <returns></returns>
    private bool CheckPlayer()
    {
        if (_player == null)
            _player = LevelManager.Instance.GetPlayer();

        return _player == null;
    }
    
    private void OnDrawGizmosSelected()
    {
        Gizmos.color = Color.yellow;
        Gizmos.DrawWireSphere(transform.position, stoppingDistance);
    }
}
