using MM.Common;
using MM.Events;
using MM.Gameplay;
using UnityEngine;
using UnityEngine.UI;

namespace MM.Inputs
{
    /// <summary>
    /// Calculate the mouse position in the world space with the Pixel Post-Processing Camera.
    /// </summary>
    public class InputManager : MonoBehaviourSingleton<InputManager>
    {
        #region Public Variables

        [HideInInspector] public Vector3 mousePosition = Vector3.zero;

        #endregion

        #region Private Variables

        [SerializeField] private LayerMask groundLayerMask;
        [SerializeField] private Vector2Int screenRes = new (768, 432);
        [SerializeField] private Texture2D cursorImage;
        [SerializeField] private Camera[] levelCameras;

        private float _screenScaleFactor;
        private CanvasScaler _canvasScaler;
        private Camera _cam;

        #endregion

        #region Monobehaviour Functions

        protected override void Awake()
        {
            base.Awake();

            _cam = levelCameras[0];

            Cursor.lockState = CursorLockMode.Confined;

            _canvasScaler = GameObject.Find("Gameplay Canvas").GetComponent<CanvasScaler>();

            // Calculate the hotspot position of the cursor image based on the canvas scaler reference resolution and screen resolution
            var hotSpot = new Vector2(
                cursorImage.width / (_canvasScaler.referenceResolution.x / screenRes.x),
                cursorImage.height / (_canvasScaler.referenceResolution.y / screenRes.y)
            );

            // Set the cursor image and hotspot position
            Cursor.SetCursor(cursorImage, hotSpot, CursorMode.Auto);

            // Calculate the screen scale factor by dividing desired screen resolution by the actual screen width
            _screenScaleFactor = (float)screenRes.x / Screen.width;
        }

        private void Start()
        {
            EventManager.Instance.Subscribe(NameEvent.OnAbsorbedSubmodule, OnAbsorbedSubmodule);
            EventManager.Instance.Subscribe(NameEvent.OnReturnedBoss, OnReturnedBoss);
        }

        private void Update()
        {
            //Check if the camera is null because is needed to calculate the mouse position
            if (_cam == null || PauseManager.Instance.IsPaused)
            {
                return;
            }
            
            SetMousePosition();
        }

        #endregion

        #region Private Functions

        private void SetMousePosition()
        {
            Physics.Raycast(_cam.ScreenPointToRay(Input.mousePosition * _screenScaleFactor), out var ray,
                Mathf.Infinity, groundLayerMask, QueryTriggerInteraction.Ignore);

            mousePosition = ray.point;
            mousePosition.y = 0;
        }

        #endregion

        #region Event Functions

        private void OnAbsorbedSubmodule(params object[] parameters)
        {
            var cameraIndex = (int)parameters[0];
            _cam = levelCameras[cameraIndex];
        }

        private void OnReturnedBoss(params object[] parameters)
        {
            _cam = levelCameras[0];
        }

        #endregion
    }
}