using UnityEngine;

namespace MM.UI
{
    /// <summary>
    /// Represents a level point in the world map that can be clicked to open the level selection window.
    /// </summary>
    public class WorldMapLevelPoint : MonoBehaviour
    {
        #region Private Variables
        [SerializeField] private int level = 1;
        [Header("UI")]
        [SerializeField] private RectTransform levelIndicator;

        private LineRenderer _lineRenderer;
        private Camera _cam;
        #endregion

        #region MonoBehaviour Functions
        private void Awake()
        {
            _lineRenderer = GetComponentInChildren<LineRenderer>();
        }

        private void Start()
        {
            _cam = Camera.main;
        }
    
        private void Update()
        {
            UpdateLineRenderer();
        }
        #endregion

        #region Private Functions
        /// <summary>
        /// Set the positions of the line renderer
        /// </summary>
        private void SetPositions()
        {
            if (!_lineRenderer.enabled)
                _lineRenderer.enabled = true;
        
            _lineRenderer.positionCount = 2;

            var screenPosition = RectTransformUtility.WorldToScreenPoint(_cam, levelIndicator.position);
            var worldPosition = _cam.ScreenToWorldPoint(new Vector3(screenPosition.x, screenPosition.y, _cam.nearClipPlane));
        
            _lineRenderer.SetPosition(0, _lineRenderer.transform.position);
            _lineRenderer.SetPosition(1, worldPosition);

        }

        private void UpdateLineRenderer()
        {
            // Check if window "--LEVELS--" in canvas is active
            var levelsWindowsDisable = !levelIndicator.transform.parent.parent.parent.transform.gameObject.activeSelf;
        
            // Check if level section in canvas is active
            var levelSectionDisable = !levelIndicator.transform.parent.parent.transform.gameObject.activeSelf; 
        
            if (levelsWindowsDisable || levelSectionDisable)
            {
                _lineRenderer.enabled = false;
                return;   
            }

            SetPositions();
        }
        #endregion
    
        #region Events
        private void OnMouseDown()
        {
            var distance = Vector3.Distance(_cam.transform.position, transform.position);
        
            const float maxDistance = 1.3f;
            if (!MainMenuManager.Instance.CanSelectLevels() || distance > maxDistance)
                return;
        
            MenuUIManager.Instance.ShowLevel(level);
        }
        #endregion
    }
}
