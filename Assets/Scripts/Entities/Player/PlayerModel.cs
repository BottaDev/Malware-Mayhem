using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

public class PlayerModel : Entity
{
    public float acceleration = 0.9f;
    [Header("Torso Parameters")] 
    [Range(1, 15)] public float torsoSpeed = 2f;
    public GameObject torso;
    [Header("Legs Parameters")]
    public GameObject legs;
    [Header("Arms Parameters")]
    public List<PlayerArm> leftArms = new List<PlayerArm>();
    public List<PlayerArm> rightArms = new List<PlayerArm>();
    public float armResetTime = 1f;
    [Header("Absorb Parameters")]
    public LayerMask enemyAbsorbMask;
    public LayerMask moduleAbsorbMask;
    [Range(0.1f, 5f)] public float absorbDistance = 3f;
    public float camZoomSpeed = .5f;
    public float minCamFOV = 45;
    public float maxCamFOV = 100;
    public float timeScaleSlow = .5f;
    public float timeScaleSpeed = 1;
    [Header("Buff Parameters")]
    public float healAmount = 25f;
    [Header("VFX")]
    public GameObject dustParticle;
    public Transform particlePosition;
    public ParticleSystemForceField leftArmParticleForceField;
    public ParticleSystemForceField rightArmParticleForceField;
    public GameObject corpsePrefab;
    public GameObject deathParticles;
    [Header("Submodule Parameters")] 
    public PlayerArm.ArmType startingArm = PlayerArm.ArmType.BasicArm;

    private PlayerController _controller;
    
    protected override void Awake()
    {
        base.Awake();

        EventManager.Instance.Trigger(EventManager.NameEvent.OnPlayerSpawned, true, this);
        _controller = GetComponent<PlayerController>();
    }

    private void Start()
    {
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnAbsorbedSubmodule, OnAbsorbedSubmodule);
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnReturnedBoss, OnReturnedBoss);
    }

    private void OnDrawGizmosSelected()
    {
        Gizmos.color = Color.green;
        Gizmos.DrawWireSphere(transform.position, absorbDistance);
    }

    public float GetCurrentHealth()
    {
        return _currentHp;
    }
    
    public void SetCurrentHealth(float heath)
    {
        _currentHp = heath;
    }
    
    public override void TakeDamage(float damage, PlayerArm.ArmType aType = PlayerArm.ArmType.None, bool showDamage = true)
    {
        if (showDamage)
            StartCoroutine(ShowDamage());
        
        _controller.TakeDamage(damage);
    }

    public bool GetLowLife()
    {
        return _controller.GetIfLowLife();
    }

    public override void KillEntity()
    {
        LevelManager.Instance.LoseLevel();
        base.KillEntity();
    }

    protected override IEnumerator ShowDamage()
    {
        EventManager.Instance.Trigger(EventManager.NameEvent.OnPlayerDamaged);
        return base.ShowDamage();
    }

    private void OnAbsorbedSubmodule(params object[] parameters)
    {
        BackToBaseMaterial();
    }

    private void OnReturnedBoss(params object[] parameters)
    {
        BackToBaseMaterial();
    }
}
