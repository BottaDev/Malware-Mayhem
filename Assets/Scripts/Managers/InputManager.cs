using UnityEngine;

public class InputManager : MonoBehaviour
{
    public static InputManager Instance;
    public LayerMask groundLayerMask;
    public Vector2Int screenRes = new Vector2Int(768, 432);
    public Vector3 mousePosition = Vector3.zero;
    public Texture2D cursorImage;
    [SerializeField] private Camera[] levelCameras;
    
    private float _screenScaleFactor;
    private Camera _cam;

    private static bool IsPaused => PauseManager.Instance.isPaused;

    private void Awake()
    {
        if (Instance == null)
            Instance = this;
        
        _cam = levelCameras[0];
        Cursor.lockState = CursorLockMode.Confined;
        Cursor.SetCursor(cursorImage, Vector2.zero, CursorMode.Auto);
        _screenScaleFactor = (float)screenRes.x / Screen.width;
    }

    private void Start()
    {
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnAbsorbedSubmodule, OnAbsorbedSubmodule);
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnReturnedBoss, OnReturnedBoss);
    }

    private void Update()
    {
        if(_cam == null) 
            return;
        
        if (!IsPaused)
            SetMousePosition();
    }

    private void SetMousePosition()
    {
        RaycastHit _ray;
        Physics.Raycast(_cam.ScreenPointToRay(Input.mousePosition * _screenScaleFactor), out _ray, Mathf.Infinity, groundLayerMask, QueryTriggerInteraction.Ignore);
        
        mousePosition = _ray.point;
        mousePosition.y = 0;
    }

    private void OnAbsorbedSubmodule(params object[] parameters)
    {
        var cameraIndex = (int)parameters[0];
        _cam = levelCameras[cameraIndex];
    }

    private void OnReturnedBoss(params object[] parameters)
    {
        _cam = levelCameras[0];
    }
}
