using System.Collections;
using System.Collections.Generic;
using MM.Common;
using MM.Events;
using UnityEngine;

namespace MM.Entities
{
    public class BossManager : MonoBehaviourSingleton<BossManager>
    {
        #region Private Variables

        [SerializeField] private List<GameObject> bossSubmodules;
        [Range(0f, 10f), Tooltip("Here should be the time taken in the post process effect")]
        [SerializeField] private float waitToAttack;
        private bool _canChange;
        private bool _fightSubmodule;
        private bool _attackPaused;
        private int _moduleIndex;

        #endregion

        #region Monobehaviour Functions

        private void Start()
        {
            EventManager.Instance.Subscribe(NameEvent.OnAbsorbedSubmodule, OnAbsorbedSubmodule);
            EventManager.Instance.Subscribe(NameEvent.OnReturnedBoss, OnReturnedBoss);
        }

        #endregion

        #region Private Functions

        private IEnumerator ChangeScenes()
        {
            yield return new WaitUntil((() => _canChange));

            foreach (var t in bossSubmodules)
            {
                t.SetActive(false);
            }

            bossSubmodules[_moduleIndex].SetActive(true);
            StartCoroutine(WaitToFireAgain());
        }
        
        private IEnumerator WaitToFireAgain()
        {
            _attackPaused = true;
            yield return new WaitForSecondsRealtime(waitToAttack);
            _attackPaused = false;
        }

        #endregion

        #region Public Functions

        public bool CheckFightSubmodule()
        {
            return _fightSubmodule;
        }

        public bool GetAttackPause()
        {
            return _attackPaused;
        }

        public void ChangeStatus(bool canChange)
        {
            _canChange = canChange;
        }

        #endregion

        #region Event Functions

        private void OnAbsorbedSubmodule(params object[] parameters)
        {
            _moduleIndex = (int)parameters[0];
            _fightSubmodule = true;
            StartCoroutine(ChangeScenes());
        }

        private void OnReturnedBoss(params object[] parameters)
        {
            _fightSubmodule = false;
            _moduleIndex = 0;
            StartCoroutine(ChangeScenes());
        }

        #endregion
    }
}