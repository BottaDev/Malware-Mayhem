using System.Collections;
using MM.Entities.Player;
using MM.Common;
using MM.Sound;
using MM.Events;
using MM.Data;
using MM.Entities.Enemies.Bosses;
using MM.UI;
using UnityEngine;

namespace MM.Gameplay
{
    public class LevelManager : MonoBehaviourSingleton<LevelManager>
    {
        #region Private Variables
        [SerializeField] private GameObject bossSpawn;
        [Tooltip("The time that the boss will attack after spawning")]
        [SerializeField] private float initialAttackTime = 3.5f;
        [SerializeField] private GameObject playerSpawn;
        [SerializeField] private Transform playerSpawnPosition;
        
        private bool _canRefresh = true;
        private PlayerModel _player;
        private Boss _boss;
        
        private bool _mainBossSpawned; // Prevent to spawn the boss again when the player returns to the main fight

        #endregion

        #region Properties

        public PlayerModel Player => _player;
        
        public Boss Boss => _boss;

        #endregion

        #region Monobehaviour Functions

        protected override void Awake()
        {
            base.Awake();

            if (TransitionManager.Instance.IsInSubBoss)
            {
                StartCoroutine(nameof(WaitSecondsToSpawnPlayer));
            }
        }

        private void OnEnable()
        {
            m_Instance = this;
        }

        private void Start()
        {
            EventManager.Instance.Subscribe(NameEvent.OnPostProcessFinished, OnPostProcessFinished);
            EventManager.Instance.Subscribe(NameEvent.OnInitAnimationFinished, OnInitAnimationFinished);

            AudioManager.Instance.PlayMusic("Level 1-1");

            SetLevelData();
        }

        #endregion

        #region Public Functions

        public void LoseLevel()
        {
            UIManager.Instance.StartFadeIn();

            AudioManager.Instance.PlayAudioClip(Sounds.SoundType.PlayerDead, transform.position);

            Invoke(nameof(ShowLoseScene), 2f);
        }

        public void WinLevel()
        {
            UIManager.Instance.StartFadeIn();

            AudioManager.Instance.PlayAudioClip(Sounds.SoundType.PlayerWon, transform.position);

            Invoke(nameof(ShowWinScene), 2f);
        }
        
        public void ChangeStatus(bool status)
        {
            _canRefresh = status;
        }

        #endregion

        #region Private Functions

        private void ShowLoseScene()
        {
            ResetTimeScale();

            SceneLoader.ChangeLevel("LoseScene");
        }

        private void ShowWinScene()
        {
            ResetTimeScale();

            SceneLoader.ChangeLevel("WinScene");
        }

        private static void ResetTimeScale()
        {
            Time.timeScale = 1;
        }
        
        private void SpawnBoss()
        {
            if (_mainBossSpawned) { return; }

            var bossSpawnPosition = EntitiesIntroManager.Instance.BossSpawn;
            
            if (bossSpawn != null && bossSpawnPosition != null)
            {
                var boss = Instantiate(bossSpawn, bossSpawnPosition.position, Quaternion.identity, transform);
                _boss = boss.GetComponent<Boss>();
                EventManager.Instance.Trigger(NameEvent.OnBossSpawned, _boss);
            }

            _mainBossSpawned = true;

            Invoke(nameof(TriggerBossAttack), initialAttackTime);
            
            EntitiesIntroManager.Instance.DestroyStaticModels();
        }

        private void TriggerBossAttack()
        {
            EventManager.Instance.Trigger(NameEvent.OnInitialAttackWait);
        }

        private IEnumerator SetPlayer()
        {
            yield return new WaitUntil(() => _canRefresh);

            _player = GameObject.FindWithTag("Player")?.GetComponent<PlayerModel>();
        }
        
        /// <summary>
        /// Wait some seconds to spawn the player in the submodules
        /// </summary>
        private IEnumerator WaitSecondsToSpawnPlayer()
        {
            yield return new WaitForSeconds(1.5f);
            
            var player = Instantiate(playerSpawn, playerSpawnPosition.position, Quaternion.identity, transform);
            _player = player.GetComponent<PlayerModel>();
            EventManager.Instance.Trigger(NameEvent.OnPlayerSpawned,true, _player);
        }
        
        /// <summary>
        /// Sets the current level in the DataManager
        /// </summary>
        private static void SetLevelData()
        {
            var currentLevel = UnityEngine.SceneManagement.SceneManager.GetActiveScene().name;
            DataManager.CurrentLevel = currentLevel;
        }

        #endregion

        #region Event Functions

        private void OnPostProcessFinished(params object[] parameters)
        {
            if (gameObject.activeInHierarchy)
            {
                StartCoroutine(SetPlayer());
            }
        }
        
        private void OnInitAnimationFinished(params object[] parameters)
        {
            var playerSpawnPos = EntitiesIntroManager.Instance.PlayerSpawn.position;
            var player = EntitiesIntroManager.Instance.Player;
            
            _player = Instantiate(player, playerSpawnPos, Quaternion.identity, transform);
            
            EventManager.Instance.Trigger(NameEvent.OnPlayerSpawned,true, _player);
            
            if(!EntitiesIntroManager.Instance.IsTutorial)
            {
                SpawnBoss();
            }
            else
            {
                EntitiesIntroManager.Instance.DestroyStaticModels();
            }
        }

        #endregion
    }
}