using System;
using System.Collections;
using System.Collections.Generic;
using MM.Bullets;
using MM.Common;
using UnityEngine;

namespace MM.Entities.Enemies.Bosses.Notron
{
    /// <summary>
    /// Notron's multi attack submodule
    /// </summary>
    [Serializable]
    public class BossMultiAttack : SubmoduleAttack
    {
        #region Private Variables
        [Tooltip("Override the time after executing")]
        [SerializeField] protected float timeAfter = 10f;
    
        [Header("Pattern Parameters")]
        [SerializeField] protected string patternName;
        [SerializeField] protected List<MultiAttack> multiAttacks;
    
        private NotronMobilizer _mobilizer;
        private NotronCannon _cannon;
        #endregion

        #region Monobehaviour Functions
        protected override void Start()
        {
            base.Start();
            _mobilizer = GetComponentInParent<NotronMobilizer>();
            _cannon = GetComponent<NotronCannon>();
        }
        #endregion
    
        #region Private Functions
        private void StartShooting()
        {
            if (this == null || 
                !gameObject.activeInHierarchy) 
                return;
        
            StartCoroutine(MakeAttack());
        }
    
        private IEnumerator MakeAttack()
        {
            _cannon.SetLookAtObject(true);
        
            foreach (var multiAttack in multiAttacks)
            {
                // Break the loop if the boss is stunned
                if (_submodule.GetIsStunned())
                {
                    _cannon.SetLookAtObject(false);
                    yield return null;
                }
            
                switch (multiAttack.attackType)
                {
                    case MultiAttackType.ContinuousLaser:
                        StartCoroutine(SpawnLaser(multiAttack.laserDuration, multiAttack.initialDelay, multiAttack.stopMovement));
                        break;
                
                    case MultiAttackType.CannonBall:
                        StartCoroutine(SpawnCannonBall(multiAttack.initialDelay, multiAttack.stopMovement));
                        break;
                
                    default:
                    case MultiAttackType.Bullets:
                        StartCoroutine(SpawnBullets(multiAttack.fireRate, multiAttack.bulletCount, multiAttack.initialDelay, multiAttack.projectile, multiAttack.stopMovement));
                        break;
                }
            }
        }

        private IEnumerator SpawnLaser(float laserDuration, float initialDelay, bool stopMovement)
        {
            if (_submodule.GetIsStunned())
            {
                _cannon.SetLookAtObject(false);
                yield return null;
            }
        
            if (stopMovement)
                _mobilizer.StopMovement();
        
            var shotSpawn = _cannon.GetShotSpawn();
        
            var laserCharge = _cannon.GetShootParticlesPrefab();
        
            // Spawn the particle system
            var chargeObj = Instantiate(laserCharge, shotSpawn.position, shotSpawn.rotation);
            chargeObj.transform.SetParent(transform);
        
            // Set the duration of the particle system
            var ps = chargeObj.GetComponent<ParticleSystem>();
            ps.Stop();
            var main = ps.main;
            main.duration = initialDelay;
            ps.Play();

            if (_submodule.GetIsStunned())
            {
                if (stopMovement)
                    _mobilizer.RestartMovement();
            
                Destroy(chargeObj.gameObject);
                yield return null;   
            }

            yield return new WaitForSeconds(initialDelay);
        
            // Destroy the particle system
            Destroy(chargeObj.gameObject);

            if (_submodule.GetIsStunned())
            {
                if (stopMovement)
                    _mobilizer.RestartMovement();
            
                yield return null;
            }

            var laser = _cannon.GetLaser();
        
            var laserObj = Instantiate(laser, shotSpawn.position, shotSpawn.rotation);
            laserObj.transform.SetParent(transform);
            laserObj.GetComponent<PersistentLaserBeam>().SetParams(laserDuration, _submodule.GetSubmoduleIndex());
        
            yield return new WaitForSeconds(laserDuration);
        
            // TODO: Add a laser deactivation animation
        
            if (stopMovement)
                _mobilizer.RestartMovement();
        
            _cannon.SetLookAtObject(false);
        }
    
        private IEnumerator SpawnCannonBall(float initialDelay, bool stopMovement)
        {
            if (_submodule.GetIsStunned())
            {
                _cannon.SetLookAtObject(false);
                yield return null;
            }
        
            if (stopMovement)
                _mobilizer.StopMovement();
            
            yield return new WaitForSeconds(initialDelay);

            if (_submodule.GetIsStunned())
            {
                if (stopMovement)
                    _mobilizer.RestartMovement();
            
                yield return null;
            }

            var position = _cannon.GetShotSpawn().position;
            
            var cannonBall = EnemyPoolManager.Instance.GetCannonBall();
            cannonBall.transform.position = position;
            cannonBall.transform.eulerAngles = _cannon.GetShotSpawn().transform.eulerAngles;
        
            if (stopMovement)
                _mobilizer.RestartMovement();
        
            _cannon.SetLookAtObject(false);
        }
    
        private IEnumerator SpawnBullets(float fireRate, float bulletCount, float initialDelay, BossBulletType projectile, bool stopMovement)
        {
            if (stopMovement)
                _mobilizer.StopMovement();
        
            yield return new WaitForSeconds(initialDelay);
        
            for (var i = 0; i < bulletCount; i++)
            {
                // Break the loop if the boss is stunned
                if (_submodule.GetIsStunned())
                {
                    _cannon.SetLookAtObject(false);
                    yield return null;
                }

                var position = _cannon.GetShotSpawn().position;
            
                var bullet = EnemyPoolManager.Instance.GetBossBullet(projectile);
                bullet.transform.position = position;
                bullet.transform.eulerAngles = _cannon.GetShotSpawn().transform.eulerAngles;
            
                //AudioManager.Instance.PlayAudioClip(Sounds.SoundType.EnemyBlueShot, position);

                yield return new WaitForSeconds(fireRate);
            }
        
            if (stopMovement)
                _mobilizer.RestartMovement();
        
            _cannon.SetLookAtObject(false);
        }
        #endregion
        
        #region Public Functions
        public override float GetTimeAfterExecuting()
        {
            return timeAfter;
        }
        
        public override void MakeAction()
        {
            base.MakeAction();
            StartShooting();
        }
        
        public float GetTimeAfter()
        {
            return timeAfter;
        }
        
        public void SetTimeAfter(float time)
        {
            timeAfter = time;
        }
        
        public string GetPatternName()
        {
            return patternName;
        }
        
        public void SetPatternName(string n)
        {
            patternName = n;
        }
        
        public List<MultiAttack> GetMultiAttacks()
        {
            return multiAttacks;
        }
        #endregion
    
        [Serializable]
        public class MultiAttack
        {
            public MultiAttackType attackType;
        
            [Header("Laser Parameters")]
            public float laserDuration;
        
            [Header("Bullets Parameters")]
            public float fireRate;
            [Range(0, 10)] public int bulletCount;
            public BossBulletType projectile = BossBulletType.MediumBlue;
    
            [Header("CannonBall Parameters")]
            // No special parameters for cannonball...
        
            public float initialDelay;
            public bool stopMovement;
        }

        public enum MultiAttackType
        {
            ContinuousLaser,
            CannonBall,
            Bullets
        }
    }
}
