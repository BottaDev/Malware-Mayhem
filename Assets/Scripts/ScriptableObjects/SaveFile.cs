using System;
using Newtonsoft.Json;
using UnityEngine;

namespace MM.Data
{
    [Serializable]
    public class SaveFile : ScriptableObject
    {
        public const string SAVEFILE_PLAYER_PREF_PATH = "SafeFileApp";

        private static SaveFile _instance;

        public static SaveFile Instance
        {
            get
            {
                if (_instance != null) return _instance;

                try
                {
                    if (PlayerPrefs.HasKey(SAVEFILE_PLAYER_PREF_PATH))
                    {
                        var saved = PlayerPrefs.GetString(SAVEFILE_PLAYER_PREF_PATH, string.Empty);
                        if (saved != string.Empty)
                        {
                            _instance = JsonConvert.DeserializeObject<SaveFile>(saved);
                        }
                    }
                    else
                    {
                        _instance = new SaveFile();
                    }
                }
                catch (Exception)
                {
                    _instance = new SaveFile();
                }

                return _instance;
            }
        }

        public SettingsData Settings = new();
        
        public TutorialData Tutorial = new();
        
        public IsetData Iset = new();
        
        public NotronData Notron = new();
        
        public EVastData EVast = new();

        public static void Save()
        {
            PlayerPrefs.SetString(SAVEFILE_PLAYER_PREF_PATH, JsonConvert.SerializeObject(Instance));
            PlayerPrefs.Save();
        }
    }

    [Serializable]
    public class SettingsData
    {
        [JsonProperty("FullScreen")] public bool FullScreen = true;

        [JsonProperty("Resolution")] public int Resolution;

        [JsonProperty("Sound")] public float Sound = 100f;
    }
    
    [Serializable]
    public class LevelsData
    {
        [JsonProperty("Unlocked")] public bool Unlocked;

        [JsonProperty("Completed")] public bool Completed;
    }

    [Serializable]
    public class TutorialData : LevelsData { }
    
    [Serializable]
    public class IsetData : LevelsData {}
    
    [Serializable]
    public class NotronData : LevelsData {}
    
    [Serializable]
    public class EVastData : LevelsData {}
}