using System;
using System.Collections;
using MM.Common;
using UnityEngine;

namespace MM.Entities.Enemies.Bosses.E_Vast
{
    public class BossShotgunBlast : SubmoduleAttack
    {
        #region Private Variables
        [Header("Pattern Parameters")]
        [SerializeField] private string patternName;
        [SerializeField] private float initialDelay;
        [Header("Projectile Parameters")]
        [SerializeField] private float fireRate = 1f;
        [SerializeField] private BulletRound[] bulletRounds;

        private BossArm _arm;
        #endregion
    
        #region MonoBehaviour Functions
        protected override void Start()
        {
            base.Start();
            _arm = GetComponent<BossArm>();
        }
        #endregion
        
        #region Public Functions
        public override void MakeAction()
        {
            base.MakeAction();
            _arm.SetLookAtObject(true);
            Invoke(nameof(StartShooting), initialDelay);
        }
        #endregion
        
        #region Private Functions
        private void StartShooting()
        {
            if (this == null || 
                !gameObject.activeInHierarchy) 
                return;
        
            StartCoroutine(Shoot());
        }
    
        private IEnumerator Shoot()
        {
            const int numberOfProjectiles = 3;
            var shotSpawn = _arm.GetShotSpawn();
        
            foreach (var round in bulletRounds)
            {
                for (var i = 0; i < numberOfProjectiles; i++)
                {
                    if (_submodule.GetIsStunned())
                    {
                        _arm.SetLookAtObject(false);
                        yield return null;
                    }
                
                    var rotation = Quaternion.AngleAxis((i - 1) * round.angle, Vector3.up);

                    var transform1 = transform;
                    var direction = rotation * transform1.forward;
                    var position = shotSpawn.position + direction;

                    // Fix the Y of the spawn
                    const float yAxis = 1f;
            
                    position = new Vector3(position.x, yAxis, position.z);
                    var rot = rotation * transform1.rotation;
                
                    var bullet = EnemyPoolManager.Instance.GetBossBullet(round.projectile);
                    bullet.transform.position = position;
                    bullet.transform.rotation = rot;
                }
            
                yield return new WaitForSeconds(fireRate);
            }
        
            _arm.SetLookAtObject(false);
        }
        #endregion
        
        [Serializable]
        private class BulletRound
        {
            public BossBulletType projectile = BossBulletType.MediumOrange;
            public float angle = 20f;
        }
    }
}
