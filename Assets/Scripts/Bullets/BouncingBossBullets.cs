using MM.Entities;
using MM.Entities.Enemies.Bosses;
using MM.Entities.Player.Arms;
using UnityEngine;

namespace MM.Bullets
{
    public class BouncingBossBullets : Bullet
    {
        #region Private Variables

        private Rigidbody _rb;

        #endregion
        
        #region MonoBehaviour Functions

        private void Start()
        {
            _rb = GetComponent<Rigidbody>();
        }

        public override void FixedUpdate()
        {
            Move();
        }
        
        protected override void OnTriggerEnter(Collider other)
        {
            DestroyBullet(other.gameObject);
        }

        #endregion

        #region Private Functions

        private void Move()
        {
            var t = transform;
            var position = t.position;
            var forward = t.forward;
            
            _rb.MovePosition(position + forward * (Time.fixedDeltaTime * bulletData.speed));
            
            Debug.DrawRay(position, forward, Color.green);

            var ray = new Ray(position, forward);

            // Works like OnTriggerEnter but more precise
            if (Physics.Raycast(ray, out var hit, Time.deltaTime * bulletData.speed + 0.4f, bulletData.destroyMask))
            {
                Bounce(ray.direction, hit.normal);
            }
        }
        
        protected override void DestroyBullet(GameObject other)
        {
            switch (other.layer)
            {
                // Enemy, Player
                case 8 or 9:
                    MakeDamage(other.GetComponent<Entity>());
                    break;
            
                // Submodule
                case 6:
                    MakeDamage(other.GetComponent<BossSubmodule>());
                    break;
                
                // Player Arm
                case 18:
                    var arm = other.GetComponent<PlayerArm>();
                    var player = arm.Controller;
                    MakeDamage(player.GetComponent<Entity>());
                    break;
            }
        }

        #endregion

        #region Public Functions
        
        public void Bounce(Vector3 direction, Vector3 normal)
        {
            var reflectDir = Vector3.Reflect(direction, normal);

            var newRotation = 90 - Mathf.Atan2(reflectDir.z, reflectDir.x) * Mathf.Rad2Deg;

            transform.eulerAngles = new Vector3(0, newRotation, 0);
        }

        #endregion
    }
}