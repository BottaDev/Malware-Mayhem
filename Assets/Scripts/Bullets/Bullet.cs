using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using Unity.VisualScripting;
using UnityEngine;

public class Bullet : MonoBehaviour, IUpdatable, IFixedUpdatable
{
    public Pool<Bullet> pool;
    
    [Header("Bullet Properties")] 
    public float damage = 2f; 
    public float speed = 15f;
    public float timeToDestroy = 3f;
    public BulletType bulletType;
    public LayerMask destroyMask;
    public ParticleSystem deathParticles;

    private TrailRenderer _trail;
    private float _spawnTime;

    private void Awake()
    {
        _trail = GetComponent<TrailRenderer>();
    }

    private void Start()
    {
        EventManager.Instance.Subscribe("OnAbsorbedSubmodule", OnAbsorbedSubmodule);
    }

    public virtual void OnEnable()
    {
        UpdateManager.Instance.updates.Add(this);
        UpdateManager.Instance.fixedUpdates.Add(this);
        _spawnTime = Time.time;
    }

    protected virtual void OnDisable()
    {
        UpdateManager.Instance.updates.Remove(this);
        UpdateManager.Instance.fixedUpdates.Remove(this);
    }

    public virtual void FalseUpdate()
    {
        if (_spawnTime + timeToDestroy <= Time.time)
            ReturnToPool();
    }

    public virtual void FalseFixedUpdate()
    {
        transform.Translate(Vector3.forward * (Time.deltaTime * speed));
    }

    protected virtual void OnTriggerEnter(Collider other)
    {
        DestroyBullet(other.gameObject);
    }
    
    private void DestroyBullet(GameObject other)
    {
        // Check if object is in destroyMask
        if (destroyMask == (destroyMask | (1 << other.layer))) 
        {
            ParticleSystem particles = Instantiate(deathParticles, transform.position, Quaternion.identity);
            particles.transform.forward = -transform.forward;
            
            // Enemy, Player, Submodule
            if (other.layer is 8 or 9 or 6)
                MakeDamage(other.GetComponent<Entity>());
            
            ReturnToPool();
        }
    }
    
    protected void MakeDamage(Entity entity)
    {
        entity.TakeDamage(damage, bulletType);
    }

    private void ReturnToPool()
    {
        if (pool != null)
            pool.ReturnToPool(this);
        else
            Destroy(gameObject);
    }

    private TrailRenderer GetTrail()
    {
        return _trail;
    }

    public static void TurnOn(Bullet bullet)
    {
        var trail = bullet.GetTrail();
        if (trail != null)
            trail.enabled = true;
        
        bullet.gameObject.SetActive(true);
    }
    
    public static void TurnOff(Bullet bullet)
    {
        var trail = bullet.GetTrail();
        if (trail != null)
        {
            trail.Clear();
            trail.enabled = false;
        }

        bullet.gameObject.SetActive(false);
    }

    private void OnAbsorbedSubmodule(params object[] parameters)
    {
        ReturnToPool();
    }

    public enum BulletType
    {
        None,
        Basic,
        Laser,
        Assault
    }
}
