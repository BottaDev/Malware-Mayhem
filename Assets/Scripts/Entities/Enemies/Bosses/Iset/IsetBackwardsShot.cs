using UnityEngine;
using System.Collections;
using MM.Common;

namespace MM.Entities.Enemies.Bosses.Iset
{
    public class IsetBackwardsShot : SubmoduleAttack
    {
        #region Private Variables
        [Header("Projectile Parameters")]
        [SerializeField] private float initialDelay = 1f;
        [SerializeField] private BossBulletType projectile = BossBulletType.PowerfulOrange;
        [Space]
        [Tooltip("The force that the boss will be pushed back when shot")]
        [SerializeField] private float pushBackForce = 1f;
        
        private IsetMobilizer _mobilizer;
        private BossArm _arm;
        #endregion
        
        #region MonoBehaviour Functions
        protected override void Start()
        {
            base.Start();
            _mobilizer = GetComponentInParent<IsetMobilizer>();
            _arm = GetComponentInChildren<BossArm>();
        }
        #endregion
        
        #region Public Functions
        public override void MakeAction()
        {
            base.MakeAction();
            StartCoroutine(SpawnBullet());
        }
        #endregion
        
        #region Private Functions
        private IEnumerator SpawnBullet()
        {
            _mobilizer.StopMovement();
        
            yield return new WaitForSeconds(initialDelay);
        
            // Break the loop if the boss is stunned
            if (_submodule.GetIsStunned())
            {
                _arm.SetLookAtPlayer(false);
                yield return null;
            }
            
            var position = _arm.GetShotSpawn().position;
            
            var bullet = EnemyPoolManager.Instance.GetBossBullet(projectile);
            bullet.transform.position = position;
            bullet.transform.eulerAngles = _arm.GetShotSpawn().transform.eulerAngles;
            
            //AudioManager.Instance.PlayAudioClip(Sounds.SoundType.EnemyBlueShot, position);
                
            // The shot pushes the boss backwards a short distance
            _mobilizer.PushBack(transform.forward * pushBackForce);
             
            _mobilizer.RestartMovement();
        
            _arm.SetLookAtPlayer(false);
        }
        #endregion
    }
}
