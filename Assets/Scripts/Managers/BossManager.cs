using System.Collections;
using System.Collections.Generic;
using Common;
using UnityEngine;

public class BossManager : MonoBehaviourSingleton<BossManager>
{
    [SerializeField] private List<GameObject> bossSubmodules;
    [SerializeField, Range(0f, 10f), Tooltip("Here should be the time taken in the post process effect")] private float waitToAttack;

    private bool _canChange;
    private bool _fightSubmodule;
    private int _moduleIndex;

    private bool _attackPaused;

    private void Start()
    {
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnAbsorbedSubmodule, OnAbsorbedSubmodule);
        EventManager.Instance.Subscribe(EventManager.NameEvent.OnReturnedBoss, OnReturnedBoss);
    }

    private void OnAbsorbedSubmodule(params object[] parameters)
    {
        _moduleIndex = (int) parameters[0];
        _fightSubmodule = true;
        StartCoroutine(ChangeScenes());
    }
    
    private void OnReturnedBoss(params object[] parameters)
    {
        _fightSubmodule = false;
        _moduleIndex = 0;
        StartCoroutine(ChangeScenes());
    }

    private IEnumerator ChangeScenes()
    {
        yield return new WaitUntil((() => _canChange));
        
        foreach (var t in bossSubmodules)
        {
            t.SetActive(false);
        }
        
        bossSubmodules[_moduleIndex].SetActive(true);
        StartCoroutine(WaitToFireAgain());
    }

    public bool CheckFightSubmodule()
    {
        return _fightSubmodule;
    }

    public bool GetAttackPause()
    {
        return _attackPaused;
    }

    private IEnumerator WaitToFireAgain()
    {
        _attackPaused = true;
        yield return new WaitForSecondsRealtime(waitToAttack);
        _attackPaused = false;
    }

    public void ChangeStatus(bool canChange)
    {
        _canChange = canChange;
    }
}
