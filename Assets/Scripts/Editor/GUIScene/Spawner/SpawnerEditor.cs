using System.Collections.Generic;
using UnityEditor;
using UnityEditorInternal;
using UnityEngine;

[CustomEditor(typeof(Spawner))]
public class SpawnerEditor : Editor
{
    private Spawner _spawner;
    private int _totalSpawnPoints;
    private int _prevTotalSpawnPoints;
    private int _totalEnemies;
    private int _prevTotalEnemies;

    private GUIStyle _title;
    private readonly GUILayoutOption _layoutOption = GUILayout.Width(280);
    
    private void OnEnable()
    {
        _spawner = (Spawner) target;
        
        _title = new GUIStyle
        {
            normal =
            {
                textColor = Color.white
            },
            alignment = TextAnchor.MiddleCenter,
            fontSize = 20
        };
    }
    
    //Custom Inspector

    public override void OnInspectorGUI()
    {
        serializedObject.Update();
        
        GUILayout.Label("Spawns Data", _title);
        
        EditorGUILayout.Space();
        
        DrawEnemies();
        
        EditorGUILayout.Space();
        
        DrawSpawnPoints();
        
        EditorGUILayout.Space();
        
        CountRestriction();
        
        EditorGUILayout.Space();
        
        TimeRestriction();
        
        EditorGUILayout.Space();
        
        Layers();
        
        serializedObject.ApplyModifiedProperties();
        
        if (GUI.changed)
            EditorUtility.SetDirty(target);
    }
    
    private void DrawEnemies()
    {
        EditorGUILayout.BeginHorizontal();
        GUILayout.Label("Enemies");
        _totalEnemies = EditorGUILayout.IntSlider(_totalEnemies, 0, 5, _layoutOption);
        EditorGUILayout.EndHorizontal();
        
        EditorGUILayout.Space();
        
        if (GUILayout.Button("Create Enemies"))
        {
            if(_totalEnemies == _prevTotalEnemies)
                return;
            
            if(_totalEnemies < _prevTotalEnemies && _totalEnemies > 0)
                _spawner.enemies.RemoveRange(_totalEnemies, _prevTotalEnemies - _totalEnemies);
            else if(_totalEnemies > _prevTotalEnemies)
            {
                for (var i = 0; i < _totalEnemies - _prevTotalEnemies; i++)
                    _spawner.enemies.Add(new Spawner.SpawnData());
            }
            else if(_totalEnemies <= 0)
            {
                _spawner.enemies.Clear();   
                return;
            }
            
            _prevTotalEnemies = _totalEnemies;
        }
        
        EditorGUILayout.Space();
        
        var spawns = _spawner.GetEnemies();

        foreach (var t in spawns)
        {
            EditorGUILayout.BeginHorizontal();
            
            t.name = EditorGUILayout.TextField("Name",t.name, _layoutOption);
            
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.BeginHorizontal();
            
            GUILayout.Label("Enemy Spawn");
            t.enemySpawn = EditorGUILayout.ObjectField(t.enemySpawn, typeof(EnemySpawn), true, _layoutOption) as EnemySpawn;
            
            EditorGUILayout.EndHorizontal();
            
            EditorGUILayout.BeginHorizontal();
            
            GUILayout.Label("Max Type Enemies");
            t.maxCount = EditorGUILayout.IntField(t.maxCount, _layoutOption);
            
            EditorGUILayout.EndHorizontal();
            
            EditorGUILayout.BeginHorizontal();
            
            GUILayout.Label("Probability");
            t.probability = EditorGUILayout.FloatField(t.probability, _layoutOption);
            
            EditorGUILayout.EndHorizontal();
            
            EditorGUILayout.Space(10);
        }
    }
    
    private void DrawSpawnPoints()
    {
        EditorGUILayout.BeginHorizontal();
        GUILayout.Label("Spawn Points");
        _totalSpawnPoints = EditorGUILayout.IntSlider(_totalSpawnPoints, 0, 5, _layoutOption);
        EditorGUILayout.EndHorizontal();
        
        EditorGUILayout.Space();
        
        if (GUILayout.Button("Create Spawn Points"))
        {
            if(_totalSpawnPoints == _prevTotalSpawnPoints)
                return;
            
            if(_totalSpawnPoints < _prevTotalSpawnPoints)
                _spawner.spawnPoints.RemoveRange(_totalSpawnPoints, _prevTotalSpawnPoints - _totalSpawnPoints);
            else if(_totalSpawnPoints > _prevTotalSpawnPoints)
            {
                for (var i = 0; i < _totalSpawnPoints - _prevTotalSpawnPoints; i++)
                    _spawner.spawnPoints.Add(new Spawner.SpawnPointData());
            }
            else if(_spawner.spawnPoints.Count <= 0)
            {
                _spawner.spawnPoints.Clear();   
                return;
            }
            
            _prevTotalSpawnPoints = _totalSpawnPoints;
        }
        
        EditorGUILayout.Space();
        
        var spawns = _spawner.GetSpawnPoints();

        foreach (var t in spawns)
        {
            EditorGUILayout.BeginHorizontal();
            
            EditorGUILayout.TextField("Name",t.spawnPoint.name);
            
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.BeginHorizontal();
            
            GUILayout.Label("Spawn Point");
            t.spawnPoint = EditorGUILayout.ObjectField(t.spawnPoint, typeof(Transform), true, _layoutOption) as Transform;
            
            EditorGUILayout.EndHorizontal();
            
            EditorGUILayout.BeginHorizontal();
            
            GUILayout.Label("Detection Area");
            t.detectionArea = EditorGUILayout.FloatField(t.detectionArea, _layoutOption);
            
            EditorGUILayout.EndHorizontal();
            
            EditorGUILayout.BeginHorizontal();
            
            GUILayout.Label("Spawn Area");
            t.spawnArea = EditorGUILayout.FloatField(t.spawnArea, _layoutOption);
            
            EditorGUILayout.EndHorizontal();
            
            EditorGUILayout.Space(10);
        }
    }

    private void CountRestriction()
    {
        GUILayout.Label("Count Restriction", _title);
        
        EditorGUILayout.Space();
        
        _spawner.maxLivingEnemies = EditorGUILayout.IntField("Max Enemies Alive", _spawner.maxLivingEnemies);
        
        _spawner.maxSpawnedEnemies = EditorGUILayout.IntField("Max Enemies Spawned", _spawner.maxSpawnedEnemies);
    }

    private void TimeRestriction()
    {
        GUILayout.Label("Time Restriction", _title);
        
        EditorGUILayout.Space();
        
        _spawner.spawnRate = EditorGUILayout.FloatField("Spawn Rate", _spawner.spawnRate);
    }

    private void Layers()
    {
        GUILayout.Label("Time Restriction", _title);
        
        EditorGUILayout.Space();
        
        _spawner.spawnObstacleMask = EditorGUILayout.MaskField("Spawn Obstacle Mask" ,InternalEditorUtility.LayerMaskToConcatenatedLayersMask(_spawner.spawnObstacleMask), InternalEditorUtility.layers);
        
        _spawner.playerMask = EditorGUILayout.MaskField("Player Mask" ,InternalEditorUtility.LayerMaskToConcatenatedLayersMask(_spawner.playerMask), InternalEditorUtility.layers);
    }
    
    //On Scene GUI
    private void OnSceneGUI()
    {
        DrawPositions();
    }
    
    private void DrawPositions()
    {
        var spawns = _spawner.GetSpawnPoints();
            
        if (spawns.Count <= 0)
            return;
        
        foreach (var t in spawns)
        {
            if (t.spawnPoint == null)
                continue;
            
            var transform = t.spawnPoint;
            
            var position = transform.position;
            var rotation = transform.rotation;

            t.spawnPoint.position = Handles.PositionHandle(position, rotation);
        }
    }
}
