using System;
using System.Collections;
using System.Linq;
using System.Collections.Generic;
using UnityEngine;
using Random = UnityEngine.Random;

public class BossSubmodule : Entity
{
    [Header("Submodule Parameters")] 
    [SerializeField] private List<SubModulePhase> attackPhases;
    [Tooltip("The type of bullet it must be to take damage")]
    [SerializeField] private Bullet.BulletType bulletType;
    [Header("Stun Parameters")]
    [SerializeField] private float stunTime = 5f;
    [Tooltip("The percentage that the module recovers when leaving the stun state")]
    [SerializeField, Range(1, 100)] private float recoveryPercentage = 50f;
	[SerializeField] protected GameObject absorbEffect;
	public int submoduleIndex;
    
    [HideInInspector]public bool wasAbsorbed;
    private Boss _boss;
    private bool _isStunned;
    private bool _isInvulnerable;
    private float _currentAttackTime;
    private int _currentPhase;

    [Serializable]
    public class SubModulePhase
    {
        public string name = "Phase";
        public List<SubmoduleAttack> attacks;
    }
    
    private void Start()
    {
        _boss = GetComponentInParent<Boss>();
        EventManager.Instance.Subscribe("OnReturnedBoss", OnReturnedBoss);
    }
    
    private int _lastAttackIndex = -1;
    public void MakeAction()
    {
        if (_isStunned)
            return;

        if (attackPhases.Count > 2)
        {
            var randomAttack = attackPhases[_currentPhase].attacks.Where((_, index) => index != _lastAttackIndex).ToList()[Random.Range(0, attackPhases.Count - 1)];
            _lastAttackIndex = attackPhases[_currentPhase].attacks.IndexOf(randomAttack);
        }
        else
        {
            _lastAttackIndex = Random.Range(0, attackPhases[_currentPhase].attacks.Count);
        }
        
        var attack = attackPhases[_currentPhase].attacks[_lastAttackIndex];
        attack.MakeAction();
        _currentAttackTime = attack.GetTimeAfterExecuting();
    }

    public void ChangePhase()
    {
        _lastAttackIndex = -1;
        _currentPhase++;

        // If the current phase is greater than the amount of phases, don't attack
        _isStunned = _currentPhase >= attackPhases.Count;
    }
    
    protected virtual IEnumerator StunModule()
    {
        Stun();
        
        yield return new WaitForSeconds(stunTime);

        RecoverFromStun();
    }

    private void Stun()
    {
        _isInvulnerable = true;
        _isStunned = true;

        absorbEffect.SetActive(true);
    }
    
    private void RecoverFromStun()
    {
        if (absorbEffect != null)
            absorbEffect.SetActive(false);

        _isStunned = false;
        
        var newHp = (recoveryPercentage * hp) / 100;
        _currentHp = newHp;
        
        _isInvulnerable = false;
    }
    
    public override void TakeDamage(float damage, Bullet.BulletType bType = Bullet.BulletType.None, bool showDamage = true)
    {
        if (_isInvulnerable ||
            bType != bulletType)
        {
            return;   
        }

        _currentHp -= damage;
        
        if(showDamage)
            StartCoroutine(ShowDamage());
        
        if (_currentHp <= 0)
            StartCoroutine(StunModule());
    }

    public void TransmitDamage(float damage, Bullet.BulletType bType = Bullet.BulletType.None, bool showDamage = true)
    {
        _boss.TakeDamage(damage, bType, showDamage);
    }
    
    public float GetTimeAfterExecuting()
    {
        return _currentAttackTime;
    }

    private void OnReturnedBoss(params object[] parameters)
    {
        var won = (bool) parameters[0];
        if (won)
        {
            if((int)parameters[1] != submoduleIndex) return;
            DestroyModule();
        }
        else
        {
            RecoverFromStun();
            StartEnragedState();
        }
    }

    /// <summary>
    /// Makes the boss enter the enraged state. Cannot be damaged
    /// </summary>
    private void StartEnragedState()
    {
        _isInvulnerable = true;
    }
    
    private void DestroyModule()
    {
        Destroy(gameObject);
    }

    public bool GetIsStunned()
    {
        return _isStunned;
    }

    public Boss GetBoss()
    {
        return _boss;
    }
}
