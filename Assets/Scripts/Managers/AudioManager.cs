using System.Linq;
using MM.Common;
using UnityEngine;

namespace MM.Sound
{
    [RequireComponent(typeof(AudioSource))]
    public class AudioManager : MonoBehaviourSingleton<AudioManager>
    {
        #region Private Variables

        [SerializeField] private AudioClip[] backgroundMusic;
        [SerializeField] private Sounds[] sounds;
        private AudioSource _audioSource;
        
        #endregion

        #region MonoBehaviour Functions

        protected override void Awake()
        {
            base.Awake();

            DontDestroyOnLoad(this);

            _audioSource = GetComponent<AudioSource>();
        }

        #endregion

        #region Public Functions

        /// <summary>
        /// Play a random sound of the specified type at a
        /// random pitch in the specified position
        /// </summary>
        /// <param name="type"></param>
        /// <param name="position"></param>
        public void PlayAudioClip(Sounds.SoundType type, Vector3 position)
        {
            // Get all the sounds of the type
            var soundOfType = sounds.FirstOrDefault(s => s.GetSoundType() == type);

            if (soundOfType == null)
            {
                Debug.LogError($"Sound of type '{type}' not found");
                return;
            }

            // Get a random sound from the array
            var sound = soundOfType.GetRandomSound();

            if (sound.GetSoundClip() == null)
            {
                Debug.LogError($"Sound Clip of type '{type}' not found");
                return;
            }

            var soundSource = SoundPoolManager.Instance.SoundSourcePool.Get();
            soundSource.pool = SoundPoolManager.Instance.SoundSourcePool;

            StartCoroutine(soundSource.PlaySound(sound.GetSoundClip(), sound.GetMinPitch(), sound.GetMaxPitch(),
                sound.GetVolume(), position));
        }
        
        public void PlayMusic(string themeName)
        {
            var theme = backgroundMusic.FirstOrDefault(t => t.name == themeName);

            if (theme == null)
            {
                Debug.LogError($"Theme '{themeName}' not found");
                return;
            }

            StopMusic();

            _audioSource.clip = theme;
            _audioSource.Play();
        }
        
        /// <summary>
        /// Stop the current music theme
        /// </summary>
        public void StopMusic()
        {
            _audioSource.Stop();
        }

        #endregion
    }
}