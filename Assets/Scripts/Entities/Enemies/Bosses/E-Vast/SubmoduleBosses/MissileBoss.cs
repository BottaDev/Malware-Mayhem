using System.Collections;
using MM.Events;
using UnityEngine;

namespace MM.Entities.Enemies.Bosses.E_Vast.SubmoduleBosses
{
    public class MissileBoss : SubBoss
    {
        [SerializeField] private Transform[] holesPositions;
        [SerializeField] private float timeToHide = 3f;
        [SerializeField] private float timeToAttack = 1.5f;
        [SerializeField] private float timeToGoOut = 5;
        private float _currentTime;
        private int _holeNumber;
        private bool _isOutside;
        private bool _isAttacking;
        private Transform _t;
        private GenericAttackPhase _genericAttack;

        protected override void Awake()
        {
            base.Awake();
        
            _t = GetComponent<Transform>();
        
            _genericAttack = GetComponent<GenericAttackPhase>();
            _genericAttack.enabled = false;
            _genericAttack.SetCanAttack(true);
        
            SetTime();
        }

        public void Update()
        {
            if(_isOutside || _isAttacking)
                return;

            if (_currentTime <= 0)
            {
                _isAttacking = true;
                MakeAction();
                SetTime();
            }
            else
            {
                _currentTime -= Time.deltaTime;
            }
        }

        protected override void LateUpdate() { /* Cancel Rotation */ }
    
        private void MakeAction()
        {
            _holeNumber = Random.Range(0, holesPositions.Length);

            _t.position = holesPositions[_holeNumber].position;

            StartCoroutine(MakeAttack());
        }

        private IEnumerator MakeAttack()
        {
            EventManager.Instance.Trigger(NameEvent.OnMissileBossMoved, true, _holeNumber);
            StartCoroutine(Move());
        
            yield return new WaitUntil(() => _isOutside);

            yield return new WaitForSeconds(timeToAttack);

            _genericAttack.enabled = true;

            yield return new WaitForSeconds(timeToHide);

            _genericAttack.enabled = false;
            _isAttacking = false;
            StartCoroutine(Move());
            yield return new WaitForSeconds(.2f);
            EventManager.Instance.Trigger(NameEvent.OnMissileBossMoved, false, _holeNumber);
        }

        private IEnumerator Move()
        {

            for (var i = 0; i < 60; i++)
            {
                if (_isOutside)
                    _t.position -= _t.up * .13f;
                else
                    _t.position += _t.up * .13f;

                yield return new WaitForSeconds(.01f);
            }

            _isOutside = !_isOutside;
        }

        private void SetTime()
        {
            _currentTime = timeToGoOut;
        }
    }
}